%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R9F6F.tmp.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: hp
%%CreationDate: 2012/5/23, 11:18:10
%%BoundingBox: 0 0 113 117
%%HiResBoundingBox: 0 0 112.9547 116.7325
%%CropBox: 0 0 112.9547 116.7325
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 862 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-05-23T10:59:25+08:00"
   xmp:CreateDate="2012-05-23T10:59:25+08:00"
   xmp:MetadataDate="2012-05-23T10:59:25+08:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:b7982fac-46fb-4008-a36e-95143b4ddcba"
   xmpMM:InstanceID="uuid:6e8a15b4-373e-4940-9830-f44b1a3569c7"
   pdf:Producer="dvipdfm 0.13.2c, Copyright © 1998, by Mark A. Wicks"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
/0 {
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!!~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 0 sub 255 div mul 0 add
dup 0 lt{pop 0 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
/1 {
<~J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 -1 sub 255 div mul -1 add
dup -1 lt{pop -1 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -116.732 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 116.732 li
112.955 116.732 li
112.955 0 li
cp
clp
[1 0 0 1 -280.309 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
%ADOBeginSubsetFont: PBAAAA+CMSS9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PBAAAA+CMSS9 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 55 /seven put
dup 74 /J put
dup 78 /N put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
def
/UniqueID 5000802 def
/FontBBox {-63 -250 1027 760} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 654 676] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [65] def
/StdVW [83] def
/StemSnapH [59 65] def
/StemSnapV [83 96] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/hyphen <1C60D8A8C9B08A9599C1D3CEECCC74CEA0BFCF68C7285757A6BC5EE
D6BF027BE3AF453BE> |-
/period <1C60D8A8C9B08A9573EBC19D9789FEE9523E0D2294812D3B9D5C126
2F0E9D39E> |-
/seven <1C60D8A8C9B08A95D419B460E029BC31E067CE912580C93FDA2AF6F2
E7BAB2CD73057AB3B79866E0F29D8DA268E9B7324BB376F9234E7FDF4AFFB73F
FBA6D86AB3CF301D9FDA14BAF0AB> |-
/J <1C60D8A8C9B08A95A16640303E6C3F6DF4AF9F37F67D9034109C13C8FA19
F4341EBEF0A97D906AF70048BBD6AB1451975EAE22DAA7BAB8D9A7BC13600CD6
D815663F> |-
/N <1C60D8A8C9B08A94554EAEFCD4CE8746680423CC8CFAA2F471EA56523723
7F08F3B242BDA9ECB37ECEDFC9BD9CF91D570E9B81B65B654B02C298D0988EDE
207EC8EDC69E3282A7E6EA5F51454530B07A7DF3E00AD84503582D9E71772D42> |-
/R <1C60D8A8C9B08A944AD95C017247466CAC2450FD38B14C98EAD1E6464964
F546A6754BACBDB267354F5E7EC2FA36712DBC9963E57C6DB2C13BB503574EAE
D5DC49FFFE9BC2A0312555BB3F6A939E33070AFEE7179F16389CBA38AD823C84
34DEE9AB> |-
/T <1C60D8A8C9B08A945C0F428F546B3BB848C8E01AEE32F05721283C43C21B
A357743CECE68FE7D6BF9B5985488B6A0EA72CE4C952C588762A98808104EDC2> |-
/a <1C60D8A8C9B08A95DCFF4B6D9A02AF26D2AC0C3167AF56FAD1B9F7FAC50F
35C5A104CBB1FE075E23CA1E275B0CAEE7BE50D4BA74D7E1E515A9074E58321C
993761DBBE24FB650AC385443976704254A87FF4B4BA2D4AD420FA65401A7B73
D491D7FF774BBECC15D0CA98CCA23A1D3D81003D66748C6D362ADDC9CB> |-
/d <1C60D8A8C9B08A95D389FF3B6F40D65E7EE2E79B82E173C633953EEF40A8
28EA2C481BDD9CA39AC36514C896156117CC2E749B1EF907981500A95E11517C
81487D487F81D11605C2A24206A696C15251F33DEE01367BA5C271905480F66B
53B7715B056CF09ECBD4B0C9336E7B6D3E9D> |-
/e <1C60D8A8C9B08A95AE6E164BF06D3E6BF0BD1F6CDC1399C0E251EBA883AB
A978F5F3B67C8C688921313CEAF4F3FA9E2AD18FA4E4755BBDA3C0ED76F29B82
5C44B1F2FF09F478ACC07994A714DF2BCC4335AD79B974C79C467CE4C94B492D
F5E92C899067EA171418876D97E238> |-
/h <1C60D8A8C9B08A95D389FF3B6F40DD97AF5FF2592CCF108A76A65E63CC32
C04ECE0EE50CAC4AD7478D9D766410D7CF85C3A6C04A5521FBD684151CF0D73D
1DFC31B1B6ABD65F47694C01DD4F933B35B3> |-
/i <1C60D8A8C9B08A954360CA969618D89A9C05CEA154307EBB76EA89A2A8AE
ED8DEBE336A09BB7C396C4E2D55BD7DB7B9A094EB5B673> |-
/k <1C60D8A8C9B08A95D8E840BC3BFE75A638CD7A23EF0CDE3F49AA97A7E0AF
040F321B72E7C8E06D1921B484B3E623A458072795A4053BE166E3CDC31D26EB
7524DE99> |-
/l <1C60D8A8C9B08A954360CA969618D89A9C04129436711AEEC4905FA72D3B
40827695C5700B3A> |-
/n <1C60D8A8C9B08A95D389FF3B6F40DD97AF5FF2592CEA32CB325322F25372
15D68F8B92F40EBE3D6D3EA1CCCB69BCE2E46E7ABCDE0A754DA5065F69A55611
DD2479127D6C12341D0BD869C2> |-
/o <1C60D8A8C9B08A95D419B460E029BC5E2B28EC2D04EC3E48F313F8D98C32
940F9391A280C509858ECFC4363CEF3ECDFD6B599C81150B0186E6FE891923CC
2D346AAE541450F3063C6B76D23277E1B7B3D3926C0D55CA107DD6EB151B1F0B
B7> |-
/r <1C60D8A8C9B08A9595FC89B6E9756C89C4538155D9B836AE85C5DE9254AB
A7CB440167679B427516EF3913F309BB6C0A9737B0704AC1F00A> |-
/s <1C60D8A8C9B08A958517F85C0B5C7A305EF204CC40060EFC810FFB267D42
2259070942FF52CB20A82AA685238DF39783364B3240D149097220C68AE83287
53507742122140E44502BB4F7C04E7FF7357818D8B7872052E9AF0BF85CE6756
4FC607BD616B5505AF02439CD7A804B538688E25AEB6A95DBAE2AFD90B88AB16
9C01054ECE> |-
/t <1C60D8A8C9B08A958C6C343E33A4270C8FB63E980FB92619BFAC5A3BD997
9384E8B8C56B24DF0A15EA803551AF37A34013A5D036F4EAE26064BB5DC2BAA7
E6552C68D332550A38424707C8FBFDDAA9C32FA9902619617A> |-
/w <1C60D8A8C9B08A945C0F428F546B3BB848C82207020C25E6E1304F403DF2
D69EF26DCA4A686694A51422EA3A8BAF81D8A76B7EF957484BFEC60D41640B11
B671E85FAD36E420E1FA26EC2B393F2B38F2DCE74DEFF04E63425E456055D10B
75E26486CA77AD94A701590594FEEB69700838E6B58B49DB55C796F708> |-
/.notdef <1C60D8A8C9B08A9599C1D3CEECCC8D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGP+CMSS9 /PBAAAA+CMSS9 findfont ct_VMDictPut
/LLNMGP+CMSS9*1 
[45{/.notdef}rp /hyphen /period 8{/.notdef}rp /seven 18{/.notdef}rp /J 3{/.notdef}rp 
/N 3{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 2{/.notdef}rp 
/d /e 2{/.notdef}rp /h /i /.notdef /k /l 
/.notdef /n /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp 
/w 136{/.notdef}rp]
LLNMGP+CMSS9 nf
LLNMGP+CMSS9*1 [8.96251 0 0 -8.96251 0 0 ]msf
246.359 -18.7496 mo
(Notallthosethatwanderarelost-J.R.R.Tolkien.)
[6.51402 4.60582 6.39111 4.42575 2.19943 5.26465 3.32593 4.75821 4.60583 3.53119 7.16824 3.32593 
4.75818 4.42575 6.39111 6.05142 4.42575 4.75815 4.75821 4.09412 6.20297 4.18375 3.14679 7.15924 
2.19949 4.60583 3.53119 6.39111 3.07059 4.35669 2.55887 5.96805 2.5589 5.96805 5.63303 5.53162 
4.60583 2.19946 4.50192 2.19946 4.09409 4.75818 0 ]xsh
%ADOBeginSubsetFont: ONKBAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ONKBAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 162 /periodcentered put
def
/UniqueID 5000820 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/periodcentered <1C60D8A8C9B08A9570810981675914128BE127B37F6B187
0E52A8E7D3172BCF8343C9144FE45026AE1F1D611879B23BC> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGQ+CMSY10 /ONKBAA+CMSY10 findfont ct_VMDictPut
/LLNMGQ+CMSY10*1 
[162{/.notdef}rp /periodcentered 93{/.notdef}rp]
LLNMGQ+CMSY10 nf
LLNMGQ+CMSY10*1 [14.344 0 0 -14.344 0 0 ]msf
459.128 -18.7496 mo
(\242)sh
LLNMGP+CMSS9*1 [8.96251 0 0 -8.96251 0 0 ]msf
480.044 -18.7496 mo
(7)sh
161.459 112.941 mo
161.459 112.38 161.245 111.841 160.865 111.444 cv
160.484 111.047 159.968 110.823 159.431 110.823 cv
158.893 110.823 158.377 111.047 157.996 111.444 cv
157.616 111.841 157.402 112.38 157.402 112.941 cv
157.402 113.503 157.616 114.042 157.996 114.439 cv
158.377 114.836 158.893 115.06 159.431 115.06 cv
159.968 115.06 160.484 114.836 160.865 114.439 cv
161.245 114.042 161.459 113.503 161.459 112.941 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
161.459 91.7655 mo
161.459 91.2032 161.245 90.6641 160.865 90.2672 cv
160.484 89.8702 159.968 89.6465 159.431 89.6465 cv
158.893 89.6465 158.377 89.8702 157.996 90.2672 cv
157.616 90.6641 157.402 91.2032 157.402 91.7655 cv
157.402 92.3259 157.616 92.8649 157.996 93.2619 cv
158.377 93.6588 158.893 93.8826 159.431 93.8826 cv
159.968 93.8826 160.484 93.6588 160.865 93.2619 cv
161.245 92.8649 161.459 92.3259 161.459 91.7655 cv
f
161.459 70.5884 mo
161.459 70.0262 161.245 69.4871 160.865 69.0901 cv
160.484 68.6932 159.968 68.4714 159.431 68.4714 cv
158.893 68.4714 158.377 68.6932 157.996 69.0901 cv
157.616 69.4871 157.402 70.0262 157.402 70.5884 cv
157.402 71.1509 157.616 71.6879 157.996 72.0849 cv
158.377 72.4819 158.893 72.7056 159.431 72.7056 cv
159.968 72.7056 160.484 72.4819 160.865 72.0849 cv
161.245 71.6879 161.459 71.1509 161.459 70.5884 cv
f
161.459 49.4115 mo
161.459 48.8492 161.245 48.3121 160.865 47.9152 cv
160.484 47.5182 159.968 47.2944 159.431 47.2944 cv
158.893 47.2944 158.377 47.5182 157.996 47.9152 cv
157.616 48.3121 157.402 48.8492 157.402 49.4115 cv
157.402 49.9739 157.616 50.5129 157.996 50.9099 cv
158.377 51.3068 158.893 51.5286 159.431 51.5286 cv
159.968 51.5286 160.484 51.3068 160.865 50.9099 cv
161.245 50.5129 161.459 49.9739 161.459 49.4115 cv
f
161.459 28.2345 mo
161.459 27.6741 161.245 27.1351 160.865 26.7382 cv
160.484 26.3412 159.968 26.1174 159.431 26.1174 cv
158.893 26.1174 158.377 26.3412 157.996 26.7382 cv
157.616 27.1351 157.402 27.6741 157.402 28.2345 cv
157.402 28.7969 157.616 29.3359 157.996 29.7328 cv
158.377 30.1298 158.893 30.3536 159.431 30.3536 cv
159.968 30.3536 160.484 30.1298 160.865 29.7328 cv
161.245 29.3359 161.459 28.7969 161.459 28.2345 cv
f
161.459 7.05951 mo
161.459 6.49713 161.245 5.95813 160.865 5.56116 cv
160.484 5.16418 159.968 4.94043 159.431 4.94043 cv
158.893 4.94043 158.377 5.16418 157.996 5.56116 cv
157.616 5.95813 157.402 6.49713 157.402 7.05951 cv
157.402 7.61993 157.616 8.15894 157.996 8.55591 cv
158.377 8.95282 158.893 9.17664 159.431 9.17664 cv
159.968 9.17664 160.484 8.95282 160.865 8.55591 cv
161.245 8.15894 161.459 7.61993 161.459 7.05951 cv
f
212.163 112.941 mo
212.163 112.38 211.949 111.841 211.569 111.444 cv
211.189 111.047 210.673 110.823 210.135 110.823 cv
209.597 110.823 209.081 111.047 208.701 111.444 cv
208.32 111.841 208.107 112.38 208.107 112.941 cv
208.107 113.503 208.32 114.042 208.701 114.439 cv
209.081 114.836 209.597 115.06 210.135 115.06 cv
210.673 115.06 211.189 114.836 211.569 114.439 cv
211.949 114.042 212.163 113.503 212.163 112.941 cv
cp
0 0 0 1 cmyk
.459442 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
212.163 91.7655 mo
212.163 91.2032 211.949 90.6641 211.569 90.2672 cv
211.189 89.8702 210.673 89.6465 210.135 89.6465 cv
209.597 89.6465 209.081 89.8702 208.701 90.2672 cv
208.32 90.6641 208.107 91.2032 208.107 91.7655 cv
208.107 92.3259 208.32 92.8649 208.701 93.2619 cv
209.081 93.6588 209.597 93.8826 210.135 93.8826 cv
210.673 93.8826 211.189 93.6588 211.569 93.2619 cv
211.949 92.8649 212.163 92.3259 212.163 91.7655 cv
cp
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
212.163 70.5884 mo
212.163 70.0262 211.949 69.4871 211.569 69.0901 cv
211.189 68.6932 210.673 68.4714 210.135 68.4714 cv
209.597 68.4714 209.081 68.6932 208.701 69.0901 cv
208.32 69.4871 208.107 70.0262 208.107 70.5884 cv
208.107 71.1509 208.32 71.6879 208.701 72.0849 cv
209.081 72.4819 209.597 72.7056 210.135 72.7056 cv
210.673 72.7056 211.189 72.4819 211.569 72.0849 cv
211.949 71.6879 212.163 71.1509 212.163 70.5884 cv
cp
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
212.163 49.4115 mo
212.163 48.8492 211.949 48.3121 211.569 47.9152 cv
211.189 47.5182 210.673 47.2944 210.135 47.2944 cv
209.597 47.2944 209.081 47.5182 208.701 47.9152 cv
208.32 48.3121 208.107 48.8492 208.107 49.4115 cv
208.107 49.9739 208.32 50.5129 208.701 50.9099 cv
209.081 51.3068 209.597 51.5286 210.135 51.5286 cv
210.673 51.5286 211.189 51.3068 211.569 50.9099 cv
211.949 50.5129 212.163 49.9739 212.163 49.4115 cv
cp
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
212.163 28.2345 mo
212.163 27.6741 211.949 27.1351 211.569 26.7382 cv
211.189 26.3412 210.673 26.1174 210.135 26.1174 cv
209.597 26.1174 209.081 26.3412 208.701 26.7382 cv
208.32 27.1351 208.107 27.6741 208.107 28.2345 cv
208.107 28.7969 208.32 29.3359 208.701 29.7328 cv
209.081 30.1298 209.597 30.3536 210.135 30.3536 cv
210.673 30.3536 211.189 30.1298 211.569 29.7328 cv
211.949 29.3359 212.163 28.7969 212.163 28.2345 cv
cp
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
212.163 7.05951 mo
212.163 6.49713 211.949 5.95813 211.569 5.56116 cv
211.189 5.16418 210.673 4.94043 210.135 4.94043 cv
209.597 4.94043 209.081 5.16418 208.701 5.56116 cv
208.32 5.95813 208.107 6.49713 208.107 7.05951 cv
208.107 7.61993 208.32 8.15894 208.701 8.55591 cv
209.081 8.95282 209.597 9.17664 210.135 9.17664 cv
210.673 9.17664 211.189 8.95282 211.569 8.55591 cv
211.949 8.15894 212.163 7.61993 212.163 7.05951 cv
cp
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 112.941 li
1 lc
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 112.941 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 112.941 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 91.7655 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 112.941 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 70.5884 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 112.941 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 49.4115 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 112.941 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 28.2345 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 112.941 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 91.7655 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 70.5884 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 49.4115 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 28.2345 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
159.431 7.05951 mo
210.135 7.05951 li
gsave
[.81127 0 0 -.847061 36.4267 612.052 ]ct
@
grestore newpath
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: EUBBAA+Fa Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /EUBBAA+Fa def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {0 0 419 666} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGR+Fa /EUBBAA+Fa findfont ct_VMDictPut
/LLNMGR+Fa*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LLNMGR+Fa nf
LLNMGR+Fa*1 [8.08242 0 0 -8.43899 0 0 ]msf
282.267 493.985 mo
(1)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: GFNBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /GFNBAA+CMR8 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 97 /a put
def
/UniqueID 5000791 def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B08A950C44F05CDCAE3556D5BFFD62B009B916EA3B
CE379FA899445528B346627042B4B978F02CC58419190BE3F5154222C5097C13
20AD20CE4B3B6E1BA9C2A9B45E682516AEED997C7277905D0E0C9C35C91EF42E
22B2A19E47421F996C4A84757FDCD9> |-
/parenright <1C60D8A8C9B08A950C44F05CDCAE3556D5BFFD62B009BCCEDB6
618D1DBA4E1B59E4D4D2EFB6FCB458A61EC0C17F9C9CAAF26CB39A69068C2FEB
C0237067110556BA02907DC81CDFFCECA1D23A0D3D124B6393F96D5EF0CC6918
BEF8FF38B9BA21B89C7FDCA41FAE319AB65FE04D68F5E> |-
/a <1C60D8A8C9B08A95D352586DE3151568EBCB6FFC486C7EE7CC8A87ACC953
4EB503E06C12484FD0DA952679BAE135A77634BD9169848921628390F151ED08
D470B2DDF9D08C6FE7402379CC55EFE3C95C475E74FE09E40E083708ADE05950
6D87C4F49B545D0FFEF6E1ADE8F21D8B47560D731786EB455F5691D310B11A5A
E852134FF829F57844F9C7188A47C57C5706D46E4BF9D9E5B6839941850947F1
F31241EA6103> |-
/.notdef <1C60D8A8C9B08A9596FE72ACE143EF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGS+CMR8 /GFNBAA+CMR8 findfont ct_VMDictPut
/LLNMGS+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a 158{/.notdef}rp]
LLNMGS+CMR8 nf
LLNMGS+CMR8*1 [7.97223 0 0 -7.97223 0 0 ]msf
177.43 127.331 mo
(\(a\))
[3.29407 4.23561 0 ]xsh
225.429 110.694 mo
225.429 110.157 225.242 109.641 224.909 109.261 cv
224.575 108.88 224.123 108.666 223.652 108.666 cv
223.18 108.666 222.728 108.88 222.395 109.261 cv
222.061 109.641 221.874 110.157 221.874 110.694 cv
221.874 111.232 222.061 111.749 222.395 112.129 cv
222.728 112.509 223.18 112.723 223.652 112.723 cv
224.123 112.723 224.575 112.509 224.909 112.129 cv
225.242 111.749 225.429 111.232 225.429 110.694 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
225.429 90.4135 mo
225.429 89.8749 225.242 89.3587 224.909 88.9785 cv
224.575 88.5983 224.123 88.384 223.652 88.384 cv
223.18 88.384 222.728 88.5983 222.395 88.9785 cv
222.061 89.3587 221.874 89.8749 221.874 90.4135 cv
221.874 90.9503 222.061 91.4665 222.395 91.8466 cv
222.728 92.2268 223.18 92.4412 223.652 92.4412 cv
224.123 92.4412 224.575 92.2268 224.909 91.8466 cv
225.242 91.4665 225.429 90.9503 225.429 90.4135 cv
f
225.429 70.1312 mo
225.429 69.5927 225.242 69.0765 224.909 68.6963 cv
224.575 68.3161 224.123 68.1036 223.652 68.1036 cv
223.18 68.1036 222.728 68.3161 222.395 68.6963 cv
222.061 69.0765 221.874 69.5927 221.874 70.1312 cv
221.874 70.6699 222.061 71.1843 222.395 71.5645 cv
222.728 71.9446 223.18 72.1589 223.652 72.1589 cv
224.123 72.1589 224.575 71.9446 224.909 71.5645 cv
225.242 71.1843 225.429 70.6699 225.429 70.1312 cv
f
225.429 49.8491 mo
225.429 49.3105 225.242 48.7961 224.909 48.416 cv
224.575 48.0358 224.123 47.8214 223.652 47.8214 cv
223.18 47.8214 222.728 48.0358 222.395 48.416 cv
222.061 48.7961 221.874 49.3105 221.874 49.8491 cv
221.874 50.3877 222.061 50.9039 222.395 51.2841 cv
222.728 51.6643 223.18 51.8767 223.652 51.8767 cv
224.123 51.8767 224.575 51.6643 224.909 51.2841 cv
225.242 50.9039 225.429 50.3877 225.429 49.8491 cv
f
225.429 29.5669 mo
225.429 29.0302 225.242 28.5139 224.909 28.1337 cv
224.575 27.7535 224.123 27.5392 223.652 27.5392 cv
223.18 27.5392 222.728 27.7535 222.395 28.1337 cv
222.061 28.5139 221.874 29.0302 221.874 29.5669 cv
221.874 30.1055 222.061 30.6217 222.395 31.0019 cv
222.728 31.3821 223.18 31.5964 223.652 31.5964 cv
224.123 31.5964 224.575 31.3821 224.909 31.0019 cv
225.242 30.6217 225.429 30.1055 225.429 29.5669 cv
f
225.429 9.28656 mo
225.429 8.74799 225.242 8.23175 224.909 7.85156 cv
224.575 7.47137 224.123 7.25708 223.652 7.25708 cv
223.18 7.25708 222.728 7.47137 222.395 7.85156 cv
222.061 8.23175 221.874 8.74799 221.874 9.28656 cv
221.874 9.8233 222.061 10.3396 222.395 10.7198 cv
222.728 11.0999 223.18 11.3143 223.652 11.3143 cv
224.123 11.3143 224.575 11.0999 224.909 10.7198 cv
225.242 10.3396 225.429 9.8233 225.429 9.28656 cv
f
269.874 110.694 mo
269.874 110.157 269.686 109.641 269.353 109.261 cv
269.02 108.88 268.568 108.666 268.096 108.666 cv
267.625 108.666 267.172 108.88 266.839 109.261 cv
266.506 109.641 266.318 110.157 266.318 110.694 cv
266.318 111.232 266.506 111.749 266.839 112.129 cv
267.172 112.509 267.625 112.723 268.096 112.723 cv
268.568 112.723 269.02 112.509 269.353 112.129 cv
269.686 111.749 269.874 111.232 269.874 110.694 cv
cp
0 0 0 1 cmyk
0 lc
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
269.874 90.4135 mo
269.874 89.8749 269.686 89.3587 269.353 88.9785 cv
269.02 88.5983 268.568 88.384 268.096 88.384 cv
267.625 88.384 267.172 88.5983 266.839 88.9785 cv
266.506 89.3587 266.318 89.8749 266.318 90.4135 cv
266.318 90.9503 266.506 91.4665 266.839 91.8466 cv
267.172 92.2268 267.625 92.4412 268.096 92.4412 cv
268.568 92.4412 269.02 92.2268 269.353 91.8466 cv
269.686 91.4665 269.874 90.9503 269.874 90.4135 cv
cp
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
269.874 70.1312 mo
269.874 69.5927 269.686 69.0765 269.353 68.6963 cv
269.02 68.3161 268.568 68.1036 268.096 68.1036 cv
267.625 68.1036 267.172 68.3161 266.839 68.6963 cv
266.506 69.0765 266.318 69.5927 266.318 70.1312 cv
266.318 70.6699 266.506 71.1843 266.839 71.5645 cv
267.172 71.9446 267.625 72.1589 268.096 72.1589 cv
268.568 72.1589 269.02 71.9446 269.353 71.5645 cv
269.686 71.1843 269.874 70.6699 269.874 70.1312 cv
cp
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
269.874 49.8491 mo
269.874 49.3105 269.686 48.7961 269.353 48.416 cv
269.02 48.0358 268.568 47.8214 268.096 47.8214 cv
267.625 47.8214 267.172 48.0358 266.839 48.416 cv
266.506 48.7961 266.318 49.3105 266.318 49.8491 cv
266.318 50.3877 266.506 50.9039 266.839 51.2841 cv
267.172 51.6643 267.625 51.8767 268.096 51.8767 cv
268.568 51.8767 269.02 51.6643 269.353 51.2841 cv
269.686 50.9039 269.874 50.3877 269.874 49.8491 cv
cp
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
269.874 29.5669 mo
269.874 29.0302 269.686 28.5139 269.353 28.1337 cv
269.02 27.7535 268.568 27.5392 268.096 27.5392 cv
267.625 27.5392 267.172 27.7535 266.839 28.1337 cv
266.506 28.5139 266.318 29.0302 266.318 29.5669 cv
266.318 30.1055 266.506 30.6217 266.839 31.0019 cv
267.172 31.3821 267.625 31.5964 268.096 31.5964 cv
268.568 31.5964 269.02 31.3821 269.353 31.0019 cv
269.686 30.6217 269.874 30.1055 269.874 29.5669 cv
cp
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
269.874 9.28656 mo
269.874 8.74799 269.686 8.23175 269.353 7.85156 cv
269.02 7.47137 268.568 7.25708 268.096 7.25708 cv
267.625 7.25708 267.172 7.47137 266.839 7.85156 cv
266.506 8.23175 266.318 8.74799 266.318 9.28656 cv
266.318 9.8233 266.506 10.3396 266.839 10.7198 cv
267.172 11.0999 267.625 11.3143 268.096 11.3143 cv
268.568 11.3143 269.02 11.0999 269.353 10.7198 cv
269.686 10.3396 269.874 9.8233 269.874 9.28656 cv
cp
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 110.694 mo
245.874 59.9911 li
1 lc
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 90.4135 mo
245.874 59.9911 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 70.1312 mo
245.874 59.9911 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 49.8491 mo
245.874 59.9911 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 29.5669 mo
245.874 59.9911 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
223.652 9.28656 mo
245.874 59.9911 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 110.694 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 90.4135 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 70.1312 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 49.8491 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 29.5669 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
245.874 59.9911 mo
268.096 9.28656 li
gsave
[.711113 0 0 -.81127 115.833 588.716 ]ct
@
grestore newpath
250.318 59.9911 mo
250.318 58.6456 249.85 57.3559 249.016 56.4055 cv
248.183 55.4531 247.052 54.9201 245.874 54.9201 cv
244.695 54.9201 243.565 55.4531 242.731 56.4055 cv
241.898 57.3559 241.429 58.6456 241.429 59.9911 cv
241.429 61.3348 241.898 62.6245 242.731 63.575 cv
243.565 64.5254 244.695 65.0602 245.874 65.0602 cv
247.052 65.0602 248.183 64.5254 249.016 63.575 cv
249.85 62.6245 250.318 61.3348 250.318 59.9911 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: VTUBAA+Fa Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VTUBAA+Fa def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {0 0 419 666} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGT+Fa /VTUBAA+Fa findfont ct_VMDictPut
/LLNMGT+Fa*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LLNMGT+Fa nf
LLNMGT+Fa*1 [7.08458 0 0 -8.08242 0 0 ]msf
331.323 475.638 mo
(1)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: GFNBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B08A95FADDBDE5FC184B366C0D32BBFD8077FF3868A84AA9D8
09EC11B1BA40EFDC4B36ACF7359B87154491C71E717499C95151FD83912B8B28
4521168D4943424B8A80D2ABDBCDC23DFC3226256F2D535B733CC79448A2FCB5
B5BE88036B5F47992358BD8127FC9802982EE9274F3D5400C49ACCE7965BA708
AF7DBE32E1511B8A215851E59FC75DB326270C2D59F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGS+CMR8 /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/LLNMGS+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b 157{/.notdef}rp]
LLNMGS+CMR8 nf
LLNMGS+CMR8*1 [7.97223 0 0 -7.97223 0 0 ]msf
237.616 127.331 mo
(\(b\))
[3.29407 4.70602 0 ]xsh
285.363 111.421 mo
285.363 110.877 285.171 110.353 284.829 109.968 cv
284.487 109.582 284.024 109.365 283.54 109.365 cv
283.057 109.365 282.593 109.582 282.252 109.968 cv
281.91 110.353 281.718 110.877 281.718 111.421 cv
281.718 111.968 281.91 112.491 282.252 112.877 cv
282.593 113.262 283.057 113.48 283.54 113.48 cv
284.024 113.48 284.487 113.262 284.829 112.877 cv
285.171 112.491 285.363 111.968 285.363 111.421 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
285.363 90.8513 mo
285.363 90.305 285.171 89.7814 284.829 89.3958 cv
284.487 89.0102 284.024 88.7928 283.54 88.7928 cv
283.057 88.7928 282.593 89.0102 282.252 89.3958 cv
281.91 89.7814 281.718 90.305 281.718 90.8513 cv
281.718 91.3957 281.91 91.9193 282.252 92.3049 cv
282.593 92.6906 283.057 92.908 283.54 92.908 cv
284.024 92.908 284.487 92.6906 284.829 92.3049 cv
285.171 91.9193 285.363 91.3957 285.363 90.8513 cv
f
285.363 70.2793 mo
285.363 69.7331 285.171 69.2095 284.829 68.8239 cv
284.487 68.4382 284.024 68.2227 283.54 68.2227 cv
283.057 68.2227 282.593 68.4382 282.252 68.8239 cv
281.91 69.2095 281.718 69.7331 281.718 70.2793 cv
281.718 70.8256 281.91 71.3474 282.252 71.733 cv
282.593 72.1187 283.057 72.3359 283.54 72.3359 cv
284.024 72.3359 284.487 72.1187 284.829 71.733 cv
285.171 71.3474 285.363 70.8256 285.363 70.2793 cv
f
285.363 49.7074 mo
285.363 49.1611 285.171 48.6394 284.829 48.2538 cv
284.487 47.8682 284.024 47.6508 283.54 47.6508 cv
283.057 47.6508 282.593 47.8682 282.252 48.2538 cv
281.91 48.6394 281.718 49.1611 281.718 49.7074 cv
281.718 50.2537 281.91 50.7773 282.252 51.163 cv
282.593 51.5486 283.057 51.764 283.54 51.764 cv
284.024 51.764 284.487 51.5486 284.829 51.163 cv
285.171 50.7773 285.363 50.2537 285.363 49.7074 cv
f
285.363 29.1355 mo
285.363 28.5911 285.171 28.0675 284.829 27.6819 cv
284.487 27.2963 284.024 27.0789 283.54 27.0789 cv
283.057 27.0789 282.593 27.2963 282.252 27.6819 cv
281.91 28.0675 281.718 28.5911 281.718 29.1355 cv
281.718 29.6818 281.91 30.2054 282.252 30.591 cv
282.593 30.9766 283.057 31.194 283.54 31.194 cv
284.024 31.194 284.487 30.9766 284.829 30.591 cv
285.171 30.2054 285.363 29.6818 285.363 29.1355 cv
f
285.363 8.56549 mo
285.363 8.01917 285.171 7.49554 284.829 7.10992 cv
284.487 6.7243 284.024 6.50696 283.54 6.50696 cv
283.057 6.50696 282.593 6.7243 282.252 7.10992 cv
281.91 7.49554 281.718 8.01917 281.718 8.56549 cv
281.718 9.10986 281.91 9.63348 282.252 10.0191 cv
282.593 10.4047 283.057 10.6221 283.54 10.6221 cv
284.024 10.6221 284.487 10.4047 284.829 10.0191 cv
285.171 9.63348 285.363 9.10986 285.363 8.56549 cv
f
330.933 111.421 mo
330.933 110.877 330.741 110.353 330.399 109.968 cv
330.057 109.582 329.594 109.365 329.11 109.365 cv
328.627 109.365 328.163 109.582 327.821 109.968 cv
327.479 110.353 327.288 110.877 327.288 111.421 cv
327.288 111.968 327.479 112.491 327.821 112.877 cv
328.163 113.262 328.627 113.48 329.11 113.48 cv
329.594 113.48 330.057 113.262 330.399 112.877 cv
330.741 112.491 330.933 111.968 330.933 111.421 cv
cp
0 0 0 1 cmyk
0 lc
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
330.933 90.8513 mo
330.933 90.305 330.741 89.7814 330.399 89.3958 cv
330.057 89.0102 329.594 88.7928 329.11 88.7928 cv
328.627 88.7928 328.163 89.0102 327.821 89.3958 cv
327.479 89.7814 327.288 90.305 327.288 90.8513 cv
327.288 91.3957 327.479 91.9193 327.821 92.3049 cv
328.163 92.6906 328.627 92.908 329.11 92.908 cv
329.594 92.908 330.057 92.6906 330.399 92.3049 cv
330.741 91.9193 330.933 91.3957 330.933 90.8513 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
330.933 70.2793 mo
330.933 69.7331 330.741 69.2095 330.399 68.8239 cv
330.057 68.4382 329.594 68.2227 329.11 68.2227 cv
328.627 68.2227 328.163 68.4382 327.821 68.8239 cv
327.479 69.2095 327.288 69.7331 327.288 70.2793 cv
327.288 70.8256 327.479 71.3474 327.821 71.733 cv
328.163 72.1187 328.627 72.3359 329.11 72.3359 cv
329.594 72.3359 330.057 72.1187 330.399 71.733 cv
330.741 71.3474 330.933 70.8256 330.933 70.2793 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
330.933 49.7074 mo
330.933 49.1611 330.741 48.6394 330.399 48.2538 cv
330.057 47.8682 329.594 47.6508 329.11 47.6508 cv
328.627 47.6508 328.163 47.8682 327.821 48.2538 cv
327.479 48.6394 327.288 49.1611 327.288 49.7074 cv
327.288 50.2537 327.479 50.7773 327.821 51.163 cv
328.163 51.5486 328.627 51.764 329.11 51.764 cv
329.594 51.764 330.057 51.5486 330.399 51.163 cv
330.741 50.7773 330.933 50.2537 330.933 49.7074 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
330.933 29.1355 mo
330.933 28.5911 330.741 28.0675 330.399 27.6819 cv
330.057 27.2963 329.594 27.0789 329.11 27.0789 cv
328.627 27.0789 328.163 27.2963 327.821 27.6819 cv
327.479 28.0675 327.288 28.5911 327.288 29.1355 cv
327.288 29.6818 327.479 30.2054 327.821 30.591 cv
328.163 30.9766 328.627 31.194 329.11 31.194 cv
329.594 31.194 330.057 30.9766 330.399 30.591 cv
330.741 30.2054 330.933 29.6818 330.933 29.1355 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
330.933 8.56549 mo
330.933 8.01917 330.741 7.49554 330.399 7.10992 cv
330.057 6.7243 329.594 6.50696 329.11 6.50696 cv
328.627 6.50696 328.163 6.7243 327.821 7.10992 cv
327.479 7.49554 327.288 8.01917 327.288 8.56549 cv
327.288 9.10986 327.479 9.63348 327.821 10.0191 cv
328.163 10.4047 328.627 10.6221 329.11 10.6221 cv
329.594 10.6221 330.057 10.4047 330.399 10.0191 cv
330.741 9.63348 330.933 9.10986 330.933 8.56549 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 111.421 li
1 lc
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 90.8513 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 70.2793 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 49.7074 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 29.1355 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 80.5644 mo
283.54 8.56549 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 111.421 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 90.8513 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 70.2793 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 49.7074 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 29.1355 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 59.9943 mo
283.54 8.56549 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 111.421 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 90.8513 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 70.2793 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 49.7074 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 29.1355 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
306.325 39.4224 mo
283.54 8.56549 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 111.421 mo
306.325 80.5644 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 90.8513 mo
306.325 80.5644 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 70.2793 mo
306.325 59.9943 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 49.7074 mo
306.325 59.9943 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 29.1355 mo
306.325 39.4224 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
329.11 8.56549 mo
306.325 39.4224 li
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
310.882 80.5644 mo
310.882 79.2015 310.402 77.8934 309.547 76.9294 cv
308.693 75.9634 307.534 75.4229 306.325 75.4229 cv
305.117 75.4229 303.958 75.9634 303.103 76.9294 cv
302.249 77.8934 301.768 79.2015 301.768 80.5644 cv
301.768 81.9292 302.249 83.2372 303.103 84.2013 cv
303.958 85.1653 305.117 85.7079 306.325 85.7079 cv
307.534 85.7079 308.693 85.1653 309.547 84.2013 cv
310.402 83.2372 310.882 81.9292 310.882 80.5644 cv
1 /0 /CSD get_res sepcs
0 sep
f
310.882 59.9943 mo
310.882 58.6296 310.402 57.3215 309.547 56.3574 cv
308.693 55.3915 307.534 54.8509 306.325 54.8509 cv
305.117 54.8509 303.958 55.3915 303.103 56.3574 cv
302.249 57.3215 301.768 58.6296 301.768 59.9943 cv
301.768 61.3572 302.249 62.6653 303.103 63.6293 cv
303.958 64.5934 305.117 65.1359 306.325 65.1359 cv
307.534 65.1359 308.693 64.5934 309.547 63.6293 cv
310.402 62.6653 310.882 61.3572 310.882 59.9943 cv
f
310.882 39.4224 mo
310.882 38.0576 310.402 36.7496 309.547 35.7855 cv
308.693 34.8215 307.534 34.279 306.325 34.279 cv
305.117 34.279 303.958 34.8215 303.103 35.7855 cv
302.249 36.7496 301.768 38.0576 301.768 39.4224 cv
301.768 40.7853 302.249 42.0934 303.103 43.0574 cv
303.958 44.0234 305.117 44.564 306.325 44.564 cv
307.534 44.564 308.693 44.0234 309.547 43.0574 cv
310.402 42.0934 310.882 40.7853 310.882 39.4224 cv
f
310.882 80.5644 mo
310.882 79.2015 310.402 77.8934 309.547 76.9294 cv
308.693 75.9634 307.534 75.4229 306.325 75.4229 cv
305.117 75.4229 303.958 75.9634 303.103 76.9294 cv
302.249 77.8934 301.768 79.2015 301.768 80.5644 cv
301.768 81.9292 302.249 83.2372 303.103 84.2013 cv
303.958 85.1653 305.117 85.7079 306.325 85.7079 cv
307.534 85.7079 308.693 85.1653 309.547 84.2013 cv
310.402 83.2372 310.882 81.9292 310.882 80.5644 cv
cp
0 0 0 1 cmyk
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
310.882 59.9943 mo
310.882 58.6296 310.402 57.3215 309.547 56.3574 cv
308.693 55.3915 307.534 54.8509 306.325 54.8509 cv
305.117 54.8509 303.958 55.3915 303.103 56.3574 cv
302.249 57.3215 301.768 58.6296 301.768 59.9943 cv
301.768 61.3572 302.249 62.6653 303.103 63.6293 cv
303.958 64.5934 305.117 65.1359 306.325 65.1359 cv
307.534 65.1359 308.693 64.5934 309.547 63.6293 cv
310.402 62.6653 310.882 61.3572 310.882 59.9943 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
310.882 39.4224 mo
310.882 38.0576 310.402 36.7496 309.547 35.7855 cv
308.693 34.8215 307.534 34.279 306.325 34.279 cv
305.117 34.279 303.958 34.8215 303.103 35.7855 cv
302.249 36.7496 301.768 38.0576 301.768 39.4224 cv
301.768 40.7853 302.249 42.0934 303.103 43.0574 cv
303.958 44.0234 305.117 44.564 306.325 44.564 cv
307.534 44.564 308.693 44.0234 309.547 43.0574 cv
310.402 42.0934 310.882 40.7853 310.882 39.4224 cv
cp
gsave
[.729116 0 0 -.822859 172.993 596.273 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UGXAAA+Fa Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+Fa def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {0 0 419 666} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGU+Fa /UGXAAA+Fa findfont ct_VMDictPut
/LLNMGU+Fa*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LLNMGU+Fa nf
LLNMGU+Fa*1 [7.26394 0 0 -8.19788 0 0 ]msf
393.938 481.579 mo
(1)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: GFNBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B08A95A487F5C1974CBC3CDDE493658305DF20AC1BD0E23E5C
30104B240C3F9E9D7310E3CCA00A46D214505889BE2F43130B03EEA963EBBD2B
6C1D5506C8797014F490B867DAEAC7678A82DA8764133B0EAB3B8D408E517D9F
EE26D7C64525D0702B9A2575DC0163CBFD1D791818320AAC3ECC72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGS+CMR8 /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/LLNMGS+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b /c 156{/.notdef}rp]
LLNMGS+CMR8 nf
LLNMGS+CMR8*1 [7.97223 0 0 -7.97223 0 0 ]msf
298.513 127.331 mo
(\(c\))
[3.29407 3.76447 0 ]xsh
346.636 109.935 mo
346.636 109.402 346.455 108.889 346.134 108.512 cv
345.812 108.134 345.376 107.921 344.921 107.921 cv
344.467 107.921 344.031 108.134 343.709 108.512 cv
343.388 108.889 343.207 109.402 343.207 109.935 cv
343.207 110.47 343.388 110.982 343.709 111.36 cv
344.031 111.737 344.467 111.95 344.921 111.95 cv
345.376 111.95 345.812 111.737 346.134 111.36 cv
346.455 110.982 346.636 110.47 346.636 109.935 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
346.636 89.7964 mo
346.636 89.2616 346.455 88.749 346.134 88.3715 cv
345.812 87.9939 345.376 87.7811 344.921 87.7811 cv
344.467 87.7811 344.031 87.9939 343.709 88.3715 cv
343.388 88.749 343.207 89.2616 343.207 89.7964 cv
343.207 90.3294 343.388 90.842 343.709 91.2195 cv
344.031 91.5971 344.467 91.8099 344.921 91.8099 cv
345.376 91.8099 345.812 91.5971 346.134 91.2195 cv
346.455 90.842 346.636 90.3294 346.636 89.7964 cv
f
346.636 69.656 mo
346.636 69.1213 346.455 68.6086 346.134 68.2311 cv
345.812 67.8536 345.376 67.6426 344.921 67.6426 cv
344.467 67.6426 344.031 67.8536 343.709 68.2311 cv
343.388 68.6086 343.207 69.1213 343.207 69.656 cv
343.207 70.1909 343.388 70.7017 343.709 71.0792 cv
344.031 71.4568 344.467 71.6695 344.921 71.6695 cv
345.376 71.6695 345.812 71.4568 346.134 71.0792 cv
346.455 70.7017 346.636 70.1909 346.636 69.656 cv
f
346.636 49.5157 mo
346.636 48.9809 346.455 48.4701 346.134 48.0926 cv
345.812 47.7151 345.376 47.5022 344.921 47.5022 cv
344.467 47.5022 344.031 47.7151 343.709 48.0926 cv
343.388 48.4701 343.207 48.9809 343.207 49.5157 cv
343.207 50.0505 343.388 50.5632 343.709 50.9407 cv
344.031 51.3182 344.467 51.5292 344.921 51.5292 cv
345.376 51.5292 345.812 51.3182 346.134 50.9407 cv
346.455 50.5632 346.636 50.0505 346.636 49.5157 cv
f
346.636 29.3754 mo
346.636 28.8424 346.455 28.3298 346.134 27.9522 cv
345.812 27.5747 345.376 27.3619 344.921 27.3619 cv
344.467 27.3619 344.031 27.5747 343.709 27.9522 cv
343.388 28.3298 343.207 28.8424 343.207 29.3754 cv
343.207 29.9102 343.388 30.4228 343.709 30.8004 cv
344.031 31.1779 344.467 31.3907 344.921 31.3907 cv
345.376 31.3907 345.812 31.1779 346.134 30.8004 cv
346.455 30.4228 346.636 29.9102 346.636 29.3754 cv
f
346.636 9.23688 mo
346.636 8.70203 346.455 8.18939 346.134 7.81189 cv
345.812 7.43433 345.376 7.22156 344.921 7.22156 cv
344.467 7.22156 344.031 7.43433 343.709 7.81189 cv
343.388 8.18939 343.207 8.70203 343.207 9.23688 cv
343.207 9.76984 343.388 10.2825 343.709 10.66 cv
344.031 11.0375 344.467 11.2504 344.921 11.2504 cv
345.376 11.2504 345.812 11.0375 346.134 10.66 cv
346.455 10.2825 346.636 9.76984 346.636 9.23688 cv
f
389.493 109.935 mo
389.493 109.402 389.312 108.889 388.991 108.512 cv
388.669 108.134 388.233 107.921 387.779 107.921 cv
387.324 107.921 386.888 108.134 386.566 108.512 cv
386.245 108.889 386.064 109.402 386.064 109.935 cv
386.064 110.47 386.245 110.982 386.566 111.36 cv
386.888 111.737 387.324 111.95 387.779 111.95 cv
388.233 111.95 388.669 111.737 388.991 111.36 cv
389.312 110.982 389.493 110.47 389.493 109.935 cv
cp
0 0 0 1 cmyk
0 lc
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
389.493 89.7964 mo
389.493 89.2616 389.312 88.749 388.991 88.3715 cv
388.669 87.9939 388.233 87.7811 387.779 87.7811 cv
387.324 87.7811 386.888 87.9939 386.566 88.3715 cv
386.245 88.749 386.064 89.2616 386.064 89.7964 cv
386.064 90.3294 386.245 90.842 386.566 91.2195 cv
386.888 91.5971 387.324 91.8099 387.779 91.8099 cv
388.233 91.8099 388.669 91.5971 388.991 91.2195 cv
389.312 90.842 389.493 90.3294 389.493 89.7964 cv
cp
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
389.493 69.656 mo
389.493 69.1213 389.312 68.6086 388.991 68.2311 cv
388.669 67.8536 388.233 67.6426 387.779 67.6426 cv
387.324 67.6426 386.888 67.8536 386.566 68.2311 cv
386.245 68.6086 386.064 69.1213 386.064 69.656 cv
386.064 70.1909 386.245 70.7017 386.566 71.0792 cv
386.888 71.4568 387.324 71.6695 387.779 71.6695 cv
388.233 71.6695 388.669 71.4568 388.991 71.0792 cv
389.312 70.7017 389.493 70.1909 389.493 69.656 cv
cp
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
389.493 49.5157 mo
389.493 48.9809 389.312 48.4701 388.991 48.0926 cv
388.669 47.7151 388.233 47.5022 387.779 47.5022 cv
387.324 47.5022 386.888 47.7151 386.566 48.0926 cv
386.245 48.4701 386.064 48.9809 386.064 49.5157 cv
386.064 50.0505 386.245 50.5632 386.566 50.9407 cv
386.888 51.3182 387.324 51.5292 387.779 51.5292 cv
388.233 51.5292 388.669 51.3182 388.991 50.9407 cv
389.312 50.5632 389.493 50.0505 389.493 49.5157 cv
cp
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
389.493 29.3754 mo
389.493 28.8424 389.312 28.3298 388.991 27.9522 cv
388.669 27.5747 388.233 27.3619 387.779 27.3619 cv
387.324 27.3619 386.888 27.5747 386.566 27.9522 cv
386.245 28.3298 386.064 28.8424 386.064 29.3754 cv
386.064 29.9102 386.245 30.4228 386.566 30.8004 cv
386.888 31.1779 387.324 31.3907 387.779 31.3907 cv
388.233 31.3907 388.669 31.1779 388.991 30.8004 cv
389.312 30.4228 389.493 29.9102 389.493 29.3754 cv
cp
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
389.493 9.23688 mo
389.493 8.70203 389.312 8.18939 388.991 7.81189 cv
388.669 7.43433 388.233 7.22156 387.779 7.22156 cv
387.324 7.22156 386.888 7.43433 386.566 7.81189 cv
386.245 8.18939 386.064 8.70203 386.064 9.23688 cv
386.064 9.76984 386.245 10.2825 386.566 10.66 cv
386.888 11.0375 387.324 11.2504 387.779 11.2504 cv
388.233 11.2504 388.669 11.0375 388.991 10.66 cv
389.312 10.2825 389.493 9.76984 389.493 9.23688 cv
cp
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 109.935 mo
366.35 79.7253 li
1 lc
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 89.7964 mo
366.35 79.7253 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 69.656 mo
366.35 59.5868 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 49.5157 mo
366.35 59.5868 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 29.3754 mo
366.35 39.4464 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
344.921 9.23688 mo
366.35 39.4464 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 109.935 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 89.7964 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 69.656 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 49.5157 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 29.3754 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 79.7253 mo
387.779 9.23688 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 109.935 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 89.7964 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 69.656 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 49.5157 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 29.3754 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 59.5868 mo
387.779 9.23688 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 109.935 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 89.7964 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 69.656 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 49.5157 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 29.3754 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
366.35 39.4464 mo
387.779 9.23688 li
gsave
[.685716 0 0 -.805597 240.954 584.615 ]ct
@
grestore newpath
370.636 79.7253 mo
370.636 78.391 370.184 77.1104 369.38 76.1666 cv
368.577 75.2209 367.487 74.6917 366.35 74.6917 cv
365.213 74.6917 364.123 75.2209 363.32 76.1666 cv
362.516 77.1104 362.064 78.391 362.064 79.7253 cv
362.064 81.0615 362.516 82.3421 363.32 83.2859 cv
364.123 84.2297 365.213 84.7609 366.35 84.7609 cv
367.487 84.7609 368.577 84.2297 369.38 83.2859 cv
370.184 82.3421 370.636 81.0615 370.636 79.7253 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
370.636 59.5868 mo
370.636 58.2507 370.184 56.97 369.38 56.0262 cv
368.577 55.0806 367.487 54.5513 366.35 54.5513 cv
365.213 54.5513 364.123 55.0806 363.32 56.0262 cv
362.516 56.97 362.064 58.2507 362.064 59.5868 cv
362.064 60.9211 362.516 62.2017 363.32 63.1456 cv
364.123 64.0894 365.213 64.6205 366.35 64.6205 cv
367.487 64.6205 368.577 64.0894 369.38 63.1456 cv
370.184 62.2017 370.636 60.9211 370.636 59.5868 cv
f
370.636 39.4464 mo
370.636 38.1103 370.184 36.8297 369.38 35.8859 cv
368.577 34.9421 367.487 34.4109 366.35 34.4109 cv
365.213 34.4109 364.123 34.9421 363.32 35.8859 cv
362.516 36.8297 362.064 38.1103 362.064 39.4464 cv
362.064 40.7808 362.516 42.0614 363.32 43.0052 cv
364.123 43.9509 365.213 44.4802 366.35 44.4802 cv
367.487 44.4802 368.577 43.9509 369.38 43.0052 cv
370.184 42.0614 370.636 40.7808 370.636 39.4464 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: MZQAAA+Fa Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+Fa def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {0 0 419 666} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGV+Fa /MZQAAA+Fa findfont ct_VMDictPut
/LLNMGV+Fa*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LLNMGV+Fa nf
LLNMGV+Fa*1 [6.83156 0 0 -8.02589 0 0 ]msf
448.748 472.327 mo
(1)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: GFNBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B08A95FADDBDE5FC184B366C0D32BBFD8077FF3831B5EE4CFF
CD349B11D3874F6D04DF582D6D888DF67E96C9F7727C6BD29DCB6D3D6A55D780
70BC58DF798FE449BD78D45013850E28E971E2F2923E8E7D854FC2F51FAAE2DF
554C128DC7207F9C3AA01397FBF34B8E92F7DEBFD57B10F95B46C791A52BA651
951B5604521562C9321280C03750D2A5EEBE2E0C9248> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGS+CMR8 /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/LLNMGS+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b /c /d 
155{/.notdef}rp]
LLNMGS+CMR8 nf
LLNMGS+CMR8*1 [7.97223 0 0 -7.97223 0 0 ]msf
358.46 127.331 mo
(\(d\))
[3.29407 4.70605 0 ]xsh
401.899 108.448 mo
401.899 107.923 401.782 107.417 401.572 107.045 cv
401.363 106.673 401.079 106.463 400.783 106.463 cv
400.487 106.463 400.203 106.673 399.994 107.045 cv
399.784 107.417 399.667 107.923 399.667 108.448 cv
399.667 108.976 399.784 109.481 399.994 109.854 cv
400.203 110.226 400.487 110.436 400.783 110.436 cv
401.079 110.436 401.363 110.226 401.572 109.854 cv
401.782 109.481 401.899 108.976 401.899 108.448 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
401.899 88.5877 mo
401.899 88.0603 401.782 87.5547 401.572 87.1824 cv
401.363 86.8101 401.079 86.6002 400.783 86.6002 cv
400.487 86.6002 400.203 86.8101 399.994 87.1824 cv
399.784 87.5547 399.667 88.0603 399.667 88.5877 cv
399.667 89.1134 399.784 89.6189 399.994 89.9912 cv
400.203 90.3636 400.487 90.5735 400.783 90.5735 cv
401.079 90.5735 401.363 90.3636 401.572 89.9912 cv
401.782 89.6189 401.899 89.1134 401.899 88.5877 cv
f
401.899 68.7251 mo
401.899 68.1977 401.782 67.6921 401.572 67.3198 cv
401.363 66.9475 401.079 66.7394 400.783 66.7394 cv
400.487 66.7394 400.203 66.9475 399.994 67.3198 cv
399.784 67.6921 399.667 68.1977 399.667 68.7251 cv
399.667 69.2526 399.784 69.7563 399.994 70.1287 cv
400.203 70.501 400.487 70.7108 400.783 70.7108 cv
401.079 70.7108 401.363 70.501 401.572 70.1287 cv
401.782 69.7563 401.899 69.2526 401.899 68.7251 cv
f
401.899 48.8625 mo
401.899 48.3351 401.782 47.8314 401.572 47.4591 cv
401.363 47.0868 401.079 46.8768 400.783 46.8768 cv
400.487 46.8768 400.203 47.0868 399.994 47.4591 cv
399.784 47.8314 399.667 48.3351 399.667 48.8625 cv
399.667 49.39 399.784 49.8956 399.994 50.2679 cv
400.203 50.6403 400.487 50.8483 400.783 50.8483 cv
401.079 50.8483 401.363 50.6403 401.572 50.2679 cv
401.782 49.8956 401.899 49.39 401.899 48.8625 cv
f
401.899 29 mo
401.899 28.4744 401.782 27.9688 401.572 27.5965 cv
401.363 27.2242 401.079 27.0143 400.783 27.0143 cv
400.487 27.0143 400.203 27.2242 399.994 27.5965 cv
399.784 27.9688 399.667 28.4744 399.667 29 cv
399.667 29.5275 399.784 30.033 399.994 30.4053 cv
400.203 30.7776 400.487 30.9875 400.783 30.9875 cv
401.079 30.9875 401.363 30.7776 401.572 30.4053 cv
401.782 30.033 401.899 29.5275 401.899 29 cv
f
401.899 9.13928 mo
401.899 8.61182 401.782 8.10626 401.572 7.73395 cv
401.363 7.36163 401.079 7.15173 400.783 7.15173 cv
400.487 7.15173 400.203 7.36163 399.994 7.73395 cv
399.784 8.10626 399.667 8.61182 399.667 9.13928 cv
399.667 9.66492 399.784 10.1705 399.994 10.5428 cv
400.203 10.9151 400.487 11.125 400.783 11.125 cv
401.079 11.125 401.363 10.9151 401.572 10.5428 cv
401.782 10.1705 401.899 9.66492 401.899 9.13928 cv
f
452.132 108.448 mo
452.132 107.923 452.014 107.417 451.805 107.045 cv
451.595 106.673 451.311 106.463 451.016 106.463 cv
450.72 106.463 450.435 106.673 450.226 107.045 cv
450.017 107.417 449.9 107.923 449.9 108.448 cv
449.9 108.976 450.017 109.481 450.226 109.854 cv
450.435 110.226 450.72 110.436 451.016 110.436 cv
451.311 110.436 451.595 110.226 451.805 109.854 cv
452.014 109.481 452.132 108.976 452.132 108.448 cv
cp
0 0 0 1 cmyk
0 lc
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
452.132 88.5877 mo
452.132 88.0603 452.014 87.5547 451.805 87.1824 cv
451.595 86.8101 451.311 86.6002 451.016 86.6002 cv
450.72 86.6002 450.435 86.8101 450.226 87.1824 cv
450.017 87.5547 449.9 88.0603 449.9 88.5877 cv
449.9 89.1134 450.017 89.6189 450.226 89.9912 cv
450.435 90.3636 450.72 90.5735 451.016 90.5735 cv
451.311 90.5735 451.595 90.3636 451.805 89.9912 cv
452.014 89.6189 452.132 89.1134 452.132 88.5877 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
452.132 68.7251 mo
452.132 68.1977 452.014 67.6921 451.805 67.3198 cv
451.595 66.9475 451.311 66.7394 451.016 66.7394 cv
450.72 66.7394 450.435 66.9475 450.226 67.3198 cv
450.017 67.6921 449.9 68.1977 449.9 68.7251 cv
449.9 69.2526 450.017 69.7563 450.226 70.1287 cv
450.435 70.501 450.72 70.7108 451.016 70.7108 cv
451.311 70.7108 451.595 70.501 451.805 70.1287 cv
452.014 69.7563 452.132 69.2526 452.132 68.7251 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
452.132 48.8625 mo
452.132 48.3351 452.014 47.8314 451.805 47.4591 cv
451.595 47.0868 451.311 46.8768 451.016 46.8768 cv
450.72 46.8768 450.435 47.0868 450.226 47.4591 cv
450.017 47.8314 449.9 48.3351 449.9 48.8625 cv
449.9 49.39 450.017 49.8956 450.226 50.2679 cv
450.435 50.6403 450.72 50.8483 451.016 50.8483 cv
451.311 50.8483 451.595 50.6403 451.805 50.2679 cv
452.014 49.8956 452.132 49.39 452.132 48.8625 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
452.132 29 mo
452.132 28.4744 452.014 27.9688 451.805 27.5965 cv
451.595 27.2242 451.311 27.0143 451.016 27.0143 cv
450.72 27.0143 450.435 27.2242 450.226 27.5965 cv
450.017 27.9688 449.9 28.4744 449.9 29 cv
449.9 29.5275 450.017 30.033 450.226 30.4053 cv
450.435 30.7776 450.72 30.9875 451.016 30.9875 cv
451.311 30.9875 451.595 30.7776 451.805 30.4053 cv
452.014 30.033 452.132 29.5275 452.132 29 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
452.132 9.13928 mo
452.132 8.61182 452.014 8.10626 451.805 7.73395 cv
451.595 7.36163 451.311 7.15173 451.016 7.15173 cv
450.72 7.15173 450.435 7.36163 450.226 7.73395 cv
450.017 8.10626 449.9 8.61182 449.9 9.13928 cv
449.9 9.66492 450.017 10.1705 450.226 10.5428 cv
450.435 10.9151 450.72 11.125 451.016 11.125 cv
451.311 11.125 451.595 10.9151 451.805 10.5428 cv
452.014 10.1705 452.132 9.66492 452.132 9.13928 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 78.6555 mo
400.783 108.448 li
1 lc
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 78.6555 mo
400.783 88.5877 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 58.7947 mo
400.783 68.7251 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 58.7947 mo
400.783 48.8625 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 38.9322 mo
400.783 29 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 38.9322 mo
400.783 9.13928 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 108.448 mo
437.062 78.6555 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 88.5877 mo
437.062 78.6555 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 68.7251 mo
437.062 58.7947 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 48.8625 mo
437.062 58.7947 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 29 mo
437.062 38.9322 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
451.016 9.13928 mo
437.062 38.9322 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 78.6555 mo
437.062 78.6555 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 78.6555 mo
437.062 58.7947 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 78.6555 mo
437.062 38.9322 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 58.7947 mo
437.062 78.6555 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 58.7947 mo
437.062 58.7947 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 58.7947 mo
437.062 38.9322 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 38.9322 mo
437.062 78.6555 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 38.9322 mo
437.062 58.7947 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
414.736 38.9322 mo
437.062 38.9322 li
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
417.527 78.6555 mo
417.527 77.3396 417.233 76.0766 416.71 75.1459 cv
416.186 74.2133 415.477 73.6913 414.736 73.6913 cv
413.996 73.6913 413.287 74.2133 412.763 75.1459 cv
412.24 76.0766 411.946 77.3396 411.946 78.6555 cv
411.946 79.9733 412.24 81.2362 412.763 82.167 cv
413.287 83.0978 413.996 83.6216 414.736 83.6216 cv
415.477 83.6216 416.186 83.0978 416.71 82.167 cv
417.233 81.2362 417.527 79.9733 417.527 78.6555 cv
3.0518e-5 .996277 1 3.0518e-5 cmyk
f
417.527 58.7947 mo
417.527 57.4771 417.233 56.2141 416.71 55.2833 cv
416.186 54.3506 415.477 53.8287 414.736 53.8287 cv
413.996 53.8287 413.287 54.3506 412.763 55.2833 cv
412.24 56.2141 411.946 57.4771 411.946 58.7947 cv
411.946 60.1107 412.24 61.3737 412.763 62.3044 cv
413.287 63.2352 413.996 63.759 414.736 63.759 cv
415.477 63.759 416.186 63.2352 416.71 62.3044 cv
417.233 61.3737 417.527 60.1107 417.527 58.7947 cv
f
417.527 38.9322 mo
417.527 37.6145 417.233 36.3515 416.71 35.4207 cv
416.186 34.4899 415.477 33.9661 414.736 33.9661 cv
413.996 33.9661 413.287 34.4899 412.763 35.4207 cv
412.24 36.3515 411.946 37.6145 411.946 38.9322 cv
411.946 40.2482 412.24 41.511 412.763 42.4419 cv
413.287 43.3745 413.996 43.8965 414.736 43.8965 cv
415.477 43.8965 416.186 43.3745 416.71 42.4419 cv
417.233 41.511 417.527 40.2482 417.527 38.9322 cv
f
439.853 78.6555 mo
439.853 77.3396 439.559 76.0766 439.035 75.1459 cv
438.512 74.2133 437.802 73.6913 437.062 73.6913 cv
436.322 73.6913 435.612 74.2133 435.089 75.1459 cv
434.566 76.0766 434.271 77.3396 434.271 78.6555 cv
434.271 79.9733 434.566 81.2362 435.089 82.167 cv
435.612 83.0978 436.322 83.6216 437.062 83.6216 cv
437.802 83.6216 438.512 83.0978 439.035 82.167 cv
439.559 81.2362 439.853 79.9733 439.853 78.6555 cv
1 /0 /CSD get_res sepcs
0 sep
f
439.853 58.7947 mo
439.853 57.4771 439.559 56.2141 439.035 55.2833 cv
438.512 54.3506 437.802 53.8287 437.062 53.8287 cv
436.322 53.8287 435.612 54.3506 435.089 55.2833 cv
434.566 56.2141 434.271 57.4771 434.271 58.7947 cv
434.271 60.1107 434.566 61.3737 435.089 62.3044 cv
435.612 63.2352 436.322 63.759 437.062 63.759 cv
437.802 63.759 438.512 63.2352 439.035 62.3044 cv
439.559 61.3737 439.853 60.1107 439.853 58.7947 cv
f
439.853 38.9322 mo
439.853 37.6145 439.559 36.3515 439.035 35.4207 cv
438.512 34.4899 437.802 33.9661 437.062 33.9661 cv
436.322 33.9661 435.612 34.4899 435.089 35.4207 cv
434.566 36.3515 434.271 37.6145 434.271 38.9322 cv
434.271 40.2482 434.566 41.511 435.089 42.4419 cv
435.612 43.3745 436.322 43.8965 437.062 43.8965 cv
437.802 43.8965 438.512 43.3745 439.035 42.4419 cv
439.559 41.511 439.853 40.2482 439.853 38.9322 cv
f
439.853 78.6555 mo
439.853 77.3396 439.559 76.0766 439.035 75.1459 cv
438.512 74.2133 437.802 73.6913 437.062 73.6913 cv
436.322 73.6913 435.612 74.2133 435.089 75.1459 cv
434.566 76.0766 434.271 77.3396 434.271 78.6555 cv
434.271 79.9733 434.566 81.2362 435.089 82.167 cv
435.612 83.0978 436.322 83.6216 437.062 83.6216 cv
437.802 83.6216 438.512 83.0978 439.035 82.167 cv
439.559 81.2362 439.853 79.9733 439.853 78.6555 cv
cp
0 0 0 1 cmyk
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
439.853 58.7947 mo
439.853 57.4771 439.559 56.2141 439.035 55.2833 cv
438.512 54.3506 437.802 53.8287 437.062 53.8287 cv
436.322 53.8287 435.612 54.3506 435.089 55.2833 cv
434.566 56.2141 434.271 57.4771 434.271 58.7947 cv
434.271 60.1107 434.566 61.3737 435.089 62.3044 cv
435.612 63.2352 436.322 63.759 437.062 63.759 cv
437.802 63.759 438.512 63.2352 439.035 62.3044 cv
439.559 61.3737 439.853 60.1107 439.853 58.7947 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
439.853 38.9322 mo
439.853 37.6145 439.559 36.3515 439.035 35.4207 cv
438.512 34.4899 437.802 33.9661 437.062 33.9661 cv
436.322 33.9661 435.612 34.4899 435.089 35.4207 cv
434.566 36.3515 434.271 37.6145 434.271 38.9322 cv
434.271 40.2482 434.566 41.511 435.089 42.4419 cv
435.612 43.3745 436.322 43.8965 437.062 43.8965 cv
437.802 43.8965 438.512 43.3745 439.035 42.4419 cv
439.559 41.511 439.853 40.2482 439.853 38.9322 cv
cp
gsave
[.446513 0 0 -.794485 333.083 576.581 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SVJCAA+Fa Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SVJCAA+Fa def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {0 0 419 666} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGW+Fa /SVJCAA+Fa findfont ct_VMDictPut
/LLNMGW+Fa*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
LLNMGW+Fa nf
LLNMGW+Fa*1 [4.44846 0 0 -7.9152 0 0 ]msf
468.391 465.842 mo
(1)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: GFNBAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGS+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B08A956F7E0F54872991CDB176BE750200DFD59F488EA
EEA950AB6C5F98440A4041A6DA3378E86840DCFC0> |-
/three <1C60D8A8C9B08A95D352586DE315E2B5A67A08A6093E44B20E9CDEB3
5EC60CC61F3B13E5C9A934AD50F4BDEBA3242C06624957D9857ECF0CD1B06AC7
D03FDDEC41AFD69B7D5F425B71A88CD694752131AE980502AB3A89678A56A169
AED35393B36D80E2A4027C0AE07C698590CBF5A0D754626892B2BD953D875324
8A0EC46214DACC4383EC084ADF9C46F3B97927D1A8079E88C6665A32D675E313
4E82D7B1D1DBD864464321> |-
/D <1C60D8A8C9B08A9472DDE2F34E4B9DB664A92A9F393FD9A3ED2D879E4323
1F450FB794DBFCED770D8B820CEA99288E74CCEAB5B3748A94FB49F0B1068BC0
AB7D908065DEF2CAB23DD4F97EB1BD0DABFED0ACF354DD17B7D93A7E3EAA79A0
EA140F6EA45A08D48B4E7E085BB6E595C5376DDE86D08D8D6490D08E1D4180CE
C9> |-
/F <1C60D8A8C9B08A94400E14229E09BCA794D08F95F93A77E65D9B5A878EE9
E2BEEF812268242EE4456CD64DB300B2204DF4F2A6756D668B716B942174A288
1257C973DA128A1083014ABC28935FEF296E80B3CA0BCEE96D02BDB2D9B473EC
62AC3150C98DC2B90FC38C49B2A0FF5C9B9B83285FD11B51DE634B0FFA1CDFAF
B80BC336A3724A> |-
/M <1C60D8A8C9B08A943267A20797F1789F7E50462DF29ECF178A33CAFF255C
B9A1929456E9F1C28AD5A109A2013D10B1B9837DF77FFEAACB38CA6503C3AC9D
756F50D2A4250995D6BE85F279FF257535D81E18BB6BEB8DAA2B768C247BCBE0
96154332780CFAAF361F80F336B3605D84A622DAEE2F31AC4689D352E7213D55
F3DA8571027592919F20297AA23DCB686FA0489B65EB6DA2996944A66F7C4C62
DEAB67798DDA81F3ACEC3ADF7CAAF7F1EFFB3DB9E91C08> |-
/S <1C60D8A8C9B08A95FADDBDE5FC18BC037725C9AF7B9DB44811371831E068
49AF80C3961D9F78519213EAA784FAEC3AC213E5CDE6114B7C6D0043FAC12FF7
66830F7C183FB40BE18DFF914F56CC260F58AFA5D8A72AF18EE563FB0C5BB738
DB37FA7B5F7F2BCC79EE9A6622A74556098BEF87EA6E6737DD09882502B23D27
4588B30A3C9E74D3DFCAFCEC13CBAA7DD24B93217BD2BA88E6B5198D0AD8F9CD
D7FC1D38E4D6F60EDBA465EAAC80BC6D1F8432EA32CC48076F2714D47948410E
A10C12526DEB67> |-
/e <1C60D8A8C9B08A95A487F5C1974CBC3CDDE42DE53249A92A2932A7861975
760505F2306473C699FE7DC3D2901CAEC2557F8D9BAA426208588419AD834C34
EC25289B2FB003C8F466F77250F3FF4266A5BE0A7E8D688BB9215F072A0CD095
4C9FCA74677936376A7F0CEBF544B172FE1622ADC15C06862D1A00AAEACF61> |-
/g <1C60D8A8C9B08A95D352586DE3156F00FE2A1EF9D9104D2C67202950C67B
F457CD61F7943B550809E62A2B8ACB2C8F4C92523B03BA8DAF8895665C0CE46B
616DCCF44AF839952391571E0A796466238D4B25FD1854FCB2C56FE56C793E06
64460E5725D88BF849DED6E9732BEDFD442D96BC99A038167643209C87DC6929
DD528F9C70BFF57DD1F25646912B5AAD8929DDC78A4C8F07D396CA6AE0B56E87
D30284C1F82F0379AAF6E3DDFC5E0CE526F64FF4C7071796994114C8149068BD
0BAD532B2CF794ED5AF06F9ABFC5C14D567CFB7E91D6D05022075B0740759ED5
1D91CFCD69E00EF86190B6ADC66A6960F27DAEAD862129F36BC9D389> |-
/h <1C60D8A8C9B08A95FADDBDE5FC18412C54CB58474000E80DD2BDB1EC2A17
F4AECF43EC5571EFA7F59D000F244C2A4809B0C36904F84E5332FCEBDB96B737
123A7940700C0E9FE1FDC511F346027E0C28CC099BF6F4842852D7E963FF363D
8C41BD477D43AAB5B34CDE8F88C84CD97FBF637CC31BB59F74CC6BBA628755DE
4CA0ED097470527D6B9ED718F11C82DF4C> |-
/i <1C60D8A8C9B08A956F7E0F548729919659ADB261FDE89BB10DF99660D401
5E2E7D9C3EB9AC9EACE49C9F5E7F57229FB2926DC5B9E0D7EEE54EEBDA11BD86
06C764BC17FBD4C152BC57A192886E5E2E3B6415A792CB95F6AB907C9CE07392
3CC6A73872E42806C04D> |-
/l <1C60D8A8C9B08A956F7E0F548729919659ACDBFC774C1E91D85E47B1C55C
320015C11E8FA619B588D546FFC3A3C1FE8E26C3FFA59F4BAE6ABF901A1B30E4
70AB68B6CB15B0B3B0BED3C8> |-
/m <1C60D8A8C9B08A94177BCBCFFE392D1615564651DC94AFF429E264E5B5E5
CF621B10153235CB7254E38DC48BCA8C892D16C28D8D16B54A8ADD01D795FABD
21F4CCB7401CFF3E63F6AFA99BAA6E1AABCC462A5F43C00A235D2809FA89ABF2
A132B9BF2BF5A95F3933462F212770B00092689A7EFACD0D962D56059EED20F0
B51DF72EF9E838CF0628AE595B82531C44B5C1DF8BF6A60D44637E049454AB8A
5BCC2398F24E2708BDE5E63A6A0974E1A9F41B6E6872A981ACD8AEC7C6B2D7C8
26994A1F655AB7330CDF> |-
/n <1C60D8A8C9B08A95FADDBDE5FC18412C54CB5847400E49215DB99C547718
7C53B8A24629FFB44F28C2D95B9773AE42EEB45F6AFBAFDC9B1AA5A944E9DDDE
8155A5881672C2B6BBB73AE932DF12AA9385E89A5ED3DE177DAB411999FCB912
5346EC1042B2392DDC74FEA1F1606EEFE0A8B5E9EC3B263EFF20740D245C2640
9110F9D19774FAE6112EA736> |-
/o <1C60D8A8C9B08A95D352586DE31515657E71D229101A7B2BBD4EC2B21554
A8691A52E5CA2208F27B870BE0A5BEF10D6447BAC34F2347460D845624052941
9BE913AFC7FE9D267980FDA5595CA141994108F86FA0A3EC202C9F68B3705A57
841BDE760900D51E325DB6E316839EACEC65E6335340DA719533B6C7AB6E00F8
23> |-
/p <1C60D8A8C9B08A95FADDBDE5FC1831CC1E5F40DDF68EE00D7ED200597E7A
D8D92280AEAECF909C0062175205CB2064C524A5F02D3E443CFE760AD1B4F886
F598B2459608DD7E680FC9D1B6D5D0AB678AEA909D0FD2CAAEEEA25105ACFCD3
855CEAB255076F0A35E60E8F32D97B5155762DC86316C7CD8197C554273CF218
51CB8F045F86C244FF1BA3F39AAA7ECBBF33CF33C3DC2A3309FD> |-
/r <1C60D8A8C9B08A95BDA6C24168F261AB37C8337080A8D9E66A45C81256BC
433A1928C879BE1C088B17E794C2DE2BF5BF8C9D567937A62298B771E6E0B33E
1FEBB92A740F6E24511770DE18DD2E7622410CF4F085B78CEFF3DF90858D58CB
6B74FD7118AAA21C97C44FD904CA4A6A9CAC2E75D66B04DE7C30E8> |-
/s <1C60D8A8C9B08A950C3FC807FA95534710826603A211D709DCDF006FD380
CBE85EF65934FBB5971FB8168C1E22A4A085C9493B36299B0FA1CEBE51F9E727
9E2788434C10E0EE6BEC40CEA9AD53A527F668AA8EBCC0294ED4EA6733041395
C3BCD0B605F59BF2CA1D9B98B4ECC451B17E28F9388E7397B011D151210C7F2E
86E49D6298E65378AAC840482135EF130D70952593E629F2EFA4CF712951FD33
7FB5F592CEDD5A7EE56C228CE49BD2DDE76BA8D327790E2792E9854BA57CECA4
6D363A0CC180457F9C9C1D> |-
/t <1C60D8A8C9B08A950C44F05CDCAE4F653D9CB1C8823B58C5DA69B8976E3E
5C0287C26F6BA5859F6CCC0BE23314F2BAA6C667CBC57C70D1C3CA3FC2ABE5D0
062575509C924D687FE3B7A1A0CD4904845030D5E54B137D586647A750E97F64> |-
/u <1C60D8A8C9B08A95FADDBDE5FC184B366C0D22825EE07C6335359043713D
5BF2D80CB0008A18CE5CBADFD410FFE3A852E23DAD6677F093E45083D77A8242
CFA473FCAB4D9A3388F9C58BAF1BB370F65EFE6FAF1D6660686303D00D232521
D7E6C2E1C86166AA71E0> |-
/v <1C60D8A8C9B08A95C7272202E23A6188AFB3AD33B3CB948DA1772C67DDCB
82B3E81C44D4734B597AC64352EBAB23811DE81C8BCD1978DB81AAE1554891AA
DE066F62CB10D2A96FEAE5246012280250487B1D2567D2F5356543F0CD3933D1
9086B8E4566044B2D7DA7FFEAFF2CDA38ED10E089F19EE34203EB84585E4753E
BA0EB4ABD348B2> |-
/w <1C60D8A8C9B08A946548FE93FF91E8BAB3A5BA6A33F1747BAAB89E222D62
F3E7C069DC601DBAAB96748B8EDC9510056EB8670BB42227DF0D1214FA038966
DE07E2CF032F78209C2E69C6A5D3EB11479B62A4A28229977DDD9D1FA97FFDF6
45E88100A044D9DAC912B13F0C83A057982AB100A92A970442D3EA165CBA7B10
542851CC2CB2F68B30D6C9B358FAA6D10DD640064D292504E4BC9BEFA76D445E
9E6C9CD2F3129A7B6ED7A448D36B4D57F7DD781832D58B90643F0C68743E226F
140ACD2683FE744C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGS+CMR8 /Encoding get
dup 46 /period put
dup 51 /three put
dup 68 /D put
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
pop
%ADOEndSubsetFont
/LLNMGS+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 4{/.notdef}rp /three 16{/.notdef}rp 
/D /.notdef /F 6{/.notdef}rp /M 5{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /d /e /.notdef /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v /w 136{/.notdef}rp]
LLNMGS+CMR8 nf
LLNMGS+CMR8*1 [7.97223 0 0 -7.97223 0 0 ]msf
419.357 127.331 mo
(\(e\))
[3.29407 3.7645 0 ]xsh
126.005 153.239 mo
(Fig.3.)
[5.52555 2.35265 4.23561 5.81259 4.23561 0 ]xsh
156.224 153.239 mo
(\(a\)Directcomputation\(b\)Middlemanmethod\(c\)middlemanwithtargetclusters\(d\))
[3.29407 4.23561 6.76198 6.46626 2.35265 3.30124 3.76447 3.76448 6.76199 3.76448 4.2356 7.05869 
4.70601 4.70601 3.29408 4.23563 3.29405 2.35265 4.23561 8.18192 3.29407 4.70602 6.76199 7.75616 
2.35266 4.70602 4.70602 2.35263 3.7645 7.05865 4.2356 8.17395 7.05869 3.76447 3.29407 4.70602 
4.47479 8.17392 3.29407 3.76447 6.76996 7.05869 2.35266 4.70602 4.70599 2.35266 3.76447 7.05865 
4.23563 8.17395 6.11783 2.35266 3.29407 8.17398 3.29407 4.23557 3.30127 4.23563 3.76447 6.76999 
3.76447 2.35266 4.70596 3.34116 3.29407 3.76447 3.3013 6.80902 3.29407 4.70602 0 ]xsh
126.005 163.201 mo
(middlemanwithsourceclusters\(e\)SinglelevelFMM.)
[7.05867 2.35263 4.70602 4.70602 2.35265 3.76448 7.05865 4.23561 7.52023 6.11784 2.35265 3.29407 
7.5282 3.34114 4.23561 4.70601 3.30125 3.76448 6.58665 3.76448 2.35263 4.70601 3.34116 3.29407 
3.76448 3.30125 6.17128 3.29407 3.76447 6.11624 4.70602 2.35263 4.70605 4.23557 2.35266 6.58664 
2.35266 3.76447 4.23969 3.7645 5.1748 5.52554 7.7562 7.75616 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /AXNBAA+CMMI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 82 /R put
dup 97 /a put
dup 101 /e put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 118 /v put
dup 120 /x put
dup 121 /y put
def
/UniqueID 5087385 def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
13 dict dup begin
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1C
EF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D699
1493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-
/A <1C60D8A8C9B6E3FA234780E51FBD3BBFBEBC2631360DD7C25F33C30680CC
1A882C17B78DB471C55CC438374CF0500DE96583629259E66A380070E3947410
1D134A332FAD86FBF1C6C0FC85637A88280EE452A44957D6DFE9CAC4CC8C0B1E
0D8A44AD94DC0563BBBB61087D33FB01EF2295A71D594DF19B55EB59A712E2AE
76106A5A9AB8634ADA5A36204C6E39215D9DFB7BF5A23AB41B732EB6243EADEF
9003C540C56ECAAD84590980E261A5EBD6060F1EF15FD5> |-
/R <1C60D8A8C9B08A9466C1D327120F20C90FBAE08EAD8C5FC8DFC3D7BCFC01
A4FF9B548A91174A4D9514B791C175462626C5DAFE92A7CF240A74A7B39622CD
F12FC109BB19F72D21960876F05180902C2CA26895818E1B7B3E4D8B6AFCAD2F
2D5D54BB06686EE5076DC80C4ABD61FB3F1A6D17A19582782BD339021E219C0C
AAEB7A95FA8471146A370AAC519154F65975CC5BF645DEE88AFA073AEDE238A3
7DCC6632E241C1B4AF96F3C3007237FEAF4AFAB4E8934A98661327DA0D7F0769
668548827A6507A49C092C3052FCC7B07967D048760FD90FC00C8756CC429834
5F0415AF80D4EAAE34046564C623DCC80578FC030AF05D18D6048FAB8A05E6D2
186AB4664E748ED8DA0BA037735BB67774798598F2BCD67F2FC7F13C73C046B1
54FB> |-
/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F
2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380
E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F
727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC4356
11573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50A
ABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D5
75955E19E6> |-
/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC8
3781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE924
6D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA82
08290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A4
7DDF599EB732> |-
/o <1C60D8A8C9B08A95A1DD4CBC87944F1CBAD75D172C8DF605E2A5A9821B6A
1E155E44F9561E9D8140C8B72B2C3048695E3B8D90EA6152F59965988C114A03
393432D6DADCACCDE822862CDF748350C0DDEE53FC52E803DAA52A8B5A53CEAE
019EA80419E0C9147F6749ABB3E6> |-
/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098
BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D0365
0F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE702
0A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467
004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975A
D097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8F
EBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-
/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CB
E24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B23506018
4BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE5766960764
77DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E
18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED52
6AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-
/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB867347129654
7AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91
111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED03
0CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD
949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573
ECE214AA6784C481420B569D> |-
/v <1C60D8A8C9B08A95A1DD4CBC87944F1CBAD75D172CCE8D5B8402321171CD
AFBEF9ED5FE2ECACA308E36030936A7E251F83E775038DEF0B73BE0BD886394B
FB5F3FB35DBE8EE48D7CAE9BF9DBB5F825E115B9BEA5D659026DD280916BBD24
BF83A065FEC736B37915E56EF2432CCDC76168C012BE0D349AB3FE28A7BB1C1C
F917E5BEC94217A4541042BF73F229C52656F6397CE1B3CF55B2FC> |-
/x <1C60D8A8C9B08A95C3B1459DC8650F9F96183FC46268F5BDA744B05C84F8
C7E5FE6BFCA9D4C8BD3488080E8FC96F34EA177DCAE190D27F37102D2F45514A
ECF6E4A3B2E6F401810D0AF13E4BDFDB8118476E04C9DD93F8884F46C9ABEE13
C8E7992449902F6BC3D518B2A70293976C8BCE67ED913D975C52E884BF7F46CE
8DF8170D79262260A6CB5A6A088C0A964E0271DA63944ABA9C96D1AA58CB590F
97DC9C8372606676C2CA18B1A9303EBF11B510FAB8A33E9B530D274E48DD09EE
8829EC16181BBC16C4E81343ACB5386F22A9C0CA2C23959102E833> |-
/y <1C60D8A8C9B08A95A3A690DEE11C2ACFF7516D4A7CDA884FB3B130648C63
2F41B68B5E071E6BAD692658125A4CE9A4427A55054BF5DABFF855AF9D186215
1F50AD5D2EE36E064C9718B8694EF83525324184D7DD07A10B9FD203C707D849
3E926469CD1C36E94D5785557A2D95B556774E51CEFBAE2CC8AB735FFF293AFE
FA32B8D1FD5C52EC860AA6EC20816B24BD1EB69FE8581708322D6F09A08B3182
91EF57EAE554A00C60D585B786E53371A6D3FB2D8729C3F2C51DB65ABF8CA421
EEB103AED2CB924D829D66429CF6664CDEAFEEC4AD07C95E7FE8BCAB5D2A1AD6
731779D5> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGX+CMMI10 /AXNBAA+CMMI10 findfont ct_VMDictPut
/LLNMGX+CMMI10*1 
[59{/.notdef}rp /comma 5{/.notdef}rp /A 16{/.notdef}rp /R 14{/.notdef}rp /a 
3{/.notdef}rp /e 9{/.notdef}rp /o /p /q /r 3{/.notdef}rp 
/v /.notdef /x /y 134{/.notdef}rp]
LLNMGX+CMMI10 nf
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
126.005 188.288 mo
(error)
[4.63874 4.76422 4.77419 4.82892 0 ]xsh
%ADOBeginSubsetFont: YEKBAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /YEKBAA+CMR10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 61 /equal put
dup 73 /I put
dup 94 /circumflex put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 118 /v put
dup 119 /w put
def
/UniqueID 5000793 def
/FontBBox {-251 -250 1009 969} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/equal <1C60D8A8C9B08A946182837629008D945C50B3BD77B79680F3B07BDA
6301D2521ADF665EADEA779B8650AC6CDB556621631497A3BE00C67036F6EB06
05A36A2C0EE306396247E4A79F8EFAE500D78B59605F041F11> |-
/I <1C60D8A8C9B08A9591900960B3FA4612DFF926AB21A530E1912F33677612
AC06B324D812E42049FF4946BE5E0FFA24FA0C62F2839FF2110EEC7EE0A42476
46E6F699D4C8BECE1825B3A661611E4D55F40F2E64FACB836D4D0C9780F60650
FBF10E0D42> |-
/circumflex <1C60D8A8C9B7A73DB60A8ACCDB3317529757244A8C206C879D4
63E1B6DBEAF6E2585BBF80C15CD541571D922A24030> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F78A354068
F1882593A360E640ED3246F83F38F17203BDBBCE194B9E0A6BE002DEEC6E590D
34E67EDA7804A1C1CA9840B3036AA2F9D110358C769BBBA6E4ABF35AA04B72BD
94DD37985D5F60B66C4561BE8C71200493330FB300D08910FDC33541EB4ED02B
C0E5DA36A3AFFA9C2A4E001E9049F0E519949606FF0894B2E73F51ED> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/m <1C60D8A8C9B08A940B724A74A01E6B7E417A0EEA9CCF58837F16A4309279
D4C1CC08359D1FA7FD10E0AFA90B9132C47CDD4E6827D8017CAF4E5B65090CE2
B069620DC38FECF904BAC042B28FA35A5D6632CC2899B92571CA76E097477A12
37436144BDBB6157A5C5B473CDBDE040AFDE31D37159E83AC75CF12EA5793A01
76A3A422381930CC3B1A17BCD95B6EBD3104CC40253F80174C89524325EFE206
A7879C7C9E8C1F8E9C0ECBB2F9FBA1A090EF980204254E4E57D08097CBAA9E99
7A6E9DDAB21EC6126AA86AEA3B08AD43F991C523777A8E82724E5CA12D46D05C
7B51942202D1FD96F0> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BD38846B55E34D4CAA6
E85E9CF3F20D5FF6B35F1C9AAE2A542B7B24E087B6004A4C7219997095CC0DD0
7A15DB83B5FEAD13F209441FFD364AD3DBF6E16129F3599BACA005A523490ABC
41E4DF320ACE384037EE1D352E3FAD8A9E2CECBD75A999F7B655F4FFBFAC6FFF
84029A8DF710DBB0D7CD4C1D20367E79BC4E312103DCC482005590EA2F1652EA
57C34D10CC78642AFD> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/r <1C60D8A8C9B08A9584DCB847BA986212E50A1268FF1FD1FC6504D9F4D673
BD97E004E27192E1359AD741527FE014B82A8709E1D277CF1F73EB8831CADE61
1D9AD525BE07EEB6589229F52FE652CA10A278AC096BF0A2B010C8B215B1ACA0
BBB8EF8E3C77EF77F60B5CDD1035D115BEF1087A4AEB28A5F886037DA56DEC62
DBB1D4F1AE123A1AD0E8FD48681467> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGY+CMR10 /YEKBAA+CMR10 findfont ct_VMDictPut
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 14{/.notdef}rp 
/equal 11{/.notdef}rp /I 20{/.notdef}rp /circumflex 2{/.notdef}rp /a 3{/.notdef}rp 
/e /.notdef /g /h /i 3{/.notdef}rp /m /n 
/o 2{/.notdef}rp /r /.notdef /t /.notdef /v /w 
136{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
149.782 188.288 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
153.653 188.288 mo
(p;x)
[5.01224 4.43147 0 ]xsh
%ADOBeginSubsetFont: LLIAAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /LLIAAA+CMMI7 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 105 /i put
dup 106 /j put
dup 109 /m put
dup 112 /p put
def
/UniqueID 5087382 def
/FontBBox {0 -250 1171 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 683 703 431 441 451 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/N <1C60D8A8C9B08A942F88F5253E059B09165660B0CD53F1B368ED7AE179DD
80319C15107A9B58A17F9016D968200585529EE749A7A011BCD95B58785A701F
914FB2737F3EB76516B39B35CEEDA4A942D6B2B43CF5C72E72A8503D601DD9E6
5CFE5011666D5094FBFDF33DDEDDAC98A6A3F6610A51376BC53DA4DE23560D8C
64B5B67C484D9E81ADA062C54D7BB354E6233E48ECE01E05DD96C809AF53A547
E20DDEA09CB3C0A118E03E05C3FD600A0D4515E184F495586CD803329CB3C18B
9B945EA16E92956549CA0C18DE33> |-
/i <1C60D8A8C9B08A95815A5B227B870FFFF4C4C0B4F8778048834443BFCAD6
B993EDD195DC06703CEA0DE031068A057848E5B5DED1133A0A8079C5E208E9DE
E4B78459A9167CC6EE455BFB1096DC5790B66EB4889F8492E36379969C9A84E3
508BBE89B995851364166046AE348187165B183267917A2B944E4D5A171FE0A1
71814BE20051DD45E2BA864A9940A362E73075986328AA3660DC7C3B40F26477
32F933A170C61C13A84CF06AE8B2A1FC77DDE376> |-
/j <1C60D8A8C9B08A95A459ED963FAC90DCB8AB19427A2E40264805DB4EDBB0
2766E4B34CA7BAD7FF617D8417ED8A6BC153BA1967F1D42765023A7119DD1DDC
AA11377154A7B1BAFA2DCC082A2A1C19723210E8849DBE1BC9C1CEBAF2FCB286
C5C9C9DB8B4193FF060AE6597E7B810C70EEAAB327A532B6D2D05139A3BF532A
BC68B871E1474F59A1F5D79B984E40898D4B8E24132D075846122C1C9EF2ABA9
7B08BFCE9BD5F6341F9504> |-
/m <1C60D8A8C9B08A94C50FED40EB3D671D5F971A14CED4D201748A8E72BD8F
6AF3D10E5C71C99FC5E9BF9692D2D9760F46DD861BDFA36B6E14D238E4E2C3CA
E5B3C33BC90875354A5306180913B2AEBECBF57E7B399CE9B4F29C2CC7C35FDE
F1836863C3826715E30C0345FA818D936E337718A3E709020710E463A2498A1C
D77F9EDE3829DDA51B1657355BE375668569F0D79F61B885A77EF6F3FBA92434
792BA323092F1C49F65AE54614811E122058161BC4374F820DC59BF54F57B1A0
FA7EC4DD0C034190D6CB2A5656A53B0194DBE662E915421ABE662BABC019EBC4
B0CF512D3A25E478AF23E94023E1063DC872070F35F2FD6883900BE097D16D2F
3495FD32CF2800A03409867D0D7AF3BB4268338A0A49648838DF02E8D474A4AD
DA14D6F076B8140E196B23929D92E1F38AA179032E38B61622B1BC962385649A
9C9583B7> |-
/p <1C60D8A8C9B08A95FA42B93E17DC19B7F9FDB69E85E1A05CD543323F9E01
77BC092929F30840D222FF943A1823CBB4743D1D60DC4DD78ACD9A2B1D46C2F4
249D621AE571941BB10EDB5361BC1C06B6793143FC7BC4587E230CD83C072625
41D60CA3129F87938B17D9D152A2AC27D8AAEA2C78CB0D51B07FD8AC0CF22BC8
2D538F8B03DC74FE99BFBEE44105F29A07745C40B9FFB0B0CA0CD81195AF4CDC
27AC7070934ED446362A6CD5C3624A76C13AC21481959459D731B8E979C11047
011F9E893CE91A008EF27861772D5B07D7722F1749CBB1810F18391F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMGZ+CMMI7 /LLIAAA+CMMI7 findfont ct_VMDictPut
/LLNMGZ+CMMI7*1 
[78{/.notdef}rp /N 26{/.notdef}rp /i /j 2{/.notdef}rp /m 2{/.notdef}rp 
/p 143{/.notdef}rp]
LLNMGZ+CMMI7 nf
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
168.787 189.789 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
172.108 188.288 mo
(;y)
[4.42151 0 ]xsh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
181.421 189.789 mo
(j)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
185.622 188.288 mo
(;x)
[4.42151 0 ]xsh
%ADOBeginSubsetFont: NQPBAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NQPBAA+CMSY7 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 164 /asteriskmath put
def
/UniqueID 5000817 def
/FontBBox {-15 -951 1252 782} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 683 708] def
/OtherBlues [-127 -117] def
/BlueScale 0.039625 def
/StdHW [49] def
/StdVW [93] def
/StemSnapH [49 61] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/minus <1C60D8A8C9B08A94125A6B4F8A6523779DE8BDC276F89F5DC341F7EF
FF93EE02783776BF3EA256D68859F44A4D3C744BD732A126A7> |-
/asteriskmath <1C60D8A8C9B08A95F808B3EA631C04E342663C0292D4C4AB7
A9D0193A96731F07E601252D4094F690FA8F0BF48B782EE18DE2F956611AB976
8917567B17B9E0DB71E16304C190A8515B02EEA164C7BCBB5D05749DBFE0C855
043E4E8172110DB05B72946065793291225379CB0478D56E0AEF376FE6B0B45A
EEDF7F59B461CDACB9B892493D43BE32049486E91827318E29E5CA03162B9803
446ED5CD8C412E58F70938B7301A921D86257F2FA5E751EC13F296DFB47BD9A9
1> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMHA+CMSY7 /NQPBAA+CMSY7 findfont ct_VMDictPut
/LLNMHA+CMSY7*1 
[161{/.notdef}rp /minus 2{/.notdef}rp /asteriskmath 91{/.notdef}rp]
LLNMHA+CMSY7 nf
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
195.745 189.789 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
200.316 188.288 mo
(\).Ignoringtheerrortermwehave,)
[3.87454 7.19115 3.59756 4.98138 5.53535 4.9814 3.90236 2.76767 5.53535 8.30896 3.87454 5.53535 
7.74506 4.4274 3.90237 3.90234 4.98141 7.21994 3.87454 4.42743 3.90237 11.6295 6.92609 7.73508 
5.53537 4.71237 4.98938 4.42743 0 ]xsh
214.2 217.707 mo
(^)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
213.82 217.707 mo
(v)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
218.641 219.197 mo
(j)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
227.824 217.707 mo
(=)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
244.218 205.253 mo
(N)sh
%ADOBeginSubsetFont: LLIBAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /LLIBAA+CMEX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /bracketleftBigg put
dup 35 /bracketrightBigg put
dup 88 /summationdisplay put
def
/UniqueID 5000774 def
/FontBBox {-24 -2960 1454 772} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/bracketleftBigg <1C60D8A8C9B08A95FF8CEA8AF5E00BBFE03714C2BA8290
91F4BAB2083D3D4E87567411732504454C1BE63572E63E338A050A6526ACB9FC
2D623F7C12> |-
/bracketrightBigg <1C60D8A8C9B08A95FF8CEA8AF5E00BBFE03714C2BA829
091F4941ECB48ABEAD07DE5B98A9A9C033B3838CD1A099D625DBC3CFEECCD232
5B6F5862537> |-
/summationdisplay <1C60D8A8C9B08A978DA65CA6000E2FF227B3822E6BF59
2FAE1DA94CCD06862A15BF4A115E2D457581D1F7C2651D53244A95BDEACB9431
AD1B1E4B2F9F1F9CDAC9CF5D02DB74189D3D9500920B5A2EBEB42DEF8313D0FC
2F52E2E7F03BD5AEF93F4F867DBC2A45AEE197D649BD80CCF5B2949E4DE27736
F57468A17B8D4E7987C41A66307282E1ADE2E5114A0F9D9D6E7F0DBF96B194E7
26122C9D9CB24DEF4F37F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMHB+CMEX10 /LLIBAA+CMEX10 findfont ct_VMDictPut
/LLNMHB+CMEX10*1 
[34{/.notdef}rp /bracketleftBigg /bracketrightBigg 52{/.notdef}rp /summationdisplay 167{/.notdef}rp]
LLNMHB+CMEX10 nf
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
240.557 208.244 mo
(X)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
241.297 229.46 mo
(i)sh
%ADOBeginSubsetFont: FXYAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /FXYAAA+CMR7 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 61 /equal put
def
/UniqueID 5000790 def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 683 703 431 446 664 674] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B1
17D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2E
BEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC
959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AE
B3E78ECCEF035CFEC> |-
/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5
871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D45
82A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101
B8> |-
/equal <1C60D8A8C9B08A9418E0DF008700BB7C94DBF811A5AF73C0C9094F76
2FBF4F0E406E5FA7B582E8085DDA8B77CE8DC831505094BFCBC50BFFD2D35F65
8DEA594EC9E889C56C365D24583F9945AA2ECC13C02415B8B3> |-
/.notdef <1C60D8A8C9B08A958AA685092D4752> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMHC+CMR7 /FXYAAA+CMR7 findfont ct_VMDictPut
/LLNMHC+CMR7*1 
[48{/.notdef}rp /zero /one 11{/.notdef}rp /equal 194{/.notdef}rp]
LLNMHC+CMR7 nf
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
244.118 229.46 mo
(=1)
[6.1144 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
256.602 217.707 mo
(q)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
261.053 219.197 mo
(i)sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
266.034 200.672 mo
(")sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
273.266 204.783 mo
(p)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
277.377 204.783 mo
(\241)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
283.599 204.783 mo
(1)sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
273.226 208.244 mo
(X)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
271.846 229.34 mo
(m)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
278.908 229.34 mo
(=0)
[6.11441 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
290.661 217.707 mo
(a)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
295.923 219.197 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
303.495 217.707 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
307.366 217.707 mo
(x)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
313.057 219.197 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
316.378 217.707 mo
(;x)
[4.42151 0 ]xsh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
326.501 219.197 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
331.082 217.707 mo
(\))sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
334.954 217.707 mo
(R)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
342.516 219.197 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
350.088 217.707 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
353.959 217.707 mo
(y)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
358.85 219.197 mo
(j)sh
%ADOBeginSubsetFont: ONKBAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGQ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B08A946182837629008DF7702985522C1BEB432204C2EF
9CAB07AB654895DD8804EF7ED97DE3E2616CBB2FB21BE3D9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGQ+CMSY10 /Encoding get
dup 161 /minus put
pop
%ADOEndSubsetFont
/LLNMGQ+CMSY10*1 
[161{/.notdef}rp /minus /periodcentered 93{/.notdef}rp]
LLNMGQ+CMSY10 nf
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
365.262 217.707 mo
(\241)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
375.225 217.707 mo
(x)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
380.916 219.197 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
385.498 217.707 mo
(\))sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
389.369 200.672 mo
(#)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
227.824 252.856 mo
(=)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
241.978 239.933 mo
(p)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
246.089 239.933 mo
(\241)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
252.31 239.933 mo
(1)sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
241.938 243.394 mo
(X)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
240.557 264.49 mo
(m)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
247.619 264.49 mo
(=0)
[6.11441 0 ]xsh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
259.372 235.822 mo
(")sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
268.845 240.403 mo
(N)sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
265.184 243.394 mo
(X)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
265.924 264.61 mo
(i)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
268.745 264.61 mo
(=1)
[6.11441 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
281.239 252.856 mo
(q)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
285.68 254.347 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
289.001 252.856 mo
(a)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
294.262 254.347 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
301.834 252.856 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
305.705 252.856 mo
(x)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
311.397 254.347 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
314.718 252.856 mo
(;x)
[4.42151 0 ]xsh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
324.841 254.347 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
329.422 252.856 mo
(\))sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
333.293 235.822 mo
(#)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
340.765 252.856 mo
(R)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
348.327 254.347 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
355.899 252.856 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
359.771 252.856 mo
(y)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
364.662 254.347 mo
(j)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
371.074 252.856 mo
(\241)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
381.026 252.856 mo
(x)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
386.728 254.347 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
391.309 252.856 mo
(\))sh
227.824 288.006 mo
(=)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
241.978 275.083 mo
(p)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
246.089 275.083 mo
(\241)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
252.31 275.083 mo
(1)sh
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
241.938 278.544 mo
(X)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
240.557 299.639 mo
(m)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
247.619 299.639 mo
(=0)
[6.11441 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
259.372 288.006 mo
(A)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
266.845 289.497 mo
(m)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
274.407 288.006 mo
(R)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
281.979 289.497 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
289.541 288.006 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
293.422 288.006 mo
(y)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
298.303 289.497 mo
(j)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
304.715 288.006 mo
(\241)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
314.678 288.006 mo
(x)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
320.37 289.497 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
324.951 288.006 mo
(\))sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A08293A
A33E44598842821CBFE74832C3A2FC51890F3A66AFDE8EA8269173784AF985B0
8CD4044AADA37EBF8296E8DBBCEABE3042A3995F6A3A8DE32D90D624CEDF4C1B
CFEECD943884DD6052923FAC92315AE2977DECA1B6F479ADBDA41B10FDF2F38D
2B74CBF99D8D6FF4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 3{/.notdef}rp 
/two 10{/.notdef}rp /equal 11{/.notdef}rp /I 20{/.notdef}rp /circumflex 2{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g /h /i 3{/.notdef}rp 
/m /n /o 2{/.notdef}rp /r /.notdef /t /.notdef 
/v /w 136{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
466.941 288.006 mo
(\(22\))
[3.87454 4.98141 4.98138 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B08A9461828376290042B3B0012119E49A5F8A40FFB07EC
16079327C8839C8F2280897EA08CCF42D3B4E2B36A495896A102B0E0B676D7CD
E615B4B502BC24C313F43E124C5C3EF4728FA76AB60F029D0136D86C00EF66A5
8511B752E> |-
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5B4F1FA8662A86AEED57
846929C2FBC07360B> |-
/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF09EF454D03FB6CE0741
835DFEA276F2BD9DA1E567C1E2AA272C9AF9AA6DE082183B6B06B110AD19A95E
B7E4DF541495BB98EE61CCB080A42D64DF1FC55075E90898D74F5BD66A3B7E79
6EB7D1A2531A03B3A15C447C7878675F786C2958D8D170FECAAEB79653062A89
C24C3F187B500D1CE71547CC2DD4654566FBE73FC2C8B09F> |-
/F <1C60D8A8C9B08A95E211B68BD74B7CA2EA30EA4FC2444F1F126966AA7729
7BA7EB9B6F06068DCAA13C02B3588F5A46379A5072E7E2DBF343C097B55CA4D5
88C6753F362DD28478A1BC56804A66D1A6D1CB247FEE04B2647D343D14D14B66
B993C73F534C4128A2626BB2404D5D4FD30D29B727A906D4DCB574AC37C31D5E
5DAFB5704A4D0DA0711E1E> |-
/H <1C60D8A8C9B6E3FA234780E58B87D2EA5F590A170732E8342AECC9351661
21E62A1070A4510D0980322AC6BABDF7A3A228EF9BBB4BF97033D21D805A1136
8BAC08025F6C287B3394B00073DBEA738B9B7C277CB9D0325E22DEB40E13A642
B54596E5600079B51218C4BB379F69673BE6276C3860567D7EA7F1FEF70370E2
7C9E151FE7B8E0E027C8D98B0318B79FB51890320A3F9A574D98EA7D5B8CEC6B
D0B71DCE424933EDA6F23705BC6A06DBF250AD44DE114AD6E4> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB32777FAAECD12647866E7CB3F
CCDC541E37F2225E520DEDE695980D4012AD5B972BDABC7E7E5410E71AC63692
4E778B3131B6C4D1E76F8C4592AC311A2107F53DC1850538C9E487E6D5DBDFE8
027D7126BA9ED8B24E7379B57E474ACD298BF6B3700CC970D80111DD98EFC872
C24D0DA3C75DDDFD177C6D15> |-
/b <1C60D8A8C9B08A95C5897169EED96D271CC0A201580A85BBB6CFE03702C9
389AEE25CE69D1BDDECD4E28232C32A3113C892241798575F645E97E1FEF4D17
BABACA9B1400EB966B8CBA5BFC74A4181A1A52C4AC1E4D4BCB3BEFBF05CAB342
4B8B71500585C2C89CD37B890F00AF434789553E13269B7993EDDE63F9B6DB1C
CC49FF90A25496B9C07E5617BD7387C1694D4EBB8E59CF0CEF85691D4C91D3CD
1D33AB05DBBDE11A3BE1086B97B8CBA534FBFB> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C5897169EED96D33CB6A9013DDE3D04C2845E595598C
4E4627D0E1F97AFD1FA3154224DA0D119EDECEF82924766CE4492626DF7B3B07
C4245B263AA58C37772C982C7955B9EED30A1A264318D030C3D295AD4CC9C21E
7AC9D2948AC9CD001C0EF80B50DF932CF6EE69C321627BC51A66341B5399D1E7
8024F824DB5DEE83140E59FB88138D6F0F5D2F350BA93460F2F700A9AE6D35AB
E4DB962D8E6D84D6D606A800DD98F8807C3555FEEB> |-
/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF2F8524751F181F94C
EF756ACD6AB92BD091D7482415CDE9144C26B1697F8DF70FCF1DEFD4FA16FBE3
9206B1378E548C93AC587B3EF0B1ED3ACC74CAAD2CEA03512A889B4BA237C2E5
79B0E01D3D82622F69FB50659184006104BE20E13DAFC7793B241C1FD1A3880C
4AA41E91E3F86F715551> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/p <1C60D8A8C9B08A95C5897169EED91609D9E4D5F91353A54E37DF51998183
52315911AF5324EFF8F803A0D7623A2DDCB047188B5B8F28AB77A5ED34430D99
57B9E0225FBFAE612AB3A16746E264A6930D63A3F157DEFA872D2CA520250AA3
380B48623F26CA3F7D040CB163CC4C6240013209FBA4AD816878F179C8F27320
EBC05CF6C42FFA533A0E8716E243D2941CFE755ACC6E312A0F393F2C290E0F1A
CE85DBC680C6195A83A8DF92> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/u <1C60D8A8C9B08A95C5897169EED96D33CB6A8CCD6F539BADC574F30FA019
2FAAA0351E8C93175F4B6BE4D2DCA8A13E4F01BEC5788441B5C71C1247369B6B
73137454B1C207EA4F43D533FE87512BAD8DD4F3DBBECD9A7A1CE3F33A4D3F31
6952FDB339B4B6A937009D6EC9821D8553981B7D8AABC3E750369071> |-
/x <1C60D8A8C9B08A95D222871B45C8170346D4B3692E8D5307651DE3271DD6
AF0FFCDE284DD9CDD3B987BD9A4951E635C7A5CDCF53A699D8D2BA39BF571FED
C61B4760FA01C102B3CF6C44B24A57107DFFEFB711E00B7E6B8A7F332F9AC2C5
3243312E3CD55C94054BCA0B5D37362E138F5DD97019783B5271FD96258D5354
389532FB5D3FC50CB007DF880768FCF0AAEC6D6F5D8AB1559D6270DF0761EAD0
57A9F39E9A718AA16D8D8ECA90D61565C41A9B86CA057EC652FEE1927FFE969C
A046D06A10E75C83320EEEAB290370B870EF0E26D64C8EE9F9FD2B5549> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
/ff <1C60D8A8C9B08A95FF8CEA8AF5E07F63E9F1B5E8F4CA1683A21DE95D58D
6C3E29BB233906DDCCD8BFB1899CEB485D08A458F58F7C89DA0E8F7FA2A99EF5
BBF85169B3739B6CE7D7BCC177E28ADCAFF9E7612E422A5FACC2A3820045F970
113E2ECECDB4DEDC4C2BFD1202B58918251821CFAFBB17063F0526B848F9C2D3
235FDD0BCE8FB0612E98650091EE577E3405A8C64E028FC04E263E89BA1DF280
B546CF896C4032381BBC5877FBCF8A65393530D72111F3424F86F277D183FBC7
9A030BB79C66013D11CC2B017E467BB2B8034E9D3B6F68F43CDD67C1CACE7684
B735F961CF345B55743> |-
/ffi <1C60D8A8C9B08A940B724A74A01E6912BEA33DAA95EEBB4DC1B779188C
62AA55349967259B8654464FCC71DE99C6D10604B93731820F32C2920CBCF6EC
58FCE6297ACC5C62B0F67512B563AC04C4DC984C0757C275EAC7C3E6B2ECA05F
0AFAAD3AD13CFB59EC40F43B1B729AAFA678AAB2B40BC3C313EDCB0F85FCB530
37545D3D3785CCBD44549F6E3679E0FFBDECF721AA60AE5B889AA1A0E8E10BFE
90AF680EAC1129A729E9928FF21E0BFD6E0B50D77EA7C0DADC707328B068CF18
672AEBB8EC7C7B053B6A0BD1BA516AAC0AEA7FE734A7059E07FA695BCA6665A5
4866176B5E013CC5EDBE5B4E7384E08E754D313FB36D589EBD10AD81057E6FDE
2E902D4DC5A5ACEBCBB552B691C45831FF8759DF05B5FA439327F4ABFF1A8993
454E59C4AAF0B0AEE54C38E3B7BFE9A86113CEDE2A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 43 /plus put
dup 45 /hyphen put
dup 65 /A put
dup 70 /F put
dup 72 /H put
dup 84 /T put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 102 /f put
dup 108 /l put
dup 112 /p put
dup 115 /s put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 174 /ff put
dup 177 /ffi put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two 10{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp /F 
/.notdef /H /I 10{/.notdef}rp /T 9{/.notdef}rp /circumflex 2{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
52{/.notdef}rp /ff 2{/.notdef}rp /ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
126.005 318.565 mo
(where)
[7.19511 5.53535 4.42743 3.90236 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGX+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B08A9434F1279EE91914230334C1A5B74193EF0B671857160B
5444806622BBEF44CDFA5E977A9BBE196FDED330B861CD6E33056CA80BB985DA
FD0F4D7805343518338A02D261B5C2249A3D912A503EE95709DA7EC6FE1A7EFF
86EE6E2C80D94BE9ECD4B97B2A015AC78A67162DDFBB86327429172F156AFCFB
A4D9DB037126B45921CCE7EA976591591EA77A2F2D78DFDC3F1C3A956C5438A7
E149AA7E8A858CFB7447B80D8B172A739461D79D4CE9A8601059801FCCF98A3F
05DDA99BEFB8209DBF187766E7B8E91DB7EED4FE8E4FA937DF3C38D85535519F
C80865BF84500BC55D2365EC10125B7DE92BCF1539D5E9798BA7EFA577DDFBF8
2C> |-
/N <1C60D8A8C9B08A9477D6835054B882AAB4A02CC3C218942D911DE01C47EA
C9980B81DBB304F7CDD3F6EEB286753001456292CDD068CD23306413A0404865
DC70494DECAEEDBC2EC6CD88A1C67B6472BAFC4AB7E9C48DCF8ECDB7A3CF5EB2
509BBFE1054D98BE500E24FD129CC9F11AA8F22E81A5F59CD6ABA71D7AF6EEEC
3CEE9A0FAF5D28997E7740831CC9F218205AD2A75D405FB322156ACED3F25C3F
0302FE18C3A44531EC90945050A8D2E42C45D56EEED84B05D2EAC35445DE2F22
E34C3524E16DA398E67630DD2742F7C04D169E> |-
/O <1C60D8A8C9B08A9467D3B448C7378059D6881A315BBD2631E0E335825071
15E802281B156772605DEC60F686D0C5E161D49E23B12C65C4B1C1A5530BDC04
6080F208E9B28544ECBCF6EF93802C57E97434272716B3DC2DECB65CF4F969EB
3607C2244F3C0B3E7D904718D0A21C31B74B082C931A7C4C54> |-
/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE
1078F4F9FDB6B815479F3F8E4C08C2277611060995697296243822F846B126CF
0E160F17A0E696866DFA49F673C2038348891CD860B798A64B6F339EC4B7938B
9F182758997F93186ED2A69E90C42D235CAEAD24AFE8D3159FE4BDCB9A95F7A6
964FE85BE9DDA9325438A11CA49C33606AD33A830562DD53ED45DE4A62B66C09
33B6FE7F6B47A7C113AADEEF11A01A5C1CC16CFFE2C8EAB69621925C42074ADA
6BF325E6CDE3FE32F5D6A69C1EB9EA111B3D764C5E464BF7625737F84DDEA451
40C83740D55258CFB228E594F623ACEED9AC4F7B3F0076D20A02E203AE9B646E
090C3B62DA99478592990F7E9C81B063FC67500BF0E28D6241E6CFC149DF1365
4BBD56189F141507F6D44034E6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGX+CMMI10 /Encoding get
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 109 /m put
pop
%ADOEndSubsetFont
/LLNMGX+CMMI10*1 
[59{/.notdef}rp /comma 5{/.notdef}rp /A 11{/.notdef}rp /M /N /O 
2{/.notdef}rp /R 14{/.notdef}rp /a 3{/.notdef}rp /e 7{/.notdef}rp /m 
/.notdef /o /p /q /r 3{/.notdef}rp /v /.notdef 
/x /y 134{/.notdef}rp]
LLNMGX+CMMI10 nf
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
154.363 318.565 mo
(A)sh
%ADOBeginSubsetFont: LLIAAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGZ+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B08A94E7D615340EE918726928CF2D6827AF6D2AA415BDDEF0
DF5ABC80BBE0B7DC8B909D2F37DE259EA2FD64E7EB170A967FEE536AB51F02D4
7ED3F9E2DDEDF14B12CE267F36B6B303CF6D077B8871C153AD531BDC3281EA47
8969F66E0539E204E7A744CF284DF274AA365E1E070763F0CAE812A36F45B37A
7C3EAB46A295129EAF1B1EC2142C85002B75CBFAA7EDDCA729686AC4B64118C4
B57A65AD59578041E75B94CE60E7A9A79D21F61F0450CAAE8335A7D3DF5D4D28
DD1639CA0814B9C8CE7263E3DDB72730834C46772C49B2FFB1EFFEB4DE8E5FD8
86954118FCF30B368453F66759B9791EE54C703393D70B234AAE4454F22AF970
9CC879668D394AD9D2B87D1F03D2E76C952F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGZ+CMMI7 /Encoding get
dup 77 /M put
pop
%ADOEndSubsetFont
/LLNMGZ+CMMI7*1 
[77{/.notdef}rp /M /N 26{/.notdef}rp /i /j 2{/.notdef}rp /m 
2{/.notdef}rp /p 143{/.notdef}rp]
LLNMGZ+CMMI7 nf
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
161.835 320.055 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
172.168 318.565 mo
(=)sh
%ADOBeginSubsetFont: LLIBAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMHB+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/summationtext <1C60D8A8C9B08A94D23A6AA35126F81064EA3BBD3C652E69
0CA3B67504E0960005DA1F91D91A5FD954AD3579BAC8B8CF7CC53F0F44836A82
02B829B33B2BC9796DB34CBF72417984AE189707E420DD8DB84C80F9D686A50B
1A923FFBAEDECB3B744D8037D2BE7E532A4185732D6941B09736F4AC18616FE6
0CD0D1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMHB+CMEX10 /Encoding get
dup 80 /summationtext put
pop
%ADOEndSubsetFont
/LLNMHB+CMEX10*1 
[34{/.notdef}rp /bracketleftBigg /bracketrightBigg 44{/.notdef}rp /summationtext 7{/.notdef}rp /summationdisplay 167{/.notdef}rp]
LLNMHB+CMEX10 nf
LLNMHB+CMEX10*1 [9.96279 0 0 -9.96279 0 0 ]msf
182.681 311.093 mo
(P)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
193.204 313.553 mo
(N)sh
193.204 321.556 mo
(i)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
196.015 321.556 mo
(=1)
[6.1144 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
208.268 318.565 mo
(q)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
212.709 320.055 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
216.03 318.565 mo
(a)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
221.292 320.055 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
228.864 318.565 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
232.735 318.565 mo
(x)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
238.427 320.055 mo
(i)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
241.748 318.565 mo
(;x)
[4.42149 0 ]xsh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
251.87 320.055 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
256.452 318.565 mo
(\),whichdependsonlyonthesourceandcanbecom-)
[3.87454 5.72662 7.1951 5.53534 2.7677 4.15842 8.39468 5.53537 4.42743 5.8143 4.42743 5.53537 
5.53534 6.79855 4.98141 5.53534 2.76767 8.13766 4.98135 8.40463 3.87457 5.53534 7.29672 3.92926 
4.98138 5.53537 3.90234 4.42746 7.30667 4.98135 5.53537 8.40463 4.42746 4.98138 8.40463 5.8143 
7.29672 4.42746 4.98138 8.30197 0 ]xsh
126.005 330.518 mo
(putedinonepassfordi\256erent)
[5.53535 5.53535 3.87454 4.42743 9.63007 2.76768 9.63005 4.9814 5.53535 8.5321 5.53535 4.9814 
3.92926 8.03394 3.04466 4.98138 8.00703 5.53534 2.76767 5.81129 4.42741 3.90237 4.42743 5.26636 
0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
265.074 330.518 mo
(m)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
273.816 330.518 mo
(.Thecomputationalcomplexityforcomputing)
[9.53241 7.19513 5.53534 8.5321 4.42743 4.98141 8.30197 5.53534 5.53534 3.87457 4.98138 3.87454 
2.76764 4.98141 5.53537 4.98138 6.87234 4.42743 4.98138 8.30197 5.53537 2.76767 4.42743 5.25836 
2.7677 3.60556 9.35306 3.04465 4.98141 8.00702 4.42743 4.98141 8.30197 5.53537 5.53534 3.87451 
2.76767 5.53537 0 ]xsh
%ADOBeginSubsetFont: ONKBAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGQ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
95A6D99B3BA8FB24DB64474803A26F8962BAE1A2CA5312A983CA8F54B6A2CCE1
BDDA3BE7A71DC65187F905467F2B3DD6E2C46A0678FF636FF8C95A24B30A38BB
558B9114956B55462DFF6E91F237BBD08C7678143FE55B3326F60760923AC3FB
F2607F3A9D9831610688B18ABB03677BA0E9C91ED23BA198C76AB28BE6B2198F
782BEFB9FDC108557F68DBA2CFBE> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E5029B
19678C1ADFB7D768C22FC42830CD4BFE33F922A0B35D4B8100996306D034A2AF
376DF52CDC59CEF40F1ADEE3D98D4B2E93796959422FDF4D3C93728708B2A090
9A3A4C863D92FDB9C8A8464E686F14A89B4451B451585AA4EDD696CE8BA342FC
161136031CEC1B831969CCB78C8B2D64DB2426CAEBE5228216AB6FB7F309CADE
26F419F1E2D30640CA1596947438C> |-
/lessmuch <1C60D8A8C9B5EE31B34ACAC9E88C39EAADBAD1911E2C47E934495
C5270E986B2EF4601C6136B9A999AA68EEF3A32B8AD4A4C8AE705952B4C7A65E
6FDB8C9E69370AC1ECC14AA703C1E9DADA78AAFF90AC2B2AF3E1705925D86683
15D02CB2C57C8E0E89C51C166E43FBB9AB13DC3949817893855FAF9480C5F8B2
616EDB945AC640DAD87C5B918AC0B21E989A34333C1A1C57B8D1FC18EAD69565
AC3F428EB10C095> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGQ+CMSY10 /Encoding get
dup 102 /braceleft put
dup 103 /braceright put
dup 191 /lessmuch put
pop
%ADOEndSubsetFont
/LLNMGQ+CMSY10*1 
[102{/.notdef}rp /braceleft /braceright 57{/.notdef}rp /minus /periodcentered 28{/.notdef}rp /lessmuch 
64{/.notdef}rp]
LLNMGQ+CMSY10 nf
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
126.005 342.472 mo
(f)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
130.977 342.472 mo
(A)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
138.449 343.972 mo
(m)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
146.021 342.472 mo
(g)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
151.002 337.69 mo
(p)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
155.113 337.69 mo
(\241)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
161.335 337.69 mo
(1)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
151.002 345.132 mo
(m)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
158.074 345.132 mo
(=0)
[6.1144 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
171.868 342.472 mo
(if)
[2.76767 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
180.891 342.472 mo
(O)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
188.763 342.472 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
192.644 342.472 mo
(pN)
[5.01225 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
206.748 342.472 mo
(\)andforcomputing)
[7.07259 4.9814 5.53534 8.75336 3.04465 4.9814 7.11038 4.42743 4.98138 8.30197 5.53534 5.53537 
3.87454 2.76767 5.53534 0 ]xsh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
297.373 342.472 mo
(f)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
302.735 342.472 mo
(^)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
302.354 342.472 mo
(v)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
307.186 343.972 mo
(j)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
311.387 342.472 mo
(g)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
316.368 338.861 mo
(M)sh
316.368 345.072 mo
(j)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
320.069 345.072 mo
(=1)
[6.11438 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
333.863 342.472 mo
(is)
[2.76767 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
343.766 342.472 mo
(O)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
351.648 342.472 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
355.519 342.472 mo
(pM)
[5.01227 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
371.284 342.472 mo
(\).Hencethetotalcompu-)
[3.87451 7.15134 7.47211 4.4274 5.53537 4.42743 7.64542 3.87454 5.53534 7.63547 3.87454 4.98138 
3.87454 4.98141 5.97565 4.42746 4.98138 8.30197 5.53537 5.53531 0 ]xsh
126.005 354.425 mo
(tationalcostis)
[3.87453 4.9814 3.87453 2.76768 4.9814 5.53535 4.98138 6.46388 4.42743 4.9814 3.92926 7.58069 
2.76768 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
194.784 354.425 mo
(O)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
202.667 354.425 mo
(\()sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
206.538 354.425 mo
(pN)
[5.01225 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
223.112 354.425 mo
(+)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
233.325 354.425 mo
(pM)
[5.01225 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
249.09 354.425 mo
(\).Aslongas)
[3.87456 8.34682 7.47211 7.63541 2.76767 4.98141 5.53534 8.68756 4.98138 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
311.007 354.425 mo
(p)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
319.429 354.425 mo
(\277)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
332.803 354.425 mo
(min\()
[8.30197 2.76767 5.53534 0 ]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
353.279 354.425 mo
(M;N)
[10.1928 4.42151 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
376.995 354.425 mo
(\)wehaveareductionin)
[7.57074 6.92612 8.12363 5.53537 4.72235 4.97943 8.1236 8.67761 3.90231 4.42746 5.53537 5.53537 
4.4274 3.87454 2.76767 4.98141 9.24152 2.76767 0 ]xsh
126.005 366.388 mo
(thecomputationalcomplexity.)
[3.87453 5.53535 7.73508 4.42744 4.98138 8.30197 5.53535 5.53535 3.87453 4.9814 3.87454 2.76767 
4.9814 5.53535 4.9814 6.09523 4.42746 4.98138 8.30196 5.53537 2.76768 4.42741 5.25838 2.76768 
3.60553 4.43147 0 ]xsh
135.958 378.402 mo
(Thisapproachiscalledthe)
[7.1951 5.53535 2.76768 6.88821 4.98138 5.53537 5.53535 3.90236 4.98138 4.98138 4.15845 8.48434 
2.76767 6.88823 4.42743 4.98138 2.76768 2.76768 4.42743 8.49431 3.87453 5.53535 0 ]xsh
%ADOBeginSubsetFont: DTOAAA+CMTI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /DTOAAA+CMTI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 116 /t put
def
/UniqueID 5000828 def
/FontBBox {-163 -250 1146 969} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705 431 442 665 667] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [68] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/a <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB960ADD7427F4748AA7
40F9CAEB56E3159AEA80E78D302ACD2BADDF5E540B40F5F1E93B535D835621FA
8D6D0E9D33D63AB3D47C7F8DCFDFB0E30BC5260E365B4AC3F9A6B026D14E2149
6D1AA9088EEB9815297925C51FBCAC3FED2E86C32FC7D729A70E9535373A3719
D3B7F0D8A4392ABAAD859FF7C19BC30350B2BFECD70E0FEA8708BB5DB8FB2C61
3B9EE9A5E9073271DF87E07919A16833> |-
/d <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB9887A7CBE1C5EFFDE9
EA00DDFAA588E7FACA4B7803C6093344F29EDD1EF259438E90885B97C5FFE2EA
B4C35BD2FC50328B7D8519BDB626A32E1AD1D289B7CEC993BDC3B28FB974CA2D
C4CCC84C788613BE032BCA738351EBC4A35A96F48EEFB7806345F187D7131079
CBA81F60E27C5A3563693BB167CD0C466BFF762302A55102935F584BEDF8F68A
EC754310C96AB32C89517F28C2C22821062831392FF43AD1640982C65DAE1BEC
DE1459D902D0988E9CD9226788830295F1ADE70B96BD143EC8CE66C8> |-
/e <1C60D8A8C9B74F361570F61A35EA78464894B1DA8CAD69B19C3F676A41A6
475967ED30A297FEB3CD3D7317CB56BD67ED8BE136EDA10CB5745498DECD970D
ECEF1ACA52F9039E01C9F5B386033674FAFA84FBC05E576740F2A615DA4003C8
F6D0D15EE471656895AD1D665316B1B828EEA1C31E22F55730B1C2314980EB> |-
/h <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB9887A7CBE125DF9565
E042B3B6CE65980A8859DE30876E7E048C2548EFA734529A9E50A847E15B0D90
B5039377A4FD37F27B6F123D56207A1E4A6D57FD9E1A1D21DB50E30581F50B2F
C5BC1714E24786A2D537096278B314DFE305E3248D33EA3C902A857DD99D6424
2AE1BA65B63C677EF3F3341C6B43B8BA9C442FDE5F2C3FE11C9531BED49D2EBF
3E5B3C3C3D701D5487A98B9B384FE82443678C1CAD2B06847128D02BEA2E6FDE
DDF8768EB107C33875740E348F0893F196A5D575811B6A9F008E875001C63F> |-
/i <1C60D8A8C9B08A956B318F2665F1639A6CC8E9144365D6ED25E824095C5B
13D90392BEDCE6D2FA9E3E6FCD2C5A45961D26FB79D0E0A290D54B1A2BF5906F
AA4615FBBABF6FBC4206B742086A49055F771F83ABEF780167C51668D3F75E5C
46260BF270F1770F673BE8D273434FC047AD70DDF6792FBE2B96509E0A175C7F
B889C751E9FF612B0843F74796B71FE802167C00C7152949542B614AFFA4070F
F10912D018DCCC018185AE00D64C22E9471B118CE186B1A5FD80119CE5B71BDC
61B8586283FCA0251345DEBAE2AB27> |-
/l <1C60D8A8C9B08A957FC8DDEDA4E5990236779DB2C90F61F4190F4B89DECD
2E6D61DFF5E2A23A2BEECDF030FFBF3170042C18E34771CFE53ECAC2E4B1D47B
74419D622F431E9D1DA047BB1CD9E02687DD3695180051EE7C12E71C652CDDDF
6F9758D7BF07B7248389E040A66B07EB5624EC993974B4C5AF8E51DEE2A5F297
BAAE54919FD4540E5EC2E27D0E678452> |-
/m <1C60D8A8C9B08A9471465E3388398E05458256DA1227062E25138E1CDE1C
81E88FEC57EE3CFAAE4FB7CE27FCD010FD241EA91DC181948FEE7DBBFE53997D
689ECEBCD7E547FC27B89A7FA11F00D8A9AFB94630E3F4A7E98EB2C26FD59F84
036FD362E89A581A4F71C63B2F218F9DB7118FA1EE21B09D3AF4CEEA805E4965
BFB25BA3A78ED124EDBE5E36429717A87F9C4354CE6CA354566C9890D41CEF67
06CFE46D0E7A02A59C55F68E65E773D74308F06122303B15A294DE8316FE4C78
5757766E73B7741A1621444849E73A402A080DF74026BF6EF2EC1860108BF435
8E9966F40307A9704F49B535A216C951D57DF95E26ED720085A856A93CF2E0B6
3CF6FFD2F7CDDBFCA231100E8540B67FF9E2B6B63515F1079FDAB0652AD97EEA
CD36> |-
/n <1C60D8A8C9B08A95C7B490C1B7DC3F2C7D9FA776E209D1F00857C3244C85
FB3ED5672886F130E9E7A8681B1CA1119E1C4B35A303BE773E9D71ACA2F11AC1
ABD9E652544C2F05A5E66862C3B1EEC04418503777464DC1178824FA9C598241
AB46E8756CAD51C494B1AEA453CE229E6E7DABFB5169F3CA1067AD88B5618C50
92694B1AFE2EDEB6AA699A416512356F8472A10C8412B6B84ECCE1F5BC5F65CF
E8BA0189550AEE4FA41A32A645D893401D0AD65B8F7D2B833312CDCC05099B10
138F7EA4BA022EC645A6C9F66095A3C3A8B40683F498BC0F> |-
/o <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB9608A44871691EC2E0
A092DB833438D1D2BF087FAB25520EEBFDA1810C898396402EDD8435DABCBA23
5435E10B0A329492B3968D802BB2E9043722B80EC0E5ED67E4B4331AEDAD6A57
319EBC8D615CFD050F466FEE58ED9B> |-
/t <1C60D8A8C9B08A959D8AA3D8E221FFA1ECA8C975E3D8D93F8D9510FA2C5F
966B0A726E3844F9227A8353ED28E469BF4A7FAC73ECCD3C728E71634DF00B43
60CD819A984E370280D424E6009B2F0F5DFE05F7F7542428D960FD4944E72C1E
3FEF5004DE1F666E160FE7495BB24D1C98F33A110AB2907D4D7E14F819EE0BF3
1C4F7DD1247F3F2BEDADD16CF3E5662EC223> |-
/.notdef <1C60D8A8C9B08A9597B4632E36E65E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMHD+CMTI10 /DTOAAA+CMTI10 findfont ct_VMDictPut
/LLNMHD+CMTI10*1 
[97{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 
2{/.notdef}rp /l /m /n /o 4{/.notdef}rp /t 139{/.notdef}rp]
LLNMHD+CMTI10 nf
LLNMHD+CMTI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
255.231 378.402 mo
(middlemanmethod)
[8.14751 3.0556 5.09192 5.59006 2.54648 4.58295 8.14752 5.09192 8.83893 8.14752 4.58295 3.30963 
5.09192 4.59378 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
341.125 378.402 mo
(sincewearecomputingthesetof)
[3.92926 2.7677 5.53534 4.42743 7.37643 6.92612 7.3764 4.98141 3.90234 7.38638 4.42743 4.98138 
8.302 5.53534 5.53534 3.87454 2.76767 5.53537 7.95032 3.87451 5.53537 7.38638 3.92926 4.42743 
6.8335 4.98138 0 ]xsh
126.005 390.355 mo
(coe\261cients)
[4.42744 5.25038 4.42743 8.30197 4.42744 2.76767 4.42744 5.26634 3.87454 0 ]xsh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
176.939 390.355 mo
(f)sh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
181.921 390.355 mo
(A)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
189.393 391.845 mo
(m)sh
LLNMGQ+CMSY10*1 [9.96279 0 0 -9.96279 0 0 ]msf
196.965 390.355 mo
(g)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
201.946 385.564 mo
(p)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
206.048 385.564 mo
(\241)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
212.279 385.564 mo
(1)sh
LLNMGZ+CMMI7*1 [6.97195 0 0 -6.97195 0 0 ]msf
201.946 393.016 mo
(m)sh
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
209.008 393.016 mo
(=0)
[6.1144 0 ]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
223.432 390.355 mo
(atasingleexpansioncenter)
[4.98138 7.71022 8.81706 3.92926 2.76768 5.53535 4.98138 2.76767 8.26312 4.42743 5.25836 5.53537 
4.98138 5.53537 3.92926 2.76767 4.98138 9.37103 4.42746 4.4274 5.27637 3.87451 4.42743 0 
]xsh
LLNMGX+CMMI10*1 [9.96279 0 0 -9.96279 0 0 ]msf
350.138 390.355 mo
(x)sh
LLNMHA+CMSY7*1 [6.97195 0 0 -6.97195 0 0 ]msf
355.829 391.845 mo
(\244)sh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
364.242 390.355 mo
(\(seeFig.)
[3.87454 3.92926 4.42743 8.26312 6.50372 2.76767 4.98138 0 ]xsh
.89514 .772518 3.0518e-5 3.0518e-5 cmyk
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B35FC2DB8BD5A49535> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two /three 9{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp 
/F /.notdef /H /I 10{/.notdef}rp /T 9{/.notdef}rp /circumflex 
2{/.notdef}rp /a /b /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /x 
/y 52{/.notdef}rp /ff 2{/.notdef}rp /ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
405.603 390.355 mo
(3)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B08A94DF93CFE877B47057C7AA7A39F5E120783EC688EC89C1
8D88E4CFACCAF32BE3FB943A3FA817A1C0529930AB0065CCAE1705346D415CAF
6F3BE8B28DBD2FE903E61186A32EDF38B838858E46745C2B7FA48B8E6E0D0986
BD7A8BA149207F3F0EA77A4EFE06A7122E8FC6C2B04A0B03DD31C256ACF417D3
9DB720EA63717B8AF030369F0ACE1BFC1BDA8084F86023424DB31D0A5F8EC215
16A92BBE98292BD36BE0960649A591F01066473D657A65D807C4E00EF2369AF8
93D97C00CCFC22CA894227F9117CFE788197C57F5A> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/z <1C60D8A8C9B08A95B1F07368C45D864DF4474A20871FC664B8852059094E
95B1AD892B88EC35B7805C7F08622DA0E6CE40252085D0FCEAC9B69DEE7AC3FB
4801FCBDCE2F88570AA73B253F1D5D5B25E723A6A6E28A8B6198E25FE08D9384
A6F44E1422CD02B5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 87 /W put
dup 107 /k put
dup 122 /z put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two /three 9{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp 
/F /.notdef /H /I 10{/.notdef}rp /T 2{/.notdef}rp /W 
6{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 51{/.notdef}rp /ff 2{/.notdef}rp 
/ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
410.585 390.355 mo
(\(b\)\).Thereader)
[3.87454 5.53537 3.87451 3.87457 8.73538 7.1951 5.53537 8.26312 3.90231 4.42746 4.98138 5.53534 
4.42746 0 ]xsh
126.005 402.308 mo
(shouldrealizethatthisapproachwillworkonlyforregularpotentials.Alsoitcan)
[3.92925 5.53535 4.9814 5.53535 2.76768 8.89281 3.90236 4.42744 4.98138 2.76768 2.76767 4.42744 
7.79485 3.87453 5.53535 4.9814 7.24196 3.87454 5.53534 2.76768 7.30664 4.98141 5.53535 5.53535 
3.90234 4.9814 4.98138 4.15845 8.89279 7.19513 2.76767 2.76767 6.1351 6.92612 4.98138 3.90237 
8.61584 4.98138 5.53534 2.76767 8.63577 3.04468 4.98135 7.26981 3.90234 4.42743 4.98138 5.53537 
2.76767 4.98141 7.26978 5.8143 4.98141 3.87451 4.42746 5.26633 3.87457 2.76764 4.98141 2.76767 
3.92926 7.33063 7.47211 2.76767 3.92926 8.34885 2.76767 7.24197 4.42743 4.98138 0 ]xsh
126.005 414.262 mo
(beseenthatthemiddlemanmethodneednotuseonlyoneexpansioncenter.We)
[5.80434 8.08379 3.92926 4.42743 4.42744 9.1917 3.87453 5.53535 4.9814 7.53088 3.87454 5.53535 
8.09373 8.30197 2.76768 5.53534 5.53535 2.76768 4.42744 8.30196 4.9814 9.19168 8.30197 4.42743 
3.87454 5.53534 5.26038 9.19168 5.53537 4.42743 4.42743 9.19171 5.53537 4.98138 7.53088 5.53534 
3.92926 8.09372 4.98145 5.53534 2.76767 8.91473 4.98141 5.53534 8.08377 4.42743 5.25839 5.53534 
4.98141 5.53534 3.92926 2.76767 4.98141 9.19168 4.42746 4.4274 5.26639 3.87451 4.42746 3.90234 
8.19739 9.42279 0 ]xsh
126.005 426.215 mo
(canusemultipleexpansioncentersandthemconsolidatethecontributionofallthe)
[4.42744 4.98138 8.43454 5.53534 3.92928 7.3266 8.04294 5.53535 2.76768 3.87453 2.76767 5.53537 
2.76767 7.31665 4.42743 5.25838 5.53535 4.9814 5.53534 3.92926 2.76768 4.9814 8.44447 4.42746 
4.42741 5.26636 3.87454 4.42743 3.90234 6.82846 4.98138 5.53537 8.43451 3.87454 5.53537 4.42743 
11.2111 4.42743 4.98145 5.53531 3.92926 4.98141 2.76767 2.7677 5.53537 4.98135 3.87454 7.33655 
3.87457 5.53534 7.32663 4.4274 4.98141 5.27631 3.87454 3.90234 2.76767 5.53537 5.53537 3.87451 
2.7677 4.98138 8.42459 4.98135 5.95383 4.98138 2.76767 5.67682 3.87454 5.53534 0 ]xsh
126.005 438.178 mo
(expansioncenters\(seeFig.)
[4.42744 5.25838 5.53535 4.98138 5.53535 3.92928 2.76767 4.9814 8.84299 4.42744 4.42743 5.27632 
3.87454 4.42743 3.90236 7.23691 3.87453 3.92926 4.42744 7.74503 6.50375 2.76767 4.98138 0 
]xsh
.89514 .772518 3.0518e-5 3.0518e-5 cmyk
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
246.159 438.178 mo
(3)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B08A95C5897169EED99899F86A6DCF3CD291B001131D3BCB45
BF71748507542417352D5B30F63C60EB90DCF55005F88E95175B21D3219CD9E9
2E89E417B177D285600845553F66626D2225552D23A7697637BDCEEECAEA18AB
42A896E96FF5B3536CC368A5F7504B6C75D962A4B5F9534F79AC78DC99848461
42257A40DE257430C92806EBA73FF7D93DF0A6C207299E2D17F4071F9096D016
163F4D3EC1889ADA266D3682F2D99904573A5022A10E61069737F2D55F919F95
A33DB6DD2667321E4727855B58DBF4B1E5A294928E6CEABFBD34F296C1B758> |-
/bracketleft <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED9132
1AEA14D2F111E25129A9F55A9BBE788FBBDFF0F6C2244EC994> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 83 /S put
dup 91 /bracketleft put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two /three 9{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp 
/F /.notdef /H /I 9{/.notdef}rp /S /T 2{/.notdef}rp 
/W 3{/.notdef}rp /bracketleft 2{/.notdef}rp /circumflex 2{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /x /y /z 
51{/.notdef}rp /ff 2{/.notdef}rp /ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
251.14 438.178 mo
(\(c\)\).)
[3.87454 4.42743 3.87451 3.87457 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /XSAAAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 70 /F put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 656 678] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/period <1C60D8A8C9B08A9570810981675968D99EC91A4FB3FF0912F3FF225
19AEBE50A> |-
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641FCF9B01129F
44B2D0DA0A0D4246B40A3567725D92D14A71BEF3D15B0FCD87AFBF51EDF2E434
E7AA8140D4D28AD634F885437601AC91D4765E112CCA291CD10E37C9ADCD0B75
E41F6A87C712119256205A282F77AFDAF9159A199A13D204AE23426594> |-
/three <1C60D8A8C9B7A73D3B44BE7B3BE12688EE7DDA3A63BDA62EEDB076E2
123EB921A3297B68A71F5DF92E7CDAF71A150A947FFEC101C8C7F263DD77DC4F
7F72BCB13AC247B7F12687C9B4904765C9156BEE359166190CA1B2094BC32103
9EC0AE22422B378A1337A7F24F1131A027BF6934C63B5D4012127C> |-
/F <1C60D8A8C9B08A95C25148D4A67F951EBD6EF3AD9462C395D44288F6CB81
F376CF5EDFD5430607513999D2146E1C667F83F8118977160401906D0121BE0C
CF839AAEF40A80> |-
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597CB6E5B5727BA22A17D0DAE
C407D8C3D3136AA342232348EF23781510C3E78954963CD307527E6A8156255F
51163D8760FA65EEBAD56EA8F7D2F06154AF2F14F168207F31B23917B20B9FDB
A8E4C1D2E16D03E0C04BF729182FBA85E7EDE81B43C3AA0ECB9C9BA27B0E7F> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8
BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A31
69762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C6662A2D6
C7FC6E088D08DCAF0061583F541694> |-
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838869C792E77FEDB
2EDDDF87A4ECEA55DED30419BE80B9800A7A7BCC852BBF2F2E06BC58F5220971
E571F38CF807ABB277789A55600204E7D4F9D5B79E85F55DBE49717A60C2DBDE
EFC117FFEA09FDB25E08EC0D2C46945DC382E7BB216BC1ED46A53D7DCC40B2C9
9BE8374E106F137F672ABF5E8DC549748A999EC7C6BF9EB4A8ACFE131064AD2B
C89A39B533BAC508010480088F92C9E199DE77B0D5D956B2F9890F91DB699D5B
FE37A68F78A04CA9D3C85DA607FEC9886BB4D6> |-
/i <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A294CE56FA4856D5579
AC24D99BEF447D92E629D8CC408E6D9D7B0F2DD90AECF9> |-
/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1E357CEC11DF3B72C
60D7555125BC3695> |-
/n <1C60D8A8C9B08A95D5A79985A82729CAE756D0489903E93B90E41EC367F6
1A5B1D9E6565B3F6AD5D7DB5A2C3E43D0E00B470AD40C0D92976A92464A2E599
1D4AD84826F60EFFB914AFB515> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C224947145FF19D1
982913BDB63436AA6C4E83643807117E1530260A08A6B9A3F353> |-
/p <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F170BA20A3467
B97387D8D8E2E47D725A77E3D89E610463BEB33F2000963437F3E1548999C4C0
D771AEADC64008A4018EB255F27E32C5AC3E27C9FE47F18E6F6006D8F9D35D48
3D63730ACC150C4935A22C3C9F17D6> |-
/r <1C60D8A8C9B08A959965E2515C2E939D32F95F06D24977D250B5BA06E866
AA828AC35B0DE74E529A185884FE51182FAA624B3FDBC3A7A2C8> |-
/s <1C60D8A8C9B08A95899606B6B06029417B1C57880E6EC5D2D6786BEDA677
1C673DCA1F1E4C0DEF808791979853B096E133BFED7F29CEC7631B543CDA3044
7AA41B7FA0F4C395215EB8E1863D34AE9393B851AFDB1E97EFCAABF875BA3C47
5E5986C14523B69201AE249C951AE0EFA42707CEBD6E1E21237369A79A3BF9EA
ECA687BB513F7892AF8337C0F0> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350F4E0B4C1A851140E
2736CC0BCA482E4D8AAD1BEEFCDDE668980FBCDB1FA095D98D1D1D88986BF245
E52C01B70C1F43F764CB2ADCDFD2E95C5ED85956ABE04B8858> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A02D998439C3D8F5943D44B24
05B880A2E47A3923B4151C5A4934C03CC4787600BB3DBF41B100327D7717400B
228ACD479E7A669CC2CAE88F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LLNMHE+CMSS10 /XSAAAA+CMSS10 findfont ct_VMDictPut
/LLNMHE+CMSS10*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three 18{/.notdef}rp /F 26{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp 
/l /.notdef /n /o /p /.notdef /r /s 
/t /u 138{/.notdef}rp]
LLNMHE+CMSS10 nf
LLNMHE+CMSS10*1 [9.96279 0 0 -9.96279 0 0 ]msf
126.005 459.334 mo
(3.2Forsingularpotentials)
[4.98139 2.76767 18.2518 5.41376 4.70242 6.71199 3.81874 2.38019 5.14769 4.9814 5.14771 2.38019 
4.51918 6.72194 5.4167 4.9814 3.59755 4.42743 5.14771 3.59755 2.38019 4.78818 2.38019 0 
]xsh
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
126.005 475.339 mo
(Forsingularpotentialswecanusethemiddlemanapproachifthesourceandthe)
[5.67681 4.98138 7.61848 3.92926 2.76767 5.53537 4.98138 5.53535 2.76768 4.98138 7.63841 5.81432 
4.98138 3.87453 4.42744 5.26636 3.87453 2.76768 4.9814 2.76767 7.6454 6.93607 8.14355 4.42743 
4.9814 9.27141 5.53534 3.92929 8.1535 3.87451 5.53537 8.16348 8.30197 2.76767 5.53534 5.53537 
2.76767 4.42743 8.30197 4.98138 9.26144 4.98141 5.53534 5.53537 3.90234 4.98138 4.98141 4.1684 
9.25146 2.76767 6.78073 3.87451 5.53537 8.15353 3.92926 4.98135 5.53537 3.90237 4.42743 8.16348 
4.98138 5.53537 9.26144 3.87451 5.53537 0 ]xsh
126.005 487.292 mo
(targetpointsarewellseparated.[SeeFig.)
[3.87453 4.98138 3.90236 4.9814 4.42743 7.01282 5.80435 4.9814 2.76767 5.27632 3.87454 7.05759 
4.98138 3.90236 7.57568 6.9261 4.42743 2.76768 5.896 3.92926 4.42743 5.53535 4.9814 3.90236 
4.98138 3.87454 4.42741 5.53537 7.14136 2.76767 5.53534 4.42746 7.56567 6.50375 2.76767 4.98138 
0 ]xsh
.89514 .772518 3.0518e-5 3.0518e-5 cmyk
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065F9D4190A646C
4B6AEC0EE9FA16CBD7A614FBA5C7797971DF7C6EA57394603F00B98324AF84E1
D747CBDA8BF6ACE99B270F3634D0598A7799230B2FA53F37697C8FB04996EB79
CA1E39DB1488D8A5A85F57D049C7AE31C6F8A6F15F2EE8FAE7CD4D80767B9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two /three /four 8{/.notdef}rp /equal 3{/.notdef}rp /A 
4{/.notdef}rp /F /.notdef /H /I 9{/.notdef}rp /S /T 
2{/.notdef}rp /W 3{/.notdef}rp /bracketleft 2{/.notdef}rp /circumflex 2{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
/z 51{/.notdef}rp /ff 2{/.notdef}rp /ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
310.627 487.292 mo
(4)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YEKBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMGY+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B08A9451E2C198C46CF0D9EABFA9FD85792390C749BB6A88FA
7917DCB59892FD0C5009977DF79610519F2C9B4981160954D87B28067B64902F
CA672A1EA4467509C61E197E33F24FCA5EFBDFB729B55B5C4117ECDB5BECF27E
38689E84ACC3DB0FC92B91213DD4A7E85FA5734C4E13F3F79A0D32FDD8C93C62
AE6FCB0157C6098018B88A9792212F13C7D0A1033F2D5084E094BAD54582913E
E91D18A8548EFC0A88E1E44D93AF30413B31D6EB8A83F584066D1B1BAAEDC943
46D88042D1DFD12BF62633AA55A8138483062D74A9EFC7B33F2C50BB370D726B
76FB1D1FC63806D916CC235BF380> |-
/bracketright <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED900
1F8A271BD99A5836DA462259FB45E4CA899E39083E4FD8D8818> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMGY+CMR10 /Encoding get
dup 82 /R put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/LLNMGY+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period 
3{/.notdef}rp /two /three /four 8{/.notdef}rp /equal 3{/.notdef}rp /A 
4{/.notdef}rp /F /.notdef /H /I 8{/.notdef}rp /R /S 
/T 2{/.notdef}rp /W 3{/.notdef}rp /bracketleft /.notdef /bracketright /circumflex 
2{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/x /y /z 51{/.notdef}rp /ff 2{/.notdef}rp /ffi 78{/.notdef}rp]
LLNMGY+CMR10 nf
LLNMGY+CMR10*1 [9.96279 0 0 -9.96279 0 0 ]msf
315.608 487.292 mo
(\(a\)and\(b\)].In\(a\)and\(b\)wewilluse)
[3.87454 4.98138 7.01282 4.98138 5.53534 8.67365 3.87454 5.53537 3.87454 2.76767 7.14136 3.59753 
8.67361 3.87457 4.98135 7.0228 4.98138 5.53537 8.68359 3.87454 5.53534 7.01285 6.92609 7.5657 
7.1951 2.7677 2.76767 5.90594 5.53537 3.92926 0 ]xsh
126.005 499.245 mo
(theR-expansionatthecenterofeachtargetclustersandin\(d\)and\(e\)wewilluse)
[3.87453 5.53535 7.5159 7.3336 3.32057 4.42743 5.25838 5.53535 4.9814 5.53535 3.92926 2.76767 
4.9814 8.64375 4.98138 6.97298 3.87454 5.53534 7.53583 4.42744 4.42741 5.26637 3.87453 4.42744 
7.00075 4.98141 6.14307 4.42746 4.98138 4.15842 8.63379 3.87454 4.98138 3.90237 4.98138 4.42743 
6.97296 4.42746 2.76767 5.53537 3.92926 3.87451 4.42743 3.90237 7.03766 4.98138 5.53534 8.63382 
2.7677 8.63376 3.87454 5.53534 6.98294 4.98138 5.53537 8.63379 3.87454 4.42743 6.98291 6.92615 
7.52585 7.1951 2.76767 2.7677 5.86609 5.53537 3.92926 0 ]xsh
126.005 511.199 mo
(theS-expansionatthecenterofeachsourceclusters.)
[3.87453 5.53535 7.73508 5.53535 3.32057 4.42744 5.25838 5.53535 4.98138 5.53537 3.92926 2.76767 
4.9814 8.86292 4.9814 7.19214 3.87454 5.53534 7.74506 4.42744 4.42743 5.27632 3.87454 4.42743 
7.20999 4.98138 6.36227 4.42743 4.98141 4.15842 8.85297 3.92926 4.98138 5.53537 3.90234 4.42746 
7.74503 4.42743 2.7677 5.53534 3.92926 3.87454 4.42743 3.90234 3.92926 0 ]xsh
135.958 523.212 mo
(Ifthesourcesandtargetsarenotwellseparatedwedoaspacepartitioning.For)
[3.59755 6.24271 3.87454 5.53535 7.61552 3.92926 4.9814 5.53535 3.90236 4.42743 4.42743 7.12733 
4.98138 5.53537 8.72343 3.87454 4.98138 3.90236 4.9814 4.42743 3.87453 7.12732 4.98141 3.90234 
7.62549 5.53537 4.98138 7.06262 6.93607 4.42743 2.7677 5.9458 3.92926 4.42743 5.53537 4.98138 
3.90234 4.98141 3.87451 4.42743 8.7334 6.92615 7.61548 5.53537 8.16949 8.17944 3.92926 5.53537 
4.98138 4.42743 7.62549 5.53534 4.98141 3.90237 3.87451 2.7677 3.87451 2.76767 4.98141 5.53534 
2.76767 5.53537 4.98141 7.15125 5.67682 4.98141 0 ]xsh
126.005 535.176 mo
(exampleletussaywepartitionwithrespecttothetargetpoints.Foreachtarget)
[4.42743 5.25838 4.98138 8.30199 5.53534 2.76768 7.95425 2.76768 4.42743 7.40137 5.53535 7.46606 
3.92926 4.7124 8.77524 6.9261 7.95427 5.53534 4.98141 3.90234 3.87454 2.76767 3.87454 2.76768 
4.98137 9.07214 7.1951 2.7677 3.87454 9.06216 3.90237 4.42743 3.92926 5.8143 4.42746 4.4274 
7.40137 3.87457 8.51816 3.87454 5.53534 7.95428 3.87454 4.98135 3.90237 4.98141 4.4274 7.41132 
5.81433 4.98141 2.76767 5.26633 3.87457 3.92926 7.81882 5.67679 4.98138 7.42917 4.42746 4.98141 
4.15842 9.06219 3.87454 4.98135 3.90237 4.98141 4.4274 0 ]xsh
126.005 547.129 mo
(clusterweusetheR-expansionforallsourcesoutsideaneighborhoodofthecluster.)
[4.42743 2.76768 5.53535 3.92926 3.87454 4.42743 6.56242 6.93607 7.08751 5.53534 3.92928 7.09746 
3.87454 5.53535 7.10742 7.3336 3.32057 4.42744 5.25836 5.53537 4.98138 5.53535 3.92928 2.76767 
4.98138 8.20537 3.04465 4.98141 6.57239 4.98138 2.76767 5.44766 3.92926 4.98141 5.53534 3.90237 
4.42743 4.42743 6.59927 4.98141 5.53534 3.87454 3.92929 2.76767 5.53534 7.10742 7.6514 5.53537 
4.42743 2.7677 4.98138 5.26636 5.80432 4.98141 3.90237 5.53531 5.26038 5.26035 8.20538 4.98141 
5.71466 3.87454 5.53534 7.10742 4.42743 2.7677 5.53537 3.92926 3.87451 4.42743 3.90237 0 
]xsh
126.005 559.082 mo
(Therewillbesomesourceswhichhappentoliewithintheneighborhoodofthese)
[7.19511 5.53535 4.42743 3.90236 8.09373 7.19511 2.76767 2.76768 6.4539 5.81432 8.1037 3.92928 
4.98138 8.30197 8.11366 3.92926 4.98141 5.53535 3.90234 4.42744 4.42741 7.60556 7.1951 5.53534 
2.7677 4.15842 9.21161 5.53537 4.98138 5.53537 5.80435 4.42746 9.22156 3.87457 8.65762 2.76767 
2.7677 8.11365 7.19513 2.7677 3.87451 5.53537 2.76767 9.21164 3.87451 5.53537 8.11368 5.53531 
4.42746 2.76767 4.98141 5.26633 5.80438 4.98138 3.90234 5.53537 5.2504 5.26035 9.22159 4.98141 
6.72092 3.87454 5.53537 4.4274 3.92926 0 ]xsh
0 0 0 1 cmyk
%ADOBeginSubsetFont: FXYAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LLNMHC+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B08A9562EC537D4CD725EF19C5EAE073D9553498DA0A35
AF6F4B7D7E994235CB5767A568ABB68B70BDAE78EDA91560F832391691656D95
613B57C76E69946785B690638DC13DD9D811AD> |-
/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A
514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899
C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E39
72B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA
7C3147D75D44707368> |-
/six <1C60D8A8C9B08A95C25148D4A67F69EFB9F8F3A609C1D3385D0AAC4E0C
ADD469268A956D401D49AB1C2FAFB1BA1698E39119D3E670EFAFF9A91826C625
E0EB92A6705B58B7034239275BD3237695B136852BE264E9CB53D3E703A21038
44CDB809887AB756FC749006B0183C01CB17DD7D98160DDAACCE6D982CFC1885
2388623349D1A8D65BAFA45C508EEA51396C0418F5BDB2C98ACF86F4BA8DA501
E348D853F096867646C07938CDF9E95EFE2756A6> |-
/eight <1C60D8A8C9B08A95C25148D4A67F69EFB9F9AE504F2C52346D54C5F7
623B9C8365F3EE35C4195D96D6314C58DBAA719DBB6D55226E3740499CDB01E0
AC465C6B589049E46827308D8D35A8C54894143A53934399D93B828D235C25B0
02B8830BEF7407587148B5707DE7398D109B3E5F2821BB0793280FBB70845FC6
EC97E6E5C37875E07B2D86AA6A1A771AB42E786497B8102F6CF258601C6320DE
75E9DF61F7771E70A630C79065923227> |-
/A <1C60D8A8C9B08A9407DB08AE8730401ED4D58A1543B5E275631719E5B2EE
35BE7B9036FA847635646AF4E812ABC197B41EB4CB0F01087E686F9B2804E76E
49531B21B9D316CA95BDFCD6478F17D3A0D8E5E57123F91BCC2352659A4B6D3D
15B52682B0E1F7FA74D2AF82CDBDDD1EA2FB591C9FC7272EC9CB253875221CE0
2A0AD03B7C9F2800884A6517D18F64FA2FAC9123DA06B8EC756B> |-
/F <1C60D8A8C9B08A9451861051F8D4854116E10B4B78598D31E79EBBDD7DC5
F14AC7A7FCFF7321B85EB1DA9DCCA294BC3A1C21B8FB474157A15031B253B6FB
488B6EA3987EF538BAE50C9564709E85AA5D0004CB773478B6F8619436D4BFEB
D2C6104631199B073E31895EF675BFE8AFAA7923BEEB591BAEB42B45BC80088C
08E54B2BCC60EB7B40> |-
/M <1C60D8A8C9B08A94DF93CFE877B48E879251FF7362E6D934A2D8C79349AD
A15DA214B10DEDC67982C98005641A79CEA7F9256C3FE509CF21A3B92C201371
E64A8E702806E80180AE50C7ED8C139989646789DFDAC837468978289A743C8E
1587956E3569381042E11160032923A90BA5412087E42AE0FB59ABD5DA97FAA0
5CEE4E389C28357A5F3C3A05852CABE252F4E85754E70DA60B0456438E1A146D
326FF542EB36FBF55BEB4744DB2A23CF7CC622A7011B57> |-
/a <1C60D8A8C9B08A95C25148D4A67F9F686E10C9015E625BC828B4E3BD9FC2
9FFF325C762ED297FCF81CC528F44EEE7643A31A31DBAF51A4AF0DA6DFE81AC3
AD6D33D1F4E36E0B456E7546BA55DA893285CBBFE75E4F121DF101E08A563B57
D5DAAACA90B6F544C97137B213FDCBD5C6F2AC946C3398AD5F2A8D72ADFABE02
03A8247EEB62D99A45AE97F3EB41F58F472EEA6940F64618597EBCA221F7D8A9
B2666AB0B9DAB347A5839697156408> |-
/i <1C60D8A8C9B08A9562EC537D4CD755C265B210AE2859DC5C7B83F7E09408
FC6C15632BC220F4E3173B5C434D89FBD9CC144C43A467CECE09D834AEBAD2A9
CF341CB6D3014579A3F861C105BDA624081A6C0D20A438562C4E6493490FA79A
52A74C670D088B2D6E58> |-
/l <1C60D8A8C9B08A9562EC537D4CD755C265B3C784E8F577AB683FA2FB99AF
F7A3381D9CFF110E8E6556D09BB8ED9D15203CA80F72CA263D63B84854A3C169
3F0AC0B3CC945FF02AFDF3CD> |-
/o <1C60D8A8C9B08A95C25148D4A67F9F643441D766F4E9161FDE6368F9DA1D
C48CE6787FB513365689A0411C26FB54F77B1E75024144B7FEE97F153218599C
9D9B814535EB245F4B7257B478C07CAE2B475CC2F9D31E9325E421FD4B43AC69
A6F1C3E1B7F471B090D27161BFB778EED200749E009AD2A55E0AD8E963F2A03A
C02411> |-
/p <1C60D8A8C9B08A95EA1589819D018704638EF8F8AFF216CA77E426FC1797
928C66422657BDBC831C77257D87B835085B36A1260A415F0D2677E16E116DE7
B23E39DA4861F9B3F04AAED2F10196DFA0700BF03BD666C46F1F6102012F96E4
6D00E612F9BF6E1A1ACA27E00A6FF3979EEBE79DC2C6AAAE319452150C47956D
9BCF342932C0191079B67758529C5F3C9B46> |-
/r <1C60D8A8C9B08A95B2584918684CF6815391EA463D490FB248150210DF23
741098AC6EF866FD86ED0B317BA35C0873AD0157DEC08503D15249CC24EF97CE
25D70AB6CA3F1D28603DF053AA871546CD7163EDFD4833EF1A9F4167C933C7CD
BD7B598A9BBBC707F548822EE598AA72EF779817611B251E> |-
/t <1C60D8A8C9B08A95B2584918684CFCAE38CCD4F5EC3C10852D7A214B7F43
FEC677207504434B2BFC75A028F5328EEA1E980E6ED52A54B66EAFFB58C74CBD
BEC0674195736BFB32823B1B5B8C84D4D189334FD9BC333E2EDEE6DD4109FA00> |-
/u <1C60D8A8C9B08A95EA1589819D01FDDF9141BCCE0A4F6EBE69B95887DA43
74A577E00F4F81329511DDAE0E1D68CCFB4821728E872A0CF8DC48B98A113753
38B5E67C053F6B8A225CF765BB14B73F4711683EBDA64B8C69276C712CA0B9D6
14952349023771F9413B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LLNMHC+CMR7 /Encoding get
dup 44 /comma put
dup 50 /two put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 70 /F put
dup 77 /M put
dup 97 /a put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/LLNMHC+CMR7*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 3{/.notdef}rp /six 
/.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp /F 
6{/.notdef}rp /M 19{/.notdef}rp /a 7{/.notdef}rp /i 2{/.notdef}rp /l 
2{/.notdef}rp /o /p /.notdef /r /.notdef /t /u 
138{/.notdef}rp]
LLNMHC+CMR7 nf
LLNMHC+CMR7*1 [6.97195 0 0 -6.97195 0 0 ]msf
388.229 574.026 mo
(FMMtutorialApril8,2006)
[5.13907 7.16577 9.85001 3.11224 4.39926 3.11227 3.96979 3.11227 2.2547 3.96979 4.9389 5.87949 
4.39929 3.11224 2.2547 4.93887 3.96985 4.93887 3.96982 3.96982 3.96979 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Procedure [/0 /1 ]]
] del_res
/LLNMHE+CMSS10*1 uf
/LLNMHE+CMSS10 uf
/XSAAAA+CMSS10 uf
/LLNMHD+CMTI10*1 uf
/LLNMHD+CMTI10 uf
/DTOAAA+CMTI10 uf
/LLNMHA+CMSY7*1 uf
/LLNMHA+CMSY7 uf
/NQPBAA+CMSY7 uf
/LLNMGV+Fa*1 uf
/LLNMGV+Fa uf
/MZQAAA+Fa uf
/LLNMGZ+CMMI7*1 uf
/LLNMGZ+CMMI7 uf
/LLIAAA+CMMI7 uf
/LLNMGU+Fa*1 uf
/LLNMGU+Fa uf
/UGXAAA+Fa uf
/LLNMHC+CMR7*1 uf
/LLNMHC+CMR7 uf
/FXYAAA+CMR7 uf
/LLNMGW+Fa*1 uf
/LLNMGW+Fa uf
/SVJCAA+Fa uf
/LLNMGX+CMMI10*1 uf
/LLNMGX+CMMI10 uf
/AXNBAA+CMMI10 uf
/LLNMGY+CMR10*1 uf
/LLNMGY+CMR10 uf
/YEKBAA+CMR10 uf
/LLNMHB+CMEX10*1 uf
/LLNMHB+CMEX10 uf
/LLIBAA+CMEX10 uf
/LLNMGT+Fa*1 uf
/LLNMGT+Fa uf
/VTUBAA+Fa uf
/LLNMGR+Fa*1 uf
/LLNMGR+Fa uf
/EUBBAA+Fa uf
/LLNMGS+CMR8*1 uf
/LLNMGS+CMR8 uf
/GFNBAA+CMR8 uf
/LLNMGQ+CMSY10*1 uf
/LLNMGQ+CMSY10 uf
/ONKBAA+CMSY10 uf
/LLNMGP+CMSS9*1 uf
/LLNMGP+CMSS9 uf
/PBAAAA+CMSS9 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
