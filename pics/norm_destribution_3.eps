%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: norm_destribution_3.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: hp
%%CreationDate: 2011/10/12, 10:54:40
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 576 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2011-09-27T21:48:36+08:00"
   xmp:CreatorTool="matplotlib 1.0.0, http://matplotlib.sf.net"
   pdf:Producer="matplotlib pdf backend r8292"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
@
122.4 388.8 mo
468 388.8 li
468 43.2 li
122.4 43.2 li
122.4 388.8 li
f
159.317 309.275 mo
158.971 308.13 158.277 307.141 157.389 306.527 cv
156.5 305.912 155.489 305.721 154.578 305.997 cv
153.667 306.272 152.931 306.991 152.532 307.995 cv
152.133 308.999 152.103 310.206 152.449 311.351 cv
152.795 312.496 153.489 313.484 154.377 314.099 cv
155.266 314.714 156.277 314.904 157.188 314.629 cv
158.098 314.354 158.835 313.635 159.234 312.631 cv
159.633 311.627 159.663 310.419 159.317 309.275 cv
cp
f
159.317 309.275 mo
158.971 308.13 158.277 307.141 157.389 306.527 cv
156.5 305.912 155.489 305.721 154.578 305.997 cv
153.667 306.272 152.931 306.991 152.532 307.995 cv
152.133 308.999 152.103 310.206 152.449 311.351 cv
152.795 312.496 153.489 313.484 154.377 314.099 cv
155.266 314.714 156.277 314.904 157.188 314.629 cv
158.098 314.354 158.835 313.635 159.234 312.631 cv
159.633 311.627 159.663 310.419 159.317 309.275 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
149.315 311.428 mo
146.595 309.969 143.763 308.986 141.443 308.695 cv
139.123 308.404 137.504 308.829 136.943 309.875 cv
136.382 310.922 136.924 312.506 138.45 314.277 cv
139.976 316.048 142.362 317.863 145.082 319.322 cv
147.802 320.78 150.633 321.763 152.954 322.054 cv
155.274 322.345 156.893 321.921 157.454 320.874 cv
158.015 319.827 157.473 318.244 155.947 316.473 cv
154.42 314.701 152.035 312.886 149.315 311.428 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
149.315 311.428 mo
146.595 309.969 143.763 308.986 141.443 308.695 cv
139.123 308.404 137.504 308.829 136.943 309.875 cv
136.382 310.922 136.924 312.506 138.45 314.277 cv
139.976 316.048 142.362 317.863 145.082 319.322 cv
147.802 320.78 150.633 321.763 152.954 322.054 cv
155.274 322.345 156.893 321.921 157.454 320.874 cv
158.015 319.827 157.473 318.244 155.947 316.473 cv
154.42 314.701 152.035 312.886 149.315 311.428 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
336.459 264.187 mo
338.115 262.829 339.279 261.01 339.696 259.13 cv
340.112 257.251 339.747 255.464 338.68 254.164 cv
337.614 252.863 335.933 252.155 334.009 252.196 cv
332.084 252.236 330.072 253.022 328.417 254.379 cv
326.761 255.737 325.597 257.556 325.181 259.436 cv
324.764 261.315 325.129 263.102 326.196 264.402 cv
327.262 265.703 328.943 266.411 330.868 266.37 cv
332.792 266.33 334.804 265.544 336.459 264.187 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
336.459 264.187 mo
338.115 262.829 339.279 261.01 339.696 259.13 cv
340.112 257.251 339.747 255.464 338.68 254.164 cv
337.614 252.863 335.933 252.155 334.009 252.196 cv
332.084 252.236 330.072 253.022 328.417 254.379 cv
326.761 255.737 325.597 257.556 325.181 259.436 cv
324.764 261.315 325.129 263.102 326.196 264.402 cv
327.262 265.703 328.943 266.411 330.868 266.37 cv
332.792 266.33 334.804 265.544 336.459 264.187 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
275.417 257.288 mo
276.387 255.476 276.946 253.54 276.972 251.905 cv
276.997 250.271 276.487 249.072 275.554 248.572 cv
274.62 248.073 273.34 248.313 271.994 249.241 cv
270.648 250.169 269.347 251.708 268.377 253.52 cv
267.407 255.332 266.848 257.268 266.822 258.903 cv
266.797 260.537 267.307 261.737 268.241 262.236 cv
269.174 262.736 270.455 262.495 271.801 261.567 cv
273.147 260.639 274.448 259.1 275.417 257.288 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
275.417 257.288 mo
276.387 255.476 276.946 253.54 276.972 251.905 cv
276.997 250.271 276.487 249.072 275.554 248.572 cv
274.62 248.073 273.34 248.313 271.994 249.241 cv
270.648 250.169 269.347 251.708 268.377 253.52 cv
267.407 255.332 266.848 257.268 266.822 258.903 cv
266.797 260.537 267.307 261.737 268.241 262.236 cv
269.174 262.736 270.455 262.495 271.801 261.567 cv
273.147 260.639 274.448 259.1 275.417 257.288 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
266.825 291.046 mo
268.119 288.628 268.959 286.094 269.161 284.002 cv
269.362 281.911 268.908 280.432 267.899 279.892 cv
266.889 279.351 265.407 279.794 263.778 281.122 cv
262.15 282.449 260.507 284.554 259.213 286.972 cv
257.919 289.39 257.079 291.924 256.877 294.015 cv
256.676 296.107 257.13 297.586 258.139 298.126 cv
259.149 298.666 260.631 298.224 262.26 296.896 cv
263.888 295.568 265.531 293.464 266.825 291.046 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
266.825 291.046 mo
268.119 288.628 268.959 286.094 269.161 284.002 cv
269.362 281.911 268.908 280.432 267.899 279.892 cv
266.889 279.351 265.407 279.794 263.778 281.122 cv
262.15 282.449 260.507 284.554 259.213 286.972 cv
257.919 289.39 257.079 291.924 256.877 294.015 cv
256.676 296.107 257.13 297.586 258.139 298.126 cv
259.149 298.666 260.631 298.224 262.26 296.896 cv
263.888 295.568 265.531 293.464 266.825 291.046 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
247.939 245.526 mo
250.126 243.732 251.692 241.363 252.291 238.941 cv
252.891 236.518 252.476 234.239 251.137 232.607 cv
249.798 230.974 247.645 230.121 245.151 230.235 cv
242.658 230.348 240.029 231.42 237.842 233.214 cv
235.655 235.007 234.089 237.376 233.489 239.799 cv
232.889 242.221 233.305 244.5 234.644 246.133 cv
235.983 247.765 238.136 248.619 240.629 248.505 cv
243.122 248.391 245.752 247.319 247.939 245.526 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
247.939 245.526 mo
250.126 243.732 251.692 241.363 252.291 238.941 cv
252.891 236.518 252.476 234.239 251.137 232.607 cv
249.798 230.974 247.645 230.121 245.151 230.235 cv
242.658 230.348 240.029 231.42 237.842 233.214 cv
235.655 235.007 234.089 237.376 233.489 239.799 cv
232.889 242.221 233.305 244.5 234.644 246.133 cv
235.983 247.765 238.136 248.619 240.629 248.505 cv
243.122 248.391 245.752 247.319 247.939 245.526 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
182.53 292.518 mo
181.827 291.66 180.833 291.097 179.769 290.954 cv
178.704 290.812 177.655 291.101 176.852 291.758 cv
176.049 292.415 175.559 293.387 175.488 294.459 cv
175.418 295.531 175.774 296.616 176.477 297.474 cv
177.18 298.333 178.173 298.896 179.238 299.038 cv
180.303 299.181 181.352 298.892 182.154 298.234 cv
182.957 297.577 183.448 296.606 183.518 295.534 cv
183.588 294.462 183.233 293.377 182.53 292.518 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
182.53 292.518 mo
181.827 291.66 180.833 291.097 179.769 290.954 cv
178.704 290.812 177.655 291.101 176.852 291.758 cv
176.049 292.415 175.559 293.387 175.488 294.459 cv
175.418 295.531 175.774 296.616 176.477 297.474 cv
177.18 298.333 178.173 298.896 179.238 299.038 cv
180.303 299.181 181.352 298.892 182.154 298.234 cv
182.957 297.577 183.448 296.606 183.518 295.534 cv
183.588 294.462 183.233 293.377 182.53 292.518 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
248.161 262.817 mo
247.418 260.357 246.277 258.126 244.991 256.616 cv
243.704 255.106 242.377 254.44 241.302 254.765 cv
240.227 255.09 239.491 256.379 239.257 258.349 cv
239.022 260.319 239.309 262.808 240.053 265.269 cv
240.797 267.729 241.937 269.96 243.224 271.471 cv
244.51 272.981 245.837 273.646 246.912 273.321 cv
247.987 272.996 248.723 271.707 248.957 269.737 cv
249.192 267.767 248.905 265.278 248.161 262.817 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
248.161 262.817 mo
247.418 260.357 246.277 258.126 244.991 256.616 cv
243.704 255.106 242.377 254.44 241.302 254.765 cv
240.227 255.09 239.491 256.379 239.257 258.349 cv
239.022 260.319 239.309 262.808 240.053 265.269 cv
240.797 267.729 241.937 269.96 243.224 271.471 cv
244.51 272.981 245.837 273.646 246.912 273.321 cv
247.987 272.996 248.723 271.707 248.957 269.737 cv
249.192 267.767 248.905 265.278 248.161 262.817 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
219.856 322.668 mo
218.923 322.574 217.991 322.853 217.265 323.441 cv
216.54 324.029 216.08 324.88 215.988 325.805 cv
215.895 326.73 216.177 327.655 216.772 328.375 cv
217.366 329.096 218.225 329.553 219.158 329.646 cv
220.091 329.74 221.023 329.462 221.749 328.873 cv
222.474 328.285 222.934 327.435 223.027 326.509 cv
223.119 325.584 222.837 324.659 222.243 323.939 cv
221.648 323.218 220.79 322.761 219.856 322.668 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
219.856 322.668 mo
218.923 322.574 217.991 322.853 217.265 323.441 cv
216.54 324.029 216.08 324.88 215.988 325.805 cv
215.895 326.73 216.177 327.655 216.772 328.375 cv
217.366 329.096 218.225 329.553 219.158 329.646 cv
220.091 329.74 221.023 329.462 221.749 328.873 cv
222.474 328.285 222.934 327.435 223.027 326.509 cv
223.119 325.584 222.837 324.659 222.243 323.939 cv
221.648 323.218 220.79 322.761 219.856 322.668 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
268.247 212.996 mo
267.108 211.606 265.565 210.641 263.957 210.315 cv
262.35 209.989 260.808 210.328 259.673 211.257 cv
258.538 212.186 257.902 213.63 257.904 215.271 cv
257.907 216.911 258.548 218.614 259.687 220.005 cv
260.825 221.396 262.368 222.36 263.976 222.686 cv
265.584 223.013 267.125 222.674 268.26 221.744 cv
269.395 220.815 270.031 219.371 270.029 217.73 cv
270.026 216.09 269.385 214.387 268.247 212.996 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
268.247 212.996 mo
267.108 211.606 265.565 210.641 263.957 210.315 cv
262.35 209.989 260.808 210.328 259.673 211.257 cv
258.538 212.186 257.902 213.63 257.904 215.271 cv
257.907 216.911 258.548 218.614 259.687 220.005 cv
260.825 221.396 262.368 222.36 263.976 222.686 cv
265.584 223.013 267.125 222.674 268.26 221.744 cv
269.395 220.815 270.031 219.371 270.029 217.73 cv
270.026 216.09 269.385 214.387 268.247 212.996 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
203.556 326.723 mo
203.683 325.448 203.352 324.179 202.636 323.197 cv
201.92 322.216 200.877 321.6 199.738 321.487 cv
198.599 321.374 197.456 321.773 196.561 322.595 cv
195.666 323.417 195.092 324.595 194.965 325.87 cv
194.839 327.146 195.17 328.414 195.886 329.396 cv
196.602 330.378 197.644 330.993 198.783 331.106 cv
199.923 331.219 201.066 330.821 201.961 329.999 cv
202.856 329.177 203.43 327.999 203.556 326.723 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
203.556 326.723 mo
203.683 325.448 203.352 324.179 202.636 323.197 cv
201.92 322.216 200.877 321.6 199.738 321.487 cv
198.599 321.374 197.456 321.773 196.561 322.595 cv
195.666 323.417 195.092 324.595 194.965 325.87 cv
194.839 327.146 195.17 328.414 195.886 329.396 cv
196.602 330.378 197.644 330.993 198.783 331.106 cv
199.923 331.219 201.066 330.821 201.961 329.999 cv
202.856 329.177 203.43 327.999 203.556 326.723 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
306.552 228.325 mo
308.17 225.301 309.292 222.17 309.669 219.621 cv
310.046 217.072 309.648 215.313 308.563 214.733 cv
307.478 214.152 305.794 214.796 303.883 216.524 cv
301.971 218.252 299.987 220.921 298.369 223.945 cv
296.75 226.969 295.629 230.101 295.252 232.65 cv
294.875 235.198 295.273 236.957 296.358 237.538 cv
297.443 238.118 299.126 237.474 301.038 235.746 cv
302.95 234.019 304.933 231.349 306.552 228.325 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
306.552 228.325 mo
308.17 225.301 309.292 222.17 309.669 219.621 cv
310.046 217.072 309.648 215.313 308.563 214.733 cv
307.478 214.152 305.794 214.796 303.883 216.524 cv
301.971 218.252 299.987 220.921 298.369 223.945 cv
296.75 226.969 295.629 230.101 295.252 232.65 cv
294.875 235.198 295.273 236.957 296.358 237.538 cv
297.443 238.118 299.126 237.474 301.038 235.746 cv
302.95 234.019 304.933 231.349 306.552 228.325 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
215.403 306.276 mo
217.022 303.252 218.143 300.121 218.52 297.572 cv
218.897 295.023 218.5 293.264 217.414 292.684 cv
216.329 292.103 214.646 292.747 212.734 294.475 cv
210.822 296.202 208.839 298.872 207.22 301.896 cv
205.602 304.92 204.48 308.052 204.103 310.6 cv
203.726 313.149 204.124 314.908 205.209 315.489 cv
206.294 316.069 207.978 315.425 209.889 313.697 cv
211.801 311.97 213.785 309.3 215.403 306.276 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
215.403 306.276 mo
217.022 303.252 218.143 300.121 218.52 297.572 cv
218.897 295.023 218.5 293.264 217.414 292.684 cv
216.329 292.103 214.646 292.747 212.734 294.475 cv
210.822 296.202 208.839 298.872 207.22 301.896 cv
205.602 304.92 204.48 308.052 204.103 310.6 cv
203.726 313.149 204.124 314.908 205.209 315.489 cv
206.294 316.069 207.978 315.425 209.889 313.697 cv
211.801 311.97 213.785 309.3 215.403 306.276 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
308.913 316.302 mo
305.927 316.004 302.976 316.594 300.709 317.944 cv
298.442 319.294 297.044 321.293 296.823 323.501 cv
296.602 325.709 297.576 327.945 299.531 329.718 cv
301.486 331.49 304.261 332.654 307.247 332.952 cv
310.232 333.251 313.183 332.66 315.45 331.31 cv
317.718 329.961 319.116 327.961 319.336 325.754 cv
319.557 323.546 318.583 321.309 316.628 319.537 cv
314.674 317.765 311.898 316.601 308.913 316.302 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
308.913 316.302 mo
305.927 316.004 302.976 316.594 300.709 317.944 cv
298.442 319.294 297.044 321.293 296.823 323.501 cv
296.602 325.709 297.576 327.945 299.531 329.718 cv
301.486 331.49 304.261 332.654 307.247 332.952 cv
310.232 333.251 313.183 332.66 315.45 331.31 cv
317.718 329.961 319.116 327.961 319.336 325.754 cv
319.557 323.546 318.583 321.309 316.628 319.537 cv
314.674 317.765 311.898 316.601 308.913 316.302 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
274.01 322.417 mo
274.341 319.089 273.695 315.802 272.216 313.279 cv
270.737 310.756 268.546 309.204 266.124 308.963 cv
263.702 308.723 261.248 309.815 259.302 311.998 cv
257.356 314.181 256.077 317.277 255.747 320.604 cv
255.417 323.932 256.062 327.219 257.541 329.742 cv
259.02 332.265 261.212 333.818 263.633 334.058 cv
266.055 334.298 268.509 333.207 270.455 331.024 cv
272.401 328.841 273.68 325.745 274.01 322.417 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
274.01 322.417 mo
274.341 319.089 273.695 315.802 272.216 313.279 cv
270.737 310.756 268.546 309.204 266.124 308.963 cv
263.702 308.723 261.248 309.815 259.302 311.998 cv
257.356 314.181 256.077 317.277 255.747 320.604 cv
255.417 323.932 256.062 327.219 257.541 329.742 cv
259.02 332.265 261.212 333.818 263.633 334.058 cv
266.055 334.298 268.509 333.207 270.455 331.024 cv
272.401 328.841 273.68 325.745 274.01 322.417 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
259.115 283.434 mo
259.378 280.79 258.837 278.176 257.613 276.166 cv
256.388 274.157 254.579 272.917 252.585 272.719 cv
250.591 272.521 248.574 273.382 246.978 275.111 cv
245.382 276.84 244.338 279.297 244.076 281.941 cv
243.814 284.584 244.354 287.199 245.579 289.208 cv
246.804 291.217 248.612 292.457 250.606 292.655 cv
252.601 292.853 254.618 291.993 256.213 290.263 cv
257.809 288.534 258.853 286.077 259.115 283.434 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
259.115 283.434 mo
259.378 280.79 258.837 278.176 257.613 276.166 cv
256.388 274.157 254.579 272.917 252.585 272.719 cv
250.591 272.521 248.574 273.382 246.978 275.111 cv
245.382 276.84 244.338 279.297 244.076 281.941 cv
243.814 284.584 244.354 287.199 245.579 289.208 cv
246.804 291.217 248.612 292.457 250.606 292.655 cv
252.601 292.853 254.618 291.993 256.213 290.263 cv
257.809 288.534 258.853 286.077 259.115 283.434 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
253.662 220.554 mo
255.318 219.196 256.482 217.377 256.898 215.497 cv
257.315 213.618 256.95 211.831 255.883 210.531 cv
254.817 209.23 253.136 208.522 251.211 208.563 cv
249.287 208.603 247.275 209.389 245.619 210.746 cv
243.964 212.104 242.8 213.923 242.383 215.803 cv
241.967 217.682 242.332 219.469 243.399 220.769 cv
244.465 222.07 246.146 222.778 248.07 222.737 cv
249.995 222.697 252.007 221.911 253.662 220.554 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
253.662 220.554 mo
255.318 219.196 256.482 217.377 256.898 215.497 cv
257.315 213.618 256.95 211.831 255.883 210.531 cv
254.817 209.23 253.136 208.522 251.211 208.563 cv
249.287 208.603 247.275 209.389 245.619 210.746 cv
243.964 212.104 242.8 213.923 242.383 215.803 cv
241.967 217.682 242.332 219.469 243.399 220.769 cv
244.465 222.07 246.146 222.778 248.07 222.737 cv
249.995 222.697 252.007 221.911 253.662 220.554 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
238.376 249.374 mo
237.474 248.891 236.434 248.752 235.485 248.989 cv
234.536 249.227 233.756 249.821 233.317 250.64 cv
232.877 251.46 232.814 252.438 233.141 253.36 cv
233.469 254.282 234.16 255.071 235.062 255.555 cv
235.965 256.039 237.005 256.178 237.954 255.94 cv
238.902 255.703 239.682 255.109 240.122 254.289 cv
240.561 253.47 240.624 252.492 240.297 251.57 cv
239.97 250.648 239.279 249.858 238.376 249.374 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
238.376 249.374 mo
237.474 248.891 236.434 248.752 235.485 248.989 cv
234.536 249.227 233.756 249.821 233.317 250.64 cv
232.877 251.46 232.814 252.438 233.141 253.36 cv
233.469 254.282 234.16 255.071 235.062 255.555 cv
235.965 256.039 237.005 256.178 237.954 255.94 cv
238.902 255.703 239.682 255.109 240.122 254.289 cv
240.561 253.47 240.624 252.492 240.297 251.57 cv
239.97 250.648 239.279 249.858 238.376 249.374 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
286.838 353.918 mo
285.905 353.824 284.972 354.102 284.247 354.691 cv
283.522 355.279 283.062 356.13 282.969 357.055 cv
282.877 357.98 283.159 358.905 283.753 359.625 cv
284.348 360.346 285.206 360.803 286.14 360.896 cv
287.073 360.99 288.005 360.711 288.731 360.123 cv
289.456 359.535 289.916 358.684 290.008 357.759 cv
290.101 356.834 289.819 355.909 289.224 355.189 cv
288.63 354.468 287.771 354.011 286.838 353.918 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
286.838 353.918 mo
285.905 353.824 284.972 354.102 284.247 354.691 cv
283.522 355.279 283.062 356.13 282.969 357.055 cv
282.877 357.98 283.159 358.905 283.753 359.625 cv
284.348 360.346 285.206 360.803 286.14 360.896 cv
287.073 360.99 288.005 360.711 288.731 360.123 cv
289.456 359.535 289.916 358.684 290.008 357.759 cv
290.101 356.834 289.819 355.909 289.224 355.189 cv
288.63 354.468 287.771 354.011 286.838 353.918 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
237.777 287.689 mo
240.495 285.46 242.462 282.541 243.245 279.575 cv
244.028 276.609 243.563 273.839 241.951 271.874 cv
240.34 269.909 237.714 268.91 234.653 269.097 cv
231.591 269.284 228.343 270.642 225.625 272.871 cv
222.906 275.101 220.939 278.02 220.156 280.986 cv
219.373 283.952 219.839 286.722 221.45 288.687 cv
223.061 290.652 225.687 291.651 228.749 291.463 cv
231.81 291.276 235.058 289.919 237.777 287.689 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
237.777 287.689 mo
240.495 285.46 242.462 282.541 243.245 279.575 cv
244.028 276.609 243.563 273.839 241.951 271.874 cv
240.34 269.909 237.714 268.91 234.653 269.097 cv
231.591 269.284 228.343 270.642 225.625 272.871 cv
222.906 275.101 220.939 278.02 220.156 280.986 cv
219.373 283.952 219.839 286.722 221.45 288.687 cv
223.061 290.652 225.687 291.651 228.749 291.463 cv
231.81 291.276 235.058 289.919 237.777 287.689 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
361.964 186.182 mo
362.61 184.976 362.888 183.637 362.738 182.46 cv
362.587 181.283 362.021 180.363 361.163 179.904 cv
360.305 179.445 359.226 179.484 358.163 180.012 cv
357.1 180.54 356.141 181.514 355.495 182.72 cv
354.85 183.926 354.572 185.265 354.722 186.442 cv
354.872 187.619 355.439 188.539 356.296 188.998 cv
357.154 189.457 358.233 189.418 359.296 188.89 cv
360.359 188.362 361.319 187.388 361.964 186.182 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
361.964 186.182 mo
362.61 184.976 362.888 183.637 362.738 182.46 cv
362.587 181.283 362.021 180.363 361.163 179.904 cv
360.305 179.445 359.226 179.484 358.163 180.012 cv
357.1 180.54 356.141 181.514 355.495 182.72 cv
354.85 183.926 354.572 185.265 354.722 186.442 cv
354.872 187.619 355.439 188.539 356.296 188.998 cv
357.154 189.457 358.233 189.418 359.296 188.89 cv
360.359 188.362 361.319 187.388 361.964 186.182 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
163.335 285.97 mo
162.196 284.579 160.653 283.615 159.045 283.289 cv
157.437 282.962 155.896 283.301 154.761 284.231 cv
153.626 285.16 152.99 286.604 152.992 288.244 cv
152.995 289.885 153.636 291.588 154.774 292.979 cv
155.913 294.369 157.456 295.334 159.064 295.66 cv
160.672 295.986 162.213 295.647 163.348 294.718 cv
164.483 293.789 165.119 292.345 165.117 290.704 cv
165.114 289.064 164.473 287.361 163.335 285.97 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
163.335 285.97 mo
162.196 284.579 160.653 283.615 159.045 283.289 cv
157.437 282.962 155.896 283.301 154.761 284.231 cv
153.626 285.16 152.99 286.604 152.992 288.244 cv
152.995 289.885 153.636 291.588 154.774 292.979 cv
155.913 294.369 157.456 295.334 159.064 295.66 cv
160.672 295.986 162.213 295.647 163.348 294.718 cv
164.483 293.789 165.119 292.345 165.117 290.704 cv
165.114 289.064 164.473 287.361 163.335 285.97 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
185.285 326.792 mo
188.074 325.946 190.614 324.692 192.347 323.305 cv
194.08 321.918 194.863 320.511 194.525 319.395 cv
194.187 318.279 192.754 317.544 190.543 317.353 cv
188.331 317.162 185.522 317.53 182.733 318.375 cv
179.944 319.221 177.403 320.475 175.67 321.862 cv
173.938 323.249 173.154 324.656 173.493 325.772 cv
173.831 326.888 175.264 327.623 177.475 327.814 cv
179.686 328.005 182.496 327.638 185.285 326.792 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
185.285 326.792 mo
188.074 325.946 190.614 324.692 192.347 323.305 cv
194.08 321.918 194.863 320.511 194.525 319.395 cv
194.187 318.279 192.754 317.544 190.543 317.353 cv
188.331 317.162 185.522 317.53 182.733 318.375 cv
179.944 319.221 177.403 320.475 175.67 321.862 cv
173.938 323.249 173.154 324.656 173.493 325.772 cv
173.831 326.888 175.264 327.623 177.475 327.814 cv
179.686 328.005 182.496 327.638 185.285 326.792 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
338.729 281.82 mo
340.916 280.027 342.481 277.658 343.081 275.235 cv
343.681 272.813 343.265 270.534 341.926 268.901 cv
340.588 267.269 338.434 266.415 335.941 266.529 cv
333.448 266.643 330.818 267.715 328.631 269.508 cv
326.444 271.302 324.878 273.671 324.279 276.093 cv
323.679 278.516 324.094 280.795 325.433 282.427 cv
326.772 284.06 328.925 284.913 331.419 284.799 cv
333.912 284.686 336.542 283.614 338.729 281.82 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
338.729 281.82 mo
340.916 280.027 342.481 277.658 343.081 275.235 cv
343.681 272.813 343.265 270.534 341.926 268.901 cv
340.588 267.269 338.434 266.415 335.941 266.529 cv
333.448 266.643 330.818 267.715 328.631 269.508 cv
326.444 271.302 324.878 273.671 324.279 276.093 cv
323.679 278.516 324.094 280.795 325.433 282.427 cv
326.772 284.06 328.925 284.913 331.419 284.799 cv
333.912 284.686 336.542 283.614 338.729 281.82 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
259.719 300.839 mo
258.21 300.03 256.573 299.61 255.167 299.671 cv
253.761 299.732 252.701 300.27 252.221 301.165 cv
251.741 302.06 251.88 303.24 252.607 304.445 cv
253.334 305.65 254.59 306.782 256.098 307.59 cv
257.606 308.399 259.244 308.819 260.65 308.758 cv
262.055 308.697 263.115 308.159 263.595 307.264 cv
264.075 306.369 263.937 305.189 263.21 303.984 cv
262.483 302.779 261.227 301.647 259.719 300.839 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
259.719 300.839 mo
258.21 300.03 256.573 299.61 255.167 299.671 cv
253.761 299.732 252.701 300.27 252.221 301.165 cv
251.741 302.06 251.88 303.24 252.607 304.445 cv
253.334 305.65 254.59 306.782 256.098 307.59 cv
257.606 308.399 259.244 308.819 260.65 308.758 cv
262.055 308.697 263.115 308.159 263.595 307.264 cv
264.075 306.369 263.937 305.189 263.21 303.984 cv
262.483 302.779 261.227 301.647 259.719 300.839 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
180.049 275.735 mo
181.668 272.711 182.789 269.58 183.166 267.031 cv
183.543 264.482 183.146 262.724 182.061 262.143 cv
180.976 261.562 179.292 262.207 177.38 263.934 cv
175.468 265.662 173.485 268.332 171.866 271.356 cv
170.248 274.38 169.127 277.511 168.749 280.06 cv
168.372 282.609 168.77 284.367 169.855 284.948 cv
170.94 285.529 172.624 284.884 174.536 283.157 cv
176.447 281.429 178.431 278.759 180.049 275.735 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
180.049 275.735 mo
181.668 272.711 182.789 269.58 183.166 267.031 cv
183.543 264.482 183.146 262.724 182.061 262.143 cv
180.976 261.562 179.292 262.207 177.38 263.934 cv
175.468 265.662 173.485 268.332 171.866 271.356 cv
170.248 274.38 169.127 277.511 168.749 280.06 cv
168.372 282.609 168.77 284.367 169.855 284.948 cv
170.94 285.529 172.624 284.884 174.536 283.157 cv
176.447 281.429 178.431 278.759 180.049 275.735 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
318.719 259.82 mo
316 258.362 313.168 257.378 310.848 257.087 cv
308.528 256.796 306.909 257.221 306.347 258.268 cv
305.786 259.314 306.328 260.898 307.854 262.669 cv
309.381 264.441 311.766 266.255 314.486 267.714 cv
317.206 269.172 320.038 270.155 322.358 270.447 cv
324.678 270.738 326.297 270.313 326.858 269.266 cv
327.42 268.22 326.877 266.636 325.351 264.865 cv
323.825 263.093 321.439 261.278 318.719 259.82 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
318.719 259.82 mo
316 258.362 313.168 257.378 310.848 257.087 cv
308.528 256.796 306.909 257.221 306.347 258.268 cv
305.786 259.314 306.328 260.898 307.854 262.669 cv
309.381 264.441 311.766 266.255 314.486 267.714 cv
317.206 269.172 320.038 270.155 322.358 270.447 cv
324.678 270.738 326.297 270.313 326.858 269.266 cv
327.42 268.22 326.877 266.636 325.351 264.865 cv
323.825 263.093 321.439 261.278 318.719 259.82 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
232.668 208.726 mo
229.948 207.268 227.116 206.285 224.796 205.994 cv
222.476 205.702 220.857 206.127 220.296 207.174 cv
219.735 208.221 220.277 209.804 221.803 211.575 cv
223.329 213.347 225.715 215.162 228.435 216.62 cv
231.155 218.079 233.986 219.062 236.307 219.353 cv
238.627 219.644 240.246 219.219 240.807 218.173 cv
241.368 217.126 240.826 215.542 239.3 213.771 cv
237.774 211.999 235.388 210.185 232.668 208.726 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
232.668 208.726 mo
229.948 207.268 227.116 206.285 224.796 205.994 cv
222.476 205.702 220.857 206.127 220.296 207.174 cv
219.735 208.221 220.277 209.804 221.803 211.575 cv
223.329 213.347 225.715 215.162 228.435 216.62 cv
231.155 218.079 233.986 219.062 236.307 219.353 cv
238.627 219.644 240.246 219.219 240.807 218.173 cv
241.368 217.126 240.826 215.542 239.3 213.771 cv
237.774 211.999 235.388 210.185 232.668 208.726 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
258.699 254.527 mo
262.146 253.482 265.307 252.003 267.488 250.417 cv
269.668 248.831 270.689 247.266 270.326 246.068 cv
269.962 244.869 268.245 244.135 265.55 244.027 cv
262.856 243.918 259.406 244.445 255.959 245.49 cv
252.512 246.535 249.35 248.013 247.17 249.599 cv
244.99 251.186 243.969 252.75 244.332 253.949 cv
244.695 255.147 246.413 255.881 249.107 255.99 cv
251.802 256.098 255.252 255.572 258.699 254.527 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
258.699 254.527 mo
262.146 253.482 265.307 252.003 267.488 250.417 cv
269.668 248.831 270.689 247.266 270.326 246.068 cv
269.962 244.869 268.245 244.135 265.55 244.027 cv
262.856 243.918 259.406 244.445 255.959 245.49 cv
252.512 246.535 249.35 248.013 247.17 249.599 cv
244.99 251.186 243.969 252.75 244.332 253.949 cv
244.695 255.147 246.413 255.881 249.107 255.99 cv
251.802 256.098 255.252 255.572 258.699 254.527 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
264.772 242.827 mo
267.561 241.982 270.102 240.727 271.835 239.34 cv
273.568 237.953 274.351 236.547 274.013 235.43 cv
273.674 234.314 272.242 233.58 270.03 233.388 cv
267.819 233.197 265.009 233.565 262.22 234.41 cv
259.431 235.256 256.891 236.51 255.158 237.898 cv
253.425 239.285 252.642 240.691 252.98 241.807 cv
253.318 242.923 254.751 243.658 256.962 243.849 cv
259.174 244.04 261.983 243.673 264.772 242.827 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
264.772 242.827 mo
267.561 241.982 270.102 240.727 271.835 239.34 cv
273.568 237.953 274.351 236.547 274.013 235.43 cv
273.674 234.314 272.242 233.58 270.03 233.388 cv
267.819 233.197 265.009 233.565 262.22 234.41 cv
259.431 235.256 256.891 236.51 255.158 237.898 cv
253.425 239.285 252.642 240.691 252.98 241.807 cv
253.318 242.923 254.751 243.658 256.962 243.849 cv
259.174 244.04 261.983 243.673 264.772 242.827 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
233.433 293.671 mo
231.924 292.863 230.287 292.443 228.881 292.504 cv
227.475 292.565 226.416 293.103 225.935 293.998 cv
225.455 294.893 225.594 296.073 226.321 297.278 cv
227.048 298.483 228.304 299.615 229.812 300.423 cv
231.32 301.232 232.958 301.652 234.364 301.591 cv
235.769 301.53 236.829 300.992 237.309 300.097 cv
237.789 299.202 237.651 298.022 236.924 296.817 cv
236.197 295.612 234.941 294.48 233.433 293.671 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
233.433 293.671 mo
231.924 292.863 230.287 292.443 228.881 292.504 cv
227.475 292.565 226.416 293.103 225.935 293.998 cv
225.455 294.893 225.594 296.073 226.321 297.278 cv
227.048 298.483 228.304 299.615 229.812 300.423 cv
231.32 301.232 232.958 301.652 234.364 301.591 cv
235.769 301.53 236.829 300.992 237.309 300.097 cv
237.789 299.202 237.651 298.022 236.924 296.817 cv
236.197 295.612 234.941 294.48 233.433 293.671 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
299.206 263.256 mo
299.4 261.297 298.964 259.355 297.994 257.86 cv
297.024 256.364 295.598 255.437 294.031 255.281 cv
292.465 255.126 290.885 255.755 289.639 257.031 cv
288.394 258.306 287.585 260.124 287.391 262.083 cv
287.196 264.043 287.632 265.984 288.602 267.48 cv
289.573 268.975 290.998 269.903 292.565 270.058 cv
294.132 270.214 295.712 269.585 296.957 268.309 cv
298.202 267.033 299.011 265.216 299.206 263.256 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
299.206 263.256 mo
299.4 261.297 298.964 259.355 297.994 257.86 cv
297.024 256.364 295.598 255.437 294.031 255.281 cv
292.465 255.126 290.885 255.755 289.639 257.031 cv
288.394 258.306 287.585 260.124 287.391 262.083 cv
287.196 264.043 287.632 265.984 288.602 267.48 cv
289.573 268.975 290.998 269.903 292.565 270.058 cv
294.132 270.214 295.712 269.585 296.957 268.309 cv
298.202 267.033 299.011 265.216 299.206 263.256 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
206.261 299.098 mo
206.591 295.771 205.946 292.484 204.467 289.961 cv
202.988 287.438 200.796 285.885 198.374 285.645 cv
195.953 285.404 193.498 286.496 191.552 288.679 cv
189.606 290.862 188.328 293.958 187.997 297.286 cv
187.667 300.613 188.312 303.901 189.791 306.424 cv
191.27 308.947 193.462 310.499 195.884 310.74 cv
198.306 310.98 200.76 309.888 202.706 307.705 cv
204.652 305.522 205.931 302.426 206.261 299.098 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
206.261 299.098 mo
206.591 295.771 205.946 292.484 204.467 289.961 cv
202.988 287.438 200.796 285.885 198.374 285.645 cv
195.953 285.404 193.498 286.496 191.552 288.679 cv
189.606 290.862 188.328 293.958 187.997 297.286 cv
187.667 300.613 188.312 303.901 189.791 306.424 cv
191.27 308.947 193.462 310.499 195.884 310.74 cv
198.306 310.98 200.76 309.888 202.706 307.705 cv
204.652 305.522 205.931 302.426 206.261 299.098 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
265.078 197.072 mo
267.797 194.843 269.764 191.924 270.547 188.958 cv
271.33 185.992 270.864 183.222 269.253 181.257 cv
267.642 179.292 265.016 178.293 261.954 178.48 cv
258.892 178.668 255.645 180.025 252.926 182.255 cv
250.208 184.484 248.24 187.403 247.457 190.369 cv
246.675 193.335 247.14 196.105 248.751 198.07 cv
250.363 200.035 252.988 201.034 256.05 200.847 cv
259.112 200.66 262.36 199.302 265.078 197.072 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
265.078 197.072 mo
267.797 194.843 269.764 191.924 270.547 188.958 cv
271.33 185.992 270.864 183.222 269.253 181.257 cv
267.642 179.292 265.016 178.293 261.954 178.48 cv
258.892 178.668 255.645 180.025 252.926 182.255 cv
250.208 184.484 248.24 187.403 247.457 190.369 cv
246.675 193.335 247.14 196.105 248.751 198.07 cv
250.363 200.035 252.988 201.034 256.05 200.847 cv
259.112 200.66 262.36 199.302 265.078 197.072 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
198.589 248.097 mo
201.308 245.867 203.275 242.948 204.058 239.982 cv
204.841 237.016 204.375 234.246 202.764 232.281 cv
201.153 230.316 198.527 229.317 195.465 229.505 cv
192.404 229.692 189.156 231.049 186.437 233.279 cv
183.719 235.508 181.751 238.427 180.968 241.393 cv
180.186 244.359 180.651 247.129 182.262 249.094 cv
183.874 251.059 186.499 252.058 189.561 251.871 cv
192.623 251.684 195.871 250.326 198.589 248.097 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
198.589 248.097 mo
201.308 245.867 203.275 242.948 204.058 239.982 cv
204.841 237.016 204.375 234.246 202.764 232.281 cv
201.153 230.316 198.527 229.317 195.465 229.505 cv
192.404 229.692 189.156 231.049 186.437 233.279 cv
183.719 235.508 181.751 238.427 180.968 241.393 cv
180.186 244.359 180.651 247.129 182.262 249.094 cv
183.874 251.059 186.499 252.058 189.561 251.871 cv
192.623 251.684 195.871 250.326 198.589 248.097 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
278.867 222.187 mo
279.991 221.265 280.753 219.996 280.987 218.66 cv
281.22 217.324 280.905 216.029 280.111 215.06 cv
279.317 214.092 278.109 213.53 276.752 213.497 cv
275.396 213.464 274.003 213.963 272.879 214.885 cv
271.755 215.807 270.992 217.076 270.759 218.412 cv
270.526 219.749 270.841 221.044 271.635 222.012 cv
272.429 222.98 273.637 223.542 274.993 223.575 cv
276.349 223.608 277.743 223.109 278.867 222.187 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
278.867 222.187 mo
279.991 221.265 280.753 219.996 280.987 218.66 cv
281.22 217.324 280.905 216.029 280.111 215.06 cv
279.317 214.092 278.109 213.53 276.752 213.497 cv
275.396 213.464 274.003 213.963 272.879 214.885 cv
271.755 215.807 270.992 217.076 270.759 218.412 cv
270.526 219.749 270.841 221.044 271.635 222.012 cv
272.429 222.98 273.637 223.542 274.993 223.575 cv
276.349 223.608 277.743 223.109 278.867 222.187 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
328.301 213.905 mo
327.557 211.445 326.416 209.214 325.13 207.703 cv
323.843 206.193 322.516 205.528 321.441 205.853 cv
320.366 206.178 319.63 207.467 319.396 209.437 cv
319.162 211.407 319.448 213.896 320.192 216.357 cv
320.936 218.817 322.076 221.048 323.363 222.558 cv
324.649 224.068 325.976 224.734 327.051 224.409 cv
328.126 224.084 328.862 222.795 329.096 220.825 cv
329.331 218.855 329.044 216.366 328.301 213.905 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
328.301 213.905 mo
327.557 211.445 326.416 209.214 325.13 207.703 cv
323.843 206.193 322.516 205.528 321.441 205.853 cv
320.366 206.178 319.63 207.467 319.396 209.437 cv
319.162 211.407 319.448 213.896 320.192 216.357 cv
320.936 218.817 322.076 221.048 323.363 222.558 cv
324.649 224.068 325.976 224.734 327.051 224.409 cv
328.126 224.084 328.862 222.795 329.096 220.825 cv
329.331 218.855 329.044 216.366 328.301 213.905 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
243.363 301.13 mo
240.378 300.831 237.427 301.422 235.16 302.772 cv
232.893 304.122 231.495 306.121 231.274 308.329 cv
231.053 310.536 232.027 312.773 233.982 314.545 cv
235.936 316.318 238.712 317.481 241.698 317.78 cv
244.683 318.079 247.634 317.488 249.901 316.138 cv
252.168 314.788 253.566 312.789 253.787 310.581 cv
254.008 308.373 253.034 306.137 251.079 304.365 cv
249.124 302.592 246.349 301.428 243.363 301.13 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
243.363 301.13 mo
240.378 300.831 237.427 301.422 235.16 302.772 cv
232.893 304.122 231.495 306.121 231.274 308.329 cv
231.053 310.536 232.027 312.773 233.982 314.545 cv
235.936 316.318 238.712 317.481 241.698 317.78 cv
244.683 318.079 247.634 317.488 249.901 316.138 cv
252.168 314.788 253.566 312.789 253.787 310.581 cv
254.008 308.373 253.034 306.137 251.079 304.365 cv
249.124 302.592 246.349 301.428 243.363 301.13 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
245.114 299.866 mo
246.588 299.419 247.886 298.613 248.724 297.624 cv
249.562 296.635 249.87 295.545 249.582 294.593 cv
249.293 293.642 248.431 292.906 247.185 292.549 cv
245.94 292.192 244.412 292.243 242.939 292.689 cv
241.465 293.136 240.167 293.942 239.329 294.931 cv
238.491 295.92 238.183 297.01 238.471 297.962 cv
238.76 298.914 239.622 299.649 240.868 300.006 cv
242.113 300.363 243.641 300.313 245.114 299.866 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
245.114 299.866 mo
246.588 299.419 247.886 298.613 248.724 297.624 cv
249.562 296.635 249.87 295.545 249.582 294.593 cv
249.293 293.642 248.431 292.906 247.185 292.549 cv
245.94 292.192 244.412 292.243 242.939 292.689 cv
241.465 293.136 240.167 293.942 239.329 294.931 cv
238.491 295.92 238.183 297.01 238.471 297.962 cv
238.76 298.914 239.622 299.649 240.868 300.006 cv
242.113 300.363 243.641 300.313 245.114 299.866 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
268.694 230.039 mo
269.339 228.833 269.617 227.494 269.467 226.317 cv
269.317 225.14 268.75 224.22 267.893 223.761 cv
267.035 223.302 265.956 223.341 264.893 223.869 cv
263.83 224.397 262.87 225.371 262.225 226.577 cv
261.579 227.783 261.301 229.122 261.451 230.299 cv
261.601 231.476 262.168 232.395 263.026 232.855 cv
263.883 233.314 264.963 233.275 266.025 232.747 cv
267.088 232.219 268.048 231.245 268.694 230.039 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
268.694 230.039 mo
269.339 228.833 269.617 227.494 269.467 226.317 cv
269.317 225.14 268.75 224.22 267.893 223.761 cv
267.035 223.302 265.956 223.341 264.893 223.869 cv
263.83 224.397 262.87 225.371 262.225 226.577 cv
261.579 227.783 261.301 229.122 261.451 230.299 cv
261.601 231.476 262.168 232.395 263.026 232.855 cv
263.883 233.314 264.963 233.275 266.025 232.747 cv
267.088 232.219 268.048 231.245 268.694 230.039 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
320.59 224.911 mo
319.647 221.792 318.283 218.94 316.798 216.982 cv
315.313 215.024 313.828 214.121 312.67 214.471 cv
311.513 214.821 310.777 216.395 310.625 218.848 cv
310.473 221.301 310.918 224.431 311.861 227.55 cv
312.804 230.668 314.168 233.52 315.653 235.478 cv
317.138 237.436 318.623 238.339 319.78 237.989 cv
320.938 237.64 321.673 236.065 321.825 233.612 cv
321.977 231.16 321.533 228.029 320.59 224.911 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
320.59 224.911 mo
319.647 221.792 318.283 218.94 316.798 216.982 cv
315.313 215.024 313.828 214.121 312.67 214.471 cv
311.513 214.821 310.777 216.395 310.625 218.848 cv
310.473 221.301 310.918 224.431 311.861 227.55 cv
312.804 230.668 314.168 233.52 315.653 235.478 cv
317.138 237.436 318.623 238.339 319.78 237.989 cv
320.938 237.64 321.673 236.065 321.825 233.612 cv
321.977 231.16 321.533 228.029 320.59 224.911 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
288.02 225.459 mo
285.906 224.326 283.671 223.624 281.808 223.509 cv
279.945 223.394 278.606 223.875 278.085 224.846 cv
277.564 225.817 277.905 227.199 279.031 228.687 cv
280.158 230.175 281.979 231.649 284.093 232.782 cv
286.207 233.916 288.442 234.617 290.305 234.732 cv
292.168 234.847 293.507 234.366 294.028 233.395 cv
294.548 232.424 294.208 231.042 293.081 229.554 cv
291.955 228.066 290.134 226.593 288.02 225.459 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
288.02 225.459 mo
285.906 224.326 283.671 223.624 281.808 223.509 cv
279.945 223.394 278.606 223.875 278.085 224.846 cv
277.564 225.817 277.905 227.199 279.031 228.687 cv
280.158 230.175 281.979 231.649 284.093 232.782 cv
286.207 233.916 288.442 234.617 290.305 234.732 cv
292.168 234.847 293.507 234.366 294.028 233.395 cv
294.548 232.424 294.208 231.042 293.081 229.554 cv
291.955 228.066 290.134 226.593 288.02 225.459 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
290.226 243.088 mo
288.652 241.166 286.559 239.799 284.409 239.29 cv
282.258 238.78 280.225 239.168 278.757 240.37 cv
277.29 241.571 276.508 243.488 276.583 245.697 cv
276.658 247.906 277.585 250.227 279.159 252.15 cv
280.733 254.072 282.826 255.439 284.977 255.949 cv
287.128 256.458 289.161 256.07 290.628 254.868 cv
292.096 253.667 292.878 251.75 292.802 249.541 cv
292.727 247.332 291.8 245.011 290.226 243.088 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
290.226 243.088 mo
288.652 241.166 286.559 239.799 284.409 239.29 cv
282.258 238.78 280.225 239.168 278.757 240.37 cv
277.29 241.571 276.508 243.488 276.583 245.697 cv
276.658 247.906 277.585 250.227 279.159 252.15 cv
280.733 254.072 282.826 255.439 284.977 255.949 cv
287.128 256.458 289.161 256.07 290.628 254.868 cv
292.096 253.667 292.878 251.75 292.802 249.541 cv
292.727 247.332 291.8 245.011 290.226 243.088 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
289.735 337.425 mo
289.032 336.567 288.039 336.004 286.974 335.862 cv
285.909 335.719 284.86 336.008 284.057 336.665 cv
283.255 337.323 282.764 338.294 282.694 339.366 cv
282.623 340.438 282.979 341.523 283.682 342.382 cv
284.385 343.24 285.378 343.803 286.443 343.945 cv
287.508 344.088 288.557 343.799 289.36 343.142 cv
290.162 342.484 290.653 341.513 290.723 340.441 cv
290.794 339.369 290.438 338.284 289.735 337.425 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
289.735 337.425 mo
289.032 336.567 288.039 336.004 286.974 335.862 cv
285.909 335.719 284.86 336.008 284.057 336.665 cv
283.255 337.323 282.764 338.294 282.694 339.366 cv
282.623 340.438 282.979 341.523 283.682 342.382 cv
284.385 343.24 285.378 343.803 286.443 343.945 cv
287.508 344.088 288.557 343.799 289.36 343.142 cv
290.162 342.484 290.653 341.513 290.723 340.441 cv
290.794 339.369 290.438 338.284 289.735 337.425 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
231.067 332.34 mo
230.721 331.195 230.027 330.207 229.138 329.592 cv
228.249 328.978 227.238 328.787 226.328 329.062 cv
225.417 329.338 224.681 330.056 224.282 331.06 cv
223.882 332.065 223.852 333.272 224.198 334.416 cv
224.544 335.561 225.238 336.55 226.127 337.164 cv
227.016 337.779 228.027 337.97 228.937 337.694 cv
229.848 337.419 230.584 336.7 230.983 335.696 cv
231.383 334.692 231.413 333.485 231.067 332.34 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
231.067 332.34 mo
230.721 331.195 230.027 330.207 229.138 329.592 cv
228.249 328.978 227.238 328.787 226.328 329.062 cv
225.417 329.338 224.681 330.056 224.282 331.06 cv
223.882 332.065 223.852 333.272 224.198 334.416 cv
224.544 335.561 225.238 336.55 226.127 337.164 cv
227.016 337.779 228.027 337.97 228.937 337.694 cv
229.848 337.419 230.584 336.7 230.983 335.696 cv
231.383 334.692 231.413 333.485 231.067 332.34 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
208.063 339.349 mo
208.257 337.389 207.821 335.448 206.851 333.952 cv
205.881 332.457 204.455 331.529 202.888 331.374 cv
201.322 331.218 199.742 331.847 198.496 333.123 cv
197.251 334.399 196.442 336.216 196.248 338.176 cv
196.053 340.135 196.489 342.077 197.459 343.572 cv
198.43 345.068 199.855 345.995 201.422 346.151 cv
202.989 346.306 204.569 345.677 205.814 344.401 cv
207.059 343.126 207.868 341.308 208.063 339.349 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
208.063 339.349 mo
208.257 337.389 207.821 335.448 206.851 333.952 cv
205.881 332.457 204.455 331.529 202.888 331.374 cv
201.322 331.218 199.742 331.847 198.496 333.123 cv
197.251 334.399 196.442 336.216 196.248 338.176 cv
196.053 340.135 196.489 342.077 197.459 343.572 cv
198.43 345.068 199.855 345.995 201.422 346.151 cv
202.989 346.306 204.569 345.677 205.814 344.401 cv
207.059 343.126 207.868 341.308 208.063 339.349 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
273.876 224.034 mo
272.943 223.94 272.011 224.219 271.285 224.807 cv
270.56 225.395 270.1 226.246 270.008 227.171 cv
269.915 228.096 270.197 229.021 270.792 229.741 cv
271.386 230.462 272.245 230.919 273.178 231.012 cv
274.111 231.106 275.043 230.828 275.769 230.239 cv
276.494 229.651 276.954 228.801 277.047 227.875 cv
277.139 226.95 276.857 226.025 276.263 225.305 cv
275.668 224.584 274.81 224.127 273.876 224.034 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
273.876 224.034 mo
272.943 223.94 272.011 224.219 271.285 224.807 cv
270.56 225.395 270.1 226.246 270.008 227.171 cv
269.915 228.096 270.197 229.021 270.792 229.741 cv
271.386 230.462 272.245 230.919 273.178 231.012 cv
274.111 231.106 275.043 230.828 275.769 230.239 cv
276.494 229.651 276.954 228.801 277.047 227.875 cv
277.139 226.95 276.857 226.025 276.263 225.305 cv
275.668 224.584 274.81 224.127 273.876 224.034 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
232.22 321.043 mo
230.106 319.91 227.871 319.208 226.008 319.093 cv
224.145 318.978 222.806 319.459 222.285 320.43 cv
221.764 321.401 222.105 322.783 223.231 324.271 cv
224.358 325.759 226.179 327.233 228.293 328.366 cv
230.407 329.5 232.641 330.201 234.504 330.316 cv
236.368 330.431 237.707 329.95 238.228 328.979 cv
238.748 328.008 238.408 326.626 237.281 325.138 cv
236.155 323.65 234.334 322.177 232.22 321.043 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
232.22 321.043 mo
230.106 319.91 227.871 319.208 226.008 319.093 cv
224.145 318.978 222.806 319.459 222.285 320.43 cv
221.764 321.401 222.105 322.783 223.231 324.271 cv
224.358 325.759 226.179 327.233 228.293 328.366 cv
230.407 329.5 232.641 330.201 234.504 330.316 cv
236.368 330.431 237.707 329.95 238.228 328.979 cv
238.748 328.008 238.408 326.626 237.281 325.138 cv
236.155 323.65 234.334 322.177 232.22 321.043 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
208.063 158.179 mo
209.718 156.822 210.882 155.003 211.299 153.123 cv
211.715 151.244 211.35 149.457 210.284 148.156 cv
209.217 146.856 207.536 146.148 205.612 146.189 cv
203.687 146.229 201.675 147.015 200.02 148.372 cv
198.364 149.73 197.2 151.549 196.784 153.428 cv
196.367 155.308 196.732 157.095 197.799 158.395 cv
198.865 159.695 200.546 160.403 202.471 160.363 cv
204.395 160.323 206.407 159.537 208.063 158.179 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
208.063 158.179 mo
209.718 156.822 210.882 155.003 211.299 153.123 cv
211.715 151.244 211.35 149.457 210.284 148.156 cv
209.217 146.856 207.536 146.148 205.612 146.189 cv
203.687 146.229 201.675 147.015 200.02 148.372 cv
198.364 149.73 197.2 151.549 196.784 153.428 cv
196.367 155.308 196.732 157.095 197.799 158.395 cv
198.865 159.695 200.546 160.403 202.471 160.363 cv
204.395 160.323 206.407 159.537 208.063 158.179 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
229.179 305.101 mo
228.236 301.983 226.872 299.13 225.387 297.173 cv
223.901 295.215 222.417 294.311 221.259 294.661 cv
220.102 295.011 219.366 296.586 219.214 299.039 cv
219.062 301.491 219.507 304.622 220.45 307.74 cv
221.392 310.859 222.757 313.711 224.242 315.669 cv
225.727 317.627 227.212 318.53 228.369 318.18 cv
229.527 317.83 230.262 316.256 230.414 313.803 cv
230.566 311.35 230.121 308.22 229.179 305.101 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
229.179 305.101 mo
228.236 301.983 226.872 299.13 225.387 297.173 cv
223.901 295.215 222.417 294.311 221.259 294.661 cv
220.102 295.011 219.366 296.586 219.214 299.039 cv
219.062 301.491 219.507 304.622 220.45 307.74 cv
221.392 310.859 222.757 313.711 224.242 315.669 cv
225.727 317.627 227.212 318.53 228.369 318.18 cv
229.527 317.83 230.262 316.256 230.414 313.803 cv
230.566 311.35 230.121 308.22 229.179 305.101 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
209.343 139.953 mo
208.997 138.809 208.303 137.82 207.415 137.206 cv
206.526 136.591 205.515 136.4 204.604 136.676 cv
203.693 136.951 202.957 137.67 202.558 138.674 cv
202.159 139.678 202.129 140.885 202.475 142.03 cv
202.821 143.174 203.515 144.163 204.403 144.778 cv
205.292 145.392 206.303 145.583 207.214 145.308 cv
208.124 145.032 208.86 144.314 209.26 143.309 cv
209.659 142.305 209.689 141.098 209.343 139.953 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
209.343 139.953 mo
208.997 138.809 208.303 137.82 207.415 137.206 cv
206.526 136.591 205.515 136.4 204.604 136.676 cv
203.693 136.951 202.957 137.67 202.558 138.674 cv
202.159 139.678 202.129 140.885 202.475 142.03 cv
202.821 143.174 203.515 144.163 204.403 144.778 cv
205.292 145.392 206.303 145.583 207.214 145.308 cv
208.124 145.032 208.86 144.314 209.26 143.309 cv
209.659 142.305 209.689 141.098 209.343 139.953 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
207.514 222.173 mo
207.708 220.214 207.272 218.272 206.302 216.777 cv
205.332 215.281 203.906 214.354 202.34 214.198 cv
200.773 214.043 199.193 214.672 197.948 215.948 cv
196.702 217.223 195.893 219.041 195.699 221.001 cv
195.504 222.96 195.94 224.901 196.91 226.397 cv
197.881 227.892 199.306 228.82 200.873 228.976 cv
202.44 229.131 204.02 228.502 205.265 227.226 cv
206.51 225.95 207.319 224.133 207.514 222.173 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
207.514 222.173 mo
207.708 220.214 207.272 218.272 206.302 216.777 cv
205.332 215.281 203.906 214.354 202.34 214.198 cv
200.773 214.043 199.193 214.672 197.948 215.948 cv
196.702 217.223 195.893 219.041 195.699 221.001 cv
195.504 222.96 195.94 224.901 196.91 226.397 cv
197.881 227.892 199.306 228.82 200.873 228.976 cv
202.44 229.131 204.02 228.502 205.265 227.226 cv
206.51 225.95 207.319 224.133 207.514 222.173 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
208.615 252.192 mo
205.629 251.893 202.678 252.484 200.411 253.834 cv
198.144 255.184 196.746 257.183 196.525 259.391 cv
196.304 261.599 197.278 263.835 199.233 265.607 cv
201.188 267.38 203.963 268.544 206.949 268.842 cv
209.934 269.141 212.885 268.55 215.152 267.2 cv
217.42 265.85 218.818 263.851 219.038 261.643 cv
219.259 259.436 218.285 257.199 216.33 255.427 cv
214.376 253.654 211.6 252.491 208.615 252.192 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
208.615 252.192 mo
205.629 251.893 202.678 252.484 200.411 253.834 cv
198.144 255.184 196.746 257.183 196.525 259.391 cv
196.304 261.599 197.278 263.835 199.233 265.607 cv
201.188 267.38 203.963 268.544 206.949 268.842 cv
209.934 269.141 212.885 268.55 215.152 267.2 cv
217.42 265.85 218.818 263.851 219.038 261.643 cv
219.259 259.436 218.285 257.199 216.33 255.427 cv
214.376 253.654 211.6 252.491 208.615 252.192 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
228.016 267.607 mo
229.31 265.19 230.15 262.656 230.352 260.564 cv
230.553 258.472 230.099 256.993 229.09 256.453 cv
228.081 255.913 226.598 256.356 224.97 257.683 cv
223.341 259.011 221.699 261.116 220.404 263.534 cv
219.11 265.952 218.27 268.485 218.069 270.577 cv
217.867 272.669 218.321 274.148 219.331 274.688 cv
220.34 275.228 221.822 274.785 223.451 273.458 cv
225.08 272.13 226.722 270.025 228.016 267.607 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
228.016 267.607 mo
229.31 265.19 230.15 262.656 230.352 260.564 cv
230.553 258.472 230.099 256.993 229.09 256.453 cv
228.081 255.913 226.598 256.356 224.97 257.683 cv
223.341 259.011 221.699 261.116 220.404 263.534 cv
219.11 265.952 218.27 268.485 218.069 270.577 cv
217.867 272.669 218.321 274.148 219.331 274.688 cv
220.34 275.228 221.822 274.785 223.451 273.458 cv
225.08 272.13 226.722 270.025 228.016 267.607 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
253.203 166.102 mo
254.172 164.29 254.732 162.353 254.757 160.719 cv
254.783 159.084 254.273 157.885 253.339 157.386 cv
252.406 156.886 251.125 157.127 249.779 158.054 cv
248.433 158.982 247.132 160.522 246.162 162.334 cv
245.193 164.145 244.633 166.082 244.608 167.716 cv
244.582 169.351 245.092 170.55 246.026 171.05 cv
246.959 171.549 248.24 171.309 249.586 170.381 cv
250.932 169.453 252.233 167.914 253.203 166.102 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
253.203 166.102 mo
254.172 164.29 254.732 162.353 254.757 160.719 cv
254.783 159.084 254.273 157.885 253.339 157.386 cv
252.406 156.886 251.125 157.127 249.779 158.054 cv
248.433 158.982 247.132 160.522 246.162 162.334 cv
245.193 164.145 244.633 166.082 244.608 167.716 cv
244.582 169.351 245.092 170.55 246.026 171.05 cv
246.959 171.549 248.24 171.309 249.586 170.381 cv
250.932 169.453 252.233 167.914 253.203 166.102 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
282.885 268.313 mo
280.875 265.859 278.232 264.09 275.539 263.397 cv
272.845 262.703 270.32 263.142 268.52 264.615 cv
266.72 266.089 265.792 268.478 265.941 271.255 cv
266.089 274.033 267.301 276.972 269.311 279.427 cv
271.32 281.881 273.963 283.65 276.657 284.343 cv
279.35 285.037 281.875 284.598 283.675 283.125 cv
285.475 281.651 286.403 279.262 286.255 276.485 cv
286.107 273.707 284.894 270.767 282.885 268.313 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
282.885 268.313 mo
280.875 265.859 278.232 264.09 275.539 263.397 cv
272.845 262.703 270.32 263.142 268.52 264.615 cv
266.72 266.089 265.792 268.478 265.941 271.255 cv
266.089 274.033 267.301 276.972 269.311 279.427 cv
271.32 281.881 273.963 283.65 276.657 284.343 cv
279.35 285.037 281.875 284.598 283.675 283.125 cv
285.475 281.651 286.403 279.262 286.255 276.485 cv
286.107 273.707 284.894 270.767 282.885 268.313 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
253.143 343.55 mo
255.932 342.704 258.472 341.45 260.205 340.063 cv
261.938 338.676 262.721 337.269 262.383 336.153 cv
262.045 335.037 260.612 334.302 258.401 334.111 cv
256.189 333.92 253.38 334.288 250.591 335.133 cv
247.802 335.979 245.261 337.233 243.528 338.62 cv
241.795 340.007 241.012 341.414 241.35 342.53 cv
241.689 343.646 243.121 344.381 245.333 344.572 cv
247.544 344.763 250.354 344.396 253.143 343.55 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
253.143 343.55 mo
255.932 342.704 258.472 341.45 260.205 340.063 cv
261.938 338.676 262.721 337.269 262.383 336.153 cv
262.045 335.037 260.612 334.302 258.401 334.111 cv
256.189 333.92 253.38 334.288 250.591 335.133 cv
247.802 335.979 245.261 337.233 243.528 338.62 cv
241.795 340.007 241.012 341.414 241.35 342.53 cv
241.689 343.646 243.121 344.381 245.333 344.572 cv
247.544 344.763 250.354 344.396 253.143 343.55 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
324.417 177.71 mo
326.072 176.352 327.236 174.533 327.653 172.654 cv
328.069 170.774 327.704 168.987 326.638 167.687 cv
325.571 166.386 323.89 165.679 321.966 165.719 cv
320.041 165.759 318.029 166.545 316.374 167.903 cv
314.718 169.26 313.554 171.079 313.138 172.959 cv
312.721 174.838 313.086 176.625 314.153 177.925 cv
315.219 179.226 316.9 179.934 318.825 179.893 cv
320.75 179.853 322.761 179.067 324.417 177.71 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
324.417 177.71 mo
326.072 176.352 327.236 174.533 327.653 172.654 cv
328.069 170.774 327.704 168.987 326.638 167.687 cv
325.571 166.386 323.89 165.679 321.966 165.719 cv
320.041 165.759 318.029 166.545 316.374 167.903 cv
314.718 169.26 313.554 171.079 313.138 172.959 cv
312.721 174.838 313.086 176.625 314.153 177.925 cv
315.219 179.226 316.9 179.934 318.825 179.893 cv
320.75 179.853 322.761 179.067 324.417 177.71 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
286.982 171.762 mo
285.364 171.6 283.759 171.982 282.52 172.825 cv
281.28 173.667 280.508 174.9 280.373 176.253 cv
280.237 177.606 280.75 178.968 281.798 180.039 cv
282.846 181.11 284.343 181.802 285.961 181.964 cv
287.578 182.126 289.183 181.744 290.423 180.902 cv
291.662 180.059 292.434 178.826 292.57 177.473 cv
292.705 176.12 292.192 174.759 291.144 173.688 cv
290.096 172.616 288.599 171.924 286.982 171.762 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
286.982 171.762 mo
285.364 171.6 283.759 171.982 282.52 172.825 cv
281.28 173.667 280.508 174.9 280.373 176.253 cv
280.237 177.606 280.75 178.968 281.798 180.039 cv
282.846 181.11 284.343 181.802 285.961 181.964 cv
287.578 182.126 289.183 181.744 290.423 180.902 cv
291.662 180.059 292.434 178.826 292.57 177.473 cv
292.705 176.12 292.192 174.759 291.144 173.688 cv
290.096 172.616 288.599 171.924 286.982 171.762 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
185.191 186.335 mo
186.486 183.917 187.326 181.383 187.527 179.292 cv
187.729 177.2 187.275 175.721 186.265 175.181 cv
185.256 174.641 183.774 175.083 182.145 176.411 cv
180.516 177.739 178.874 179.843 177.58 182.261 cv
176.286 184.679 175.445 187.213 175.244 189.305 cv
175.043 191.396 175.497 192.875 176.506 193.415 cv
177.515 193.956 178.998 193.513 180.626 192.185 cv
182.255 190.858 183.897 188.753 185.191 186.335 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
185.191 186.335 mo
186.486 183.917 187.326 181.383 187.527 179.292 cv
187.729 177.2 187.275 175.721 186.265 175.181 cv
185.256 174.641 183.774 175.083 182.145 176.411 cv
180.516 177.739 178.874 179.843 177.58 182.261 cv
176.286 184.679 175.445 187.213 175.244 189.305 cv
175.043 191.396 175.497 192.875 176.506 193.415 cv
177.515 193.956 178.998 193.513 180.626 192.185 cv
182.255 190.858 183.897 188.753 185.191 186.335 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
281.899 233.343 mo
281.553 232.198 280.86 231.21 279.971 230.595 cv
279.082 229.981 278.071 229.79 277.161 230.065 cv
276.25 230.341 275.514 231.059 275.114 232.063 cv
274.715 233.068 274.685 234.275 275.031 235.419 cv
275.377 236.564 276.071 237.553 276.96 238.167 cv
277.848 238.782 278.859 238.973 279.77 238.697 cv
280.681 238.422 281.417 237.703 281.816 236.699 cv
282.216 235.695 282.245 234.488 281.899 233.343 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
281.899 233.343 mo
281.553 232.198 280.86 231.21 279.971 230.595 cv
279.082 229.981 278.071 229.79 277.161 230.065 cv
276.25 230.341 275.514 231.059 275.114 232.063 cv
274.715 233.068 274.685 234.275 275.031 235.419 cv
275.377 236.564 276.071 237.553 276.96 238.167 cv
277.848 238.782 278.859 238.973 279.77 238.697 cv
280.681 238.422 281.417 237.703 281.816 236.699 cv
282.216 235.695 282.245 234.488 281.899 233.343 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
276.505 159.29 mo
275.571 159.197 274.639 159.475 273.914 160.063 cv
273.188 160.651 272.729 161.502 272.636 162.427 cv
272.544 163.353 272.826 164.277 273.42 164.998 cv
274.015 165.718 274.873 166.175 275.807 166.269 cv
276.74 166.362 277.672 166.084 278.397 165.496 cv
279.123 164.907 279.582 164.057 279.675 163.131 cv
279.768 162.206 279.486 161.281 278.891 160.561 cv
278.297 159.841 277.438 159.383 276.505 159.29 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
276.505 159.29 mo
275.571 159.197 274.639 159.475 273.914 160.063 cv
273.188 160.651 272.729 161.502 272.636 162.427 cv
272.544 163.353 272.826 164.277 273.42 164.998 cv
274.015 165.718 274.873 166.175 275.807 166.269 cv
276.74 166.362 277.672 166.084 278.397 165.496 cv
279.123 164.907 279.582 164.057 279.675 163.131 cv
279.768 162.206 279.486 161.281 278.891 160.561 cv
278.297 159.841 277.438 159.383 276.505 159.29 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
258.512 256.048 mo
256.211 255.818 253.933 256.304 252.179 257.4 cv
250.426 258.496 249.341 260.113 249.163 261.893 cv
248.985 263.673 249.728 265.472 251.229 266.894 cv
252.731 268.316 254.867 269.244 257.169 269.474 cv
259.47 269.704 261.748 269.218 263.502 268.122 cv
265.255 267.026 266.34 265.41 266.518 263.629 cv
266.696 261.849 265.953 260.05 264.451 258.628 cv
262.95 257.206 260.813 256.278 258.512 256.048 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
258.512 256.048 mo
256.211 255.818 253.933 256.304 252.179 257.4 cv
250.426 258.496 249.341 260.113 249.163 261.893 cv
248.985 263.673 249.728 265.472 251.229 266.894 cv
252.731 268.316 254.867 269.244 257.169 269.474 cv
259.47 269.704 261.748 269.218 263.502 268.122 cv
265.255 267.026 266.34 265.41 266.518 263.629 cv
266.696 261.849 265.953 260.05 264.451 258.628 cv
262.95 257.206 260.813 256.278 258.512 256.048 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
229.335 238.839 mo
227.326 236.384 224.683 234.616 221.99 233.922 cv
219.296 233.229 216.771 233.667 214.971 235.141 cv
213.171 236.615 212.243 239.003 212.391 241.781 cv
212.54 244.559 213.752 247.498 215.762 249.953 cv
217.771 252.407 220.414 254.176 223.107 254.869 cv
225.801 255.562 228.326 255.124 230.126 253.65 cv
231.926 252.177 232.854 249.788 232.706 247.01 cv
232.557 244.233 231.345 241.293 229.335 238.839 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
229.335 238.839 mo
227.326 236.384 224.683 234.616 221.99 233.922 cv
219.296 233.229 216.771 233.667 214.971 235.141 cv
213.171 236.615 212.243 239.003 212.391 241.781 cv
212.54 244.559 213.752 247.498 215.762 249.953 cv
217.771 252.407 220.414 254.176 223.107 254.869 cv
225.801 255.562 228.326 255.124 230.126 253.65 cv
231.926 252.177 232.854 249.788 232.706 247.01 cv
232.557 244.233 231.345 241.293 229.335 238.839 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
348.299 247.035 mo
347.16 245.644 345.617 244.679 344.01 244.353 cv
342.402 244.027 340.861 244.366 339.726 245.295 cv
338.591 246.225 337.954 247.669 337.957 249.309 cv
337.959 250.949 338.6 252.653 339.739 254.043 cv
340.878 255.434 342.421 256.398 344.028 256.725 cv
345.636 257.051 347.177 256.712 348.312 255.782 cv
349.447 254.853 350.084 253.409 350.081 251.769 cv
350.079 250.128 349.438 248.425 348.299 247.035 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
348.299 247.035 mo
347.16 245.644 345.617 244.679 344.01 244.353 cv
342.402 244.027 340.861 244.366 339.726 245.295 cv
338.591 246.225 337.954 247.669 337.957 249.309 cv
337.959 250.949 338.6 252.653 339.739 254.043 cv
340.878 255.434 342.421 256.398 344.028 256.725 cv
345.636 257.051 347.177 256.712 348.312 255.782 cv
349.447 254.853 350.084 253.409 350.081 251.769 cv
350.079 250.128 349.438 248.425 348.299 247.035 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
202.5 317.8 mo
203.145 316.594 203.424 315.255 203.273 314.077 cv
203.123 312.9 202.557 311.981 201.699 311.522 cv
200.841 311.063 199.762 311.101 198.699 311.629 cv
197.636 312.157 196.676 313.131 196.031 314.337 cv
195.386 315.543 195.108 316.882 195.258 318.059 cv
195.408 319.237 195.974 320.156 196.832 320.615 cv
197.69 321.074 198.769 321.035 199.832 320.508 cv
200.895 319.98 201.855 319.005 202.5 317.8 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
202.5 317.8 mo
203.145 316.594 203.424 315.255 203.273 314.077 cv
203.123 312.9 202.557 311.981 201.699 311.522 cv
200.841 311.063 199.762 311.101 198.699 311.629 cv
197.636 312.157 196.676 313.131 196.031 314.337 cv
195.386 315.543 195.108 316.882 195.258 318.059 cv
195.408 319.237 195.974 320.156 196.832 320.615 cv
197.69 321.074 198.769 321.035 199.832 320.508 cv
200.895 319.98 201.855 319.005 202.5 317.8 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
318.441 255.239 mo
321.23 254.394 323.771 253.139 325.503 251.752 cv
327.236 250.365 328.02 248.959 327.681 247.843 cv
327.343 246.726 325.91 245.992 323.699 245.801 cv
321.488 245.609 318.678 245.977 315.889 246.822 cv
313.1 247.668 310.56 248.922 308.827 250.31 cv
307.094 251.697 306.31 253.103 306.649 254.219 cv
306.987 255.335 308.42 256.07 310.631 256.261 cv
312.842 256.453 315.652 256.085 318.441 255.239 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
318.441 255.239 mo
321.23 254.394 323.771 253.139 325.503 251.752 cv
327.236 250.365 328.02 248.959 327.681 247.843 cv
327.343 246.726 325.91 245.992 323.699 245.801 cv
321.488 245.609 318.678 245.977 315.889 246.822 cv
313.1 247.668 310.56 248.922 308.827 250.31 cv
307.094 251.697 306.31 253.103 306.649 254.219 cv
306.987 255.335 308.42 256.07 310.631 256.261 cv
312.842 256.453 315.652 256.085 318.441 255.239 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
236.668 348.761 mo
238.324 347.403 239.488 345.584 239.904 343.705 cv
240.321 341.825 239.956 340.038 238.889 338.738 cv
237.823 337.437 236.142 336.729 234.217 336.77 cv
232.293 336.81 230.281 337.596 228.625 338.954 cv
226.97 340.311 225.806 342.13 225.389 344.01 cv
224.973 345.889 225.338 347.676 226.405 348.976 cv
227.471 350.277 229.152 350.985 231.076 350.944 cv
233.001 350.904 235.013 350.118 236.668 348.761 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
236.668 348.761 mo
238.324 347.403 239.488 345.584 239.904 343.705 cv
240.321 341.825 239.956 340.038 238.889 338.738 cv
237.823 337.437 236.142 336.729 234.217 336.77 cv
232.293 336.81 230.281 337.596 228.625 338.954 cv
226.97 340.311 225.806 342.13 225.389 344.01 cv
224.973 345.889 225.338 347.676 226.405 348.976 cv
227.471 350.277 229.152 350.985 231.076 350.944 cv
233.001 350.904 235.013 350.118 236.668 348.761 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
252.418 146.955 mo
251.28 145.564 249.737 144.6 248.129 144.274 cv
246.521 143.947 244.98 144.286 243.845 145.216 cv
242.71 146.145 242.073 147.589 242.076 149.229 cv
242.078 150.87 242.72 152.573 243.858 153.964 cv
244.997 155.354 246.54 156.319 248.148 156.645 cv
249.755 156.971 251.296 156.632 252.432 155.703 cv
253.567 154.774 254.203 153.33 254.2 151.689 cv
254.198 150.049 253.557 148.346 252.418 146.955 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
252.418 146.955 mo
251.28 145.564 249.737 144.6 248.129 144.274 cv
246.521 143.947 244.98 144.286 243.845 145.216 cv
242.71 146.145 242.073 147.589 242.076 149.229 cv
242.078 150.87 242.72 152.573 243.858 153.964 cv
244.997 155.354 246.54 156.319 248.148 156.645 cv
249.755 156.971 251.296 156.632 252.432 155.703 cv
253.567 154.774 254.203 153.33 254.2 151.689 cv
254.198 150.049 253.557 148.346 252.418 146.955 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
208.508 270.076 mo
205.523 269.777 202.572 270.368 200.305 271.718 cv
198.037 273.068 196.639 275.067 196.419 277.275 cv
196.198 279.483 197.172 281.719 199.127 283.492 cv
201.081 285.264 203.857 286.428 206.842 286.726 cv
209.828 287.025 212.779 286.434 215.046 285.084 cv
217.313 283.734 218.711 281.735 218.932 279.527 cv
219.153 277.32 218.179 275.083 216.224 273.311 cv
214.269 271.538 211.494 270.375 208.508 270.076 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
208.508 270.076 mo
205.523 269.777 202.572 270.368 200.305 271.718 cv
198.037 273.068 196.639 275.067 196.419 277.275 cv
196.198 279.483 197.172 281.719 199.127 283.492 cv
201.081 285.264 203.857 286.428 206.842 286.726 cv
209.828 287.025 212.779 286.434 215.046 285.084 cv
217.313 283.734 218.711 281.735 218.932 279.527 cv
219.153 277.32 218.179 275.083 216.224 273.311 cv
214.269 271.538 211.494 270.375 208.508 270.076 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
145.199 283.587 mo
147.33 282.941 149.25 281.91 150.535 280.722 cv
151.821 279.534 152.367 278.286 152.053 277.252 cv
151.74 276.218 150.592 275.483 148.864 275.209 cv
147.135 274.935 144.967 275.144 142.835 275.79 cv
140.704 276.436 138.785 277.467 137.499 278.655 cv
136.214 279.842 135.668 281.091 135.982 282.125 cv
136.295 283.159 137.442 283.894 139.171 284.168 cv
140.9 284.442 143.068 284.233 145.199 283.587 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
145.199 283.587 mo
147.33 282.941 149.25 281.91 150.535 280.722 cv
151.821 279.534 152.367 278.286 152.053 277.252 cv
151.74 276.218 150.592 275.483 148.864 275.209 cv
147.135 274.935 144.967 275.144 142.835 275.79 cv
140.704 276.436 138.785 277.467 137.499 278.655 cv
136.214 279.842 135.668 281.091 135.982 282.125 cv
136.295 283.159 137.442 283.894 139.171 284.168 cv
140.9 284.442 143.068 284.233 145.199 283.587 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
347.452 334.276 mo
348.926 333.83 350.224 333.023 351.062 332.034 cv
351.9 331.046 352.208 329.955 351.92 329.004 cv
351.631 328.052 350.769 327.317 349.523 326.96 cv
348.278 326.603 346.75 326.653 345.277 327.1 cv
343.803 327.546 342.505 328.353 341.667 329.342 cv
340.829 330.33 340.521 331.421 340.809 332.372 cv
341.098 333.324 341.96 334.059 343.206 334.416 cv
344.451 334.773 345.979 334.723 347.452 334.276 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
347.452 334.276 mo
348.926 333.83 350.224 333.023 351.062 332.034 cv
351.9 331.046 352.208 329.955 351.92 329.004 cv
351.631 328.052 350.769 327.317 349.523 326.96 cv
348.278 326.603 346.75 326.653 345.277 327.1 cv
343.803 327.546 342.505 328.353 341.667 329.342 cv
340.829 330.33 340.521 331.421 340.809 332.372 cv
341.098 333.324 341.96 334.059 343.206 334.416 cv
344.451 334.773 345.979 334.723 347.452 334.276 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
233.798 230.226 mo
233.253 228.423 232.336 226.814 231.248 225.751 cv
230.161 224.689 228.992 224.261 227.999 224.561 cv
227.006 224.861 226.27 225.865 225.953 227.352 cv
225.636 228.839 225.764 230.687 226.309 232.49 cv
226.854 234.293 227.771 235.902 228.859 236.965 cv
229.946 238.027 231.115 238.455 232.108 238.155 cv
233.101 237.855 233.837 236.851 234.154 235.364 cv
234.471 233.877 234.343 232.029 233.798 230.226 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
233.798 230.226 mo
233.253 228.423 232.336 226.814 231.248 225.751 cv
230.161 224.689 228.992 224.261 227.999 224.561 cv
227.006 224.861 226.27 225.865 225.953 227.352 cv
225.636 228.839 225.764 230.687 226.309 232.49 cv
226.854 234.293 227.771 235.902 228.859 236.965 cv
229.946 238.027 231.115 238.455 232.108 238.155 cv
233.101 237.855 233.837 236.851 234.154 235.364 cv
234.471 233.877 234.343 232.029 233.798 230.226 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
300.358 245.95 mo
298.741 245.788 297.135 246.171 295.896 247.013 cv
294.657 247.855 293.884 249.088 293.749 250.441 cv
293.614 251.794 294.126 253.156 295.174 254.227 cv
296.222 255.298 297.72 255.991 299.337 256.152 cv
300.954 256.314 302.56 255.932 303.799 255.09 cv
305.038 254.248 305.811 253.014 305.946 251.661 cv
306.081 250.309 305.569 248.947 304.521 247.876 cv
303.473 246.805 301.975 246.112 300.358 245.95 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
300.358 245.95 mo
298.741 245.788 297.135 246.171 295.896 247.013 cv
294.657 247.855 293.884 249.088 293.749 250.441 cv
293.614 251.794 294.126 253.156 295.174 254.227 cv
296.222 255.298 297.72 255.991 299.337 256.152 cv
300.954 256.314 302.56 255.932 303.799 255.09 cv
305.038 254.248 305.811 253.014 305.946 251.661 cv
306.081 250.309 305.569 248.947 304.521 247.876 cv
303.473 246.805 301.975 246.112 300.358 245.95 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
.5 lw
0 lc
122.4 388.8 mo
122.4 384.8 li
@
122.4 43.2 mo
122.4 47.2 li
@
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: EEINHR+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /EEINHR+ def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox [-0.184 -0.236 1.288 0.929 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /zero put
dup 33 /period put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/zero {636 0 66 -13 570 742 setcachedevice
318 664 mo
267 664 229 639 203 589 cv
177 539 165 464 165 364 cv
165 264 177 189 203 139 cv
229 89 267 64 318 64 cv
369 64 407 89 433 139 cv
458 189 471 264 471 364 cv
471 464 458 539 433 589 cv
407 639 369 664 318 664 cv
318 742 mo
399 742 461 709 505 645 cv
548 580 570 486 570 364 cv
570 241 548 147 505 83 cv
461 19 399 -13 318 -13 cv
236 -13 173 19 130 83 cv
87 147 66 241 66 364 cv
66 486 87 580 130 645 cv
173 709 236 742 318 742 cv
false sop
f
}bind def
/period {318 0 107 0 210 124 setcachedevice
107 124 mo
210 124 li
210 0 li
107 0 li
107 124 li
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/EEINHS+ /EEINHR+ findfont ct_VMDictPut
/EEINHS+*1 
[32{/.notdef}rp /zero /period 222{/.notdef}rp]
EEINHS+ nf
EEINHS+*1 [12 0 0 -12 0 0 ]msf
109.83 401.706 mo
( !  )
[7.63202 3.81592 7.63201 0 ]xsh
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
208.8 388.8 mo
208.8 384.8 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
208.8 43.2 mo
208.8 47.2 li
@
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: EEINHR+ AddGlyphs
systemdict begin EEINHS+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five {636 0 77 -13 549 729 setcachedevice
108 729 mo
495 729 li
495 646 li
198 646 li
198 467 li
212 472 227 476 241 478 cv
255 480 270 482 284 482 cv
365 482 429 459 477 415 cv
525 370 549 310 549 234 cv
549 155 524 94 475 51 cv
426 8 357 -13 269 -13 cv
238 -13 207 -10 175 -6 cv
143 -1 111 6 77 17 cv
77 116 li
106 100 136 88 168 80 cv
199 72 232 69 267 69 cv
323 69 368 83 401 113 cv
433 143 450 183 450 234 cv
450 284 433 324 401 354 cv
368 384 323 399 267 399 cv
241 399 214 396 188 390 cv
162 384 135 375 108 363 cv
108 729 li
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/EEINHS+*1 
[32{/.notdef}rp /zero /period /five 221{/.notdef}rp]
EEINHS+ nf
EEINHS+*1 [12 0 0 -12 0 0 ]msf
196.355 401.706 mo
( ! ")
[7.63202 3.81592 7.63202 0 ]xsh
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
295.2 388.8 mo
295.2 384.8 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
295.2 43.2 mo
295.2 47.2 li
@
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: EEINHR+ AddGlyphs
systemdict begin EEINHS+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one {636 0 110 0 544 729 setcachedevice
124 83 mo
285 83 li
285 639 li
110 604 li
110 694 li
284 729 li
383 729 li
383 83 li
544 83 li
544 0 li
124 0 li
124 83 li
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/EEINHS+*1 
[32{/.notdef}rp /zero /period /five /one 220{/.notdef}rp]
EEINHS+ nf
EEINHS+*1 [12 0 0 -12 0 0 ]msf
282.63 401.706 mo
( !# )
[7.63202 3.81592 7.63202 0 ]xsh
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
381.6 388.8 mo
381.6 384.8 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
381.6 43.2 mo
381.6 47.2 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
369.155 401.706 mo
( !#")
[7.63202 3.81592 7.63202 0 ]xsh
468 388.8 mo
468 384.8 li
@
468 43.2 mo
468 47.2 li
@
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: EEINHR+ AddGlyphs
systemdict begin EEINHS+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two {636 0 73 0 536 742 setcachedevice
192 83 mo
536 83 li
536 0 li
73 0 li
73 83 li
110 121 161 173 226 239 cv
290 304 331 346 348 365 cv
380 400 402 430 414 455 cv
426 479 433 504 433 528 cv
433 566 419 598 392 622 cv
365 646 330 659 286 659 cv
255 659 222 653 188 643 cv
154 632 117 616 78 594 cv
78 694 li
118 710 155 722 189 730 cv
223 738 255 742 284 742 cv
359 742 419 723 464 685 cv
509 647 532 597 532 534 cv
532 504 526 475 515 449 cv
504 422 484 390 454 354 cv
446 344 420 317 376 272 cv
332 227 271 164 192 83 cv
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/EEINHS+*1 
[32{/.notdef}rp /zero /period /five /one /two 219{/.notdef}rp]
EEINHS+ nf
EEINHS+*1 [12 0 0 -12 0 0 ]msf
455.43 401.706 mo
( !$ )
[7.63202 3.81592 7.63202 0 ]xsh
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
122.4 388.8 mo
126.4 388.8 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
468 388.8 mo
464 388.8 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
93.2594 393.167 mo
( !  )
[7.63202 3.81592 7.63202 0 ]xsh
122.4 302.4 mo
126.4 302.4 li
@
468 302.4 mo
464 302.4 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
93.5094 306.767 mo
( ! ")
[7.63202 3.81592 7.63202 0 ]xsh
122.4 216 mo
126.4 216 li
@
468 216 mo
464 216 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
93.2594 220.367 mo
( !# )
[7.63202 3.81592 7.63202 0 ]xsh
122.4 129.6 mo
126.4 129.6 li
@
468 129.6 mo
464 129.6 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
93.5094 133.967 mo
( !#")
[7.63202 3.81592 7.63202 0 ]xsh
122.4 43.2 mo
126.4 43.2 li
@
468 43.2 mo
464 43.2 li
@
EEINHS+*1 [12 0 0 -12 0 0 ]msf
93.2594 47.5672 mo
( !$ )
[7.63202 3.81592 7.63202 0 ]xsh
1 lw
2 lc
122.4 43.2 mo
468 43.2 li
@
468 388.8 mo
468 43.2 li
@
122.4 388.8 mo
468 388.8 li
@
122.4 388.8 mo
122.4 43.2 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/EEINHS+*1 uf
/EEINHS+ uf
/ uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
