%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: RVE.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: hp
%%CreationDate: 2011/9/7, 15:39:07
%%BoundingBox: 0 0 102 104
%%HiResBoundingBox: 0 0 101.4921 103.2246
%%CropBox: 0 0 101.4921 103.2246
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1021 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2011-09-07T15:38:52+08:00"
   xmp:CreateDate="2011-09-07T15:37:24+08:00"
   xmp:MetadataDate="2011-09-07T15:38:52+08:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f49eddd8-00cc-4e8b-9296-b6f76a8a2149"
   xmpMM:InstanceID="uuid:eef0d508-0813-4ef5-bd9f-d7a873b7a6b5"
   pdf:Producer="PDFlib PLOP 2.0.0p6 (SunOS)/Acrobat Distiller 6.0.1 (Windows)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Computational homogenization for heat conduction in heterogeneous solids</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -103.225 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 103.225 li
101.492 103.225 li
101.492 0 li
cp
clp
[1 0 0 1 -230.609 0 ]ct
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Times-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+Times-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright Linotype-Hell AG, and or its subsidiaries.  Palatino is a Trademark of Linotype-Hell AG.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Times-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 87 /W put
dup 90 /Z put
dup 200 /dieresis put
def
/FontBBox {-168 -218 1000 899} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-14 -0 450 460 662 676 683 688] def
/BlueScale 0.0454545 def
/StdHW [20] def
/StdVW [84] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/comma <1C60D8A8C9B8707CA7E6F1549B234FAE03070D2CA9A4C6510179C38A
EF082847012F779A24B0EFACAEFB661AF87B6816209B4CBD59F0B1FF6622BB2C
1D97A0C39103CA2DF0776902E98A122DFC84DC1F7DE0AAEF78CD6C0B46F8E4> |-
/period <1C60D8A8C9B8707CABA78EB744DAD4CB3514F5F95016F8904D26FA0
404EC9D5A83B50FC24606293B36B6> |-
/zero <1C60D8A8C9B7A73D3387F334BDB7D2E617E7B114D6F6D4BD8DEEE23DC
5B8FDFF881D0FFD7784B5904A09E3AC593C2C8A9D6BE71E5106BDB719D2BABD8
7EE167FAB3ED13EB3061766A56D58D2A2D3C6187A7221B72502F5A5B5517419B
AEB5D514F> |-
/one <1C60D8A8C9B7A73DC54C6E6EB37B2C47D29B2A6A0FAC452F27D13AEB34
561673EC4FC63142167E4D5D13A284BB8B29E49375403EAAF1B5B0F62014A39D
4011875AE3301C0ED03E8D9706EF1B5C> |-
/nine <1C60D8A8C9B7A73DB9A488CBD8575677F00BFD0DAF9D886B88E52E14F
2DBAA213C180E9C2A3EC7A443CBA91511A57D1D45627826A2E4AF010F41C3748
B5594874C492773DFF36B8A4AC811A8A7C3639F443ABAD9A0B8BDF76B7BEAC2E
FFF909B64AC49FE5EADE0D99400386820162F0F8B3C4A8A0EBE02B83CC80408B
1E686A2F308DC0AD29AC21ECAC31FF1C01E75E938ED04115FCAAA> |-
/A <1C60D8A8C9B6079F1E495237E18E54F6E68EF870AB7D36277D180EFEB744
30A13935C56F37931B2E2FA6B5D5AA497E0ADD3A055D836C15479EFA6D6789F4
57EF09C885DFBB7ACABF07B0BF7B75BB2C4A070674394ECB98BCB3C2C002687D
083831E6F39958F7B5D7671E1CC528B7CCCE1F8CBC78CA9B51FDFFD55CBB643C
C86F6B> |-
/B <1C60D8A8C9B64EDF8810B92A62DDF53F81AA99A6DC4872AF7F0DFE441543
7DC21923565B8C36EA4CCCF306508B1A2CA9A2E13FE87C517D21ADE34E0BBF68
A8445ACBAF729C65E35EC82330E18B041FAF03EE4AF6FE8463225DACB42DCE3D
B10EC8E821DC190E2A806E9A745FD9420A4399334344B2801541FCE4616A03FC
FA148CD7E6AF178E8E90A0E38E79BF84F3884AA5DD6600B2FFB296E70FDF789F
E38659957C3CB6FB7A> |-
/D <1C60D8A8C9B6079F1E79092EA39691BEEC8FE7A24B8352A115108BE58D9B
924B5E0B0678D5188FAA9497DFA61AD73A79B9C664B6A2A35CE658154250F47D
5782681E6721CE5BFA85CDC70F17B213255EA2A1ABFC23B2BAD3E813E3EBF553
30C1366BDB4AAC408837696050686D6D3B9B7E7719> |-
/E <1C60D8A8C9B7D8BE6A707DDA138B8F449684E091DBFC10F2B8A4EF1FE41A
DAE0FD2D22469B8711978D925F4901102F35D0D8FF3AD66E31A43C8451FA3231
CBB50CEAF38A60F10428EB634DC57D6265416DA668732BBB5F6B8C8DC7A5F197
36AB303E45C469123DACB7561A199F4651EB6C4B864945EC3F678EF41A7F8798
929FF69C5041431EA9CC1A04358C9B65FDA44429DFFD0B248875F2F94DA65D9D
0964982D94EC> |-
/G <1C60D8A8C9B6079FE817D87B6B833D3024A9B4A3B8458350B894821C35E4
21C11C890CED99DBF241B059A1A66A317FAE31375A8CC5734EA9E54915B3FE0C
7BB9940196007906C9EAF2F73D71E7348352EB91C96A423AFBF75A4229488D45
69056E89671EB31CD445E51DC216CC718B9167C0018A538A5F12EF7A6171E741
96C5900ECC2AE8B3B2365FC71FDDA48E69551B5A5B8F828F601F087E3804A11F
69BAEE410A7D907D887D9D335111B2A6E21D86EA69652DD9ADE709CC7063CA> |-
/I <1C60D8A8C9B81F2C46F7F6369359CC25D156AF78EB74E78F300265BDF1DE
72DAD240F7ABC9CA8F641C56F48ECCB39BB65CB5F3E9ED3686EF934EEBF8A7F8
A44B81668F774F159A9A56210303F4> |-
/K <1C60D8A8C9B6079F1E49523903246FC82E5E3973CEB0F3374FA023AA5C15
B4AF79F2C32DE31D8656608CAB25D48D749D4AC931B6E775C3F9FAD7392A110C
82A3C0B2A3B0BDFF60A59DD2552272F1C152A03BF8575C58F0E1608F234690A8
8ECFA7076FDB4780644382A73719175D0C286A40EDA241555850D9825246C684
DD9F8D423C1964E2966853F93C68F71C318F693ADDE1CCD4CFBE4B48E7393B63
A2C3A8C7AD6307DBEF10C92572D86ADCE2470D30903EDA7186F041E731CE21BE
4D91B062A6C6D822F0B6E9> |-
/L <1C60D8A8C9B7D8BE6A707DD4D82820ACF948EF6A53F2993561047C769118
4DD8DA89E405E2E4E098BCA14CAB142DD018489B33DBED80DB748B693D0B6826
D996195A7B5B4F611EBAB7097C8B83A9A8A8853F379B8A5BB79421F70F7BC5D3
0FD82CB28AF45B759A> |-
/M <1C60D8A8C9B59F859BE1C827D63BE29B55ABAFF6B6A11B61B25AA04B06D2
5F753437D0D3715878816B08C8CC4B3CC65ED883CB69D44FAF239B595AB679B5
0A68987D5C50DD5F06FA3CC31C8F9899EFA671E6FF7B6FE5FADAE1A3C09EB80C
34572C29C0121AA25660183BA3A924F7122C03D19E76D138912418C01237E2F3
01FADC1033CAA90F6657919E40F36042FA777A0EA4801D443517A057AD> |-
/N <1C60D8A8C9B6079F1E49523903246FC83F90D3EADA91B45A90E8D9F6A441
0BA247959246393560FF9D532BEAA52BEC9B09BD22843FA1BBC06263E7730E22
DBAF235BAE2FDF433CFCFEF42474FD692365E95CC9FACB017917F030C162B43F
F821BAAA4064F36460A408EBD8069F2E2ED4FB44940825628AED36DF8913531C
E664A57FC94B0C88397914346E0F9835D44453> |-
/O <1C60D8A8C9B6079FE817D875D2CBFFB503E4F96244F88E61D6D43749BC5A
7E2A4AD1D3A330D0DB49AE721BEE3CAE7BE0E830B1A3D9E1EAB05F2889FBAC73
040643F231661EBA1C56BC014417BBE042657B1816F2530250386BCC71ACC0F0
178CC3B2199F5EBE3A27FEE55BE4E1589D4A9FEAE0> |-
/R <1C60D8A8C9B64EDF88209F7A997C7FFEA49FD130FF2EB161180E9D778147
EDE9CE3942BE8ED42B1C557F39ABB6FFCAB7703FBBD841BCA5C4CDEA33151AA8
FA7FE97576EC19935532735B2832675D342A25517A9C6B2015900B8DB519A35B
ED6FBD1AC9593F6FA2209011B88FD148C1954978F9BEE0B176FC81844EA7C58C
AE80C3E829D2275350093D49035D00C7DC60B166DC1B5F4F51F159336FA41338
FC151F9EA6B844> |-
/S <1C60D8A8C9B7EF32A193189DB9D17209C0D673C51A4A9D0AFA0CF93640BE
1369830C4B1E5F2B2201071D9B7F4CDC42BECF3A9BDFC262FF9B0126EC2DFF92
DEBC177F9FE9066BC07170907A6A68094B0751FC120D2B643228D09A9B74145C
78AC60F5C8404626BE8CC501CB3750E6FF670E8257C03F076EEF6F718C4EAD6B
63CE3CE57C5270227EEFDA47CC8106FDE97CF856E48763DC35AFA57FAAA2D5CF
9C45FA761286C50EF3AA5DA4D8C01A97EA75209B97504A035042EDA0BDBCB784
A7C97FF3BA9AA15AE9C9AA6EF47285B6DDE6A0> |-
/W <1C60D8A8C9B5D6EF35A61E5C4AB51F5A0591BE5B6578A60657C4C5AA3001
AF23E743FE88248BB1498CF903FCFF4AC04BD087B877CEC0AE3DBEDAA8650F9D
B2F4266825693854EE0ADAB57078C55788E3ED00D2146DBAB4BE8E8C609F2650
AFC2FB0FE18CF8F33532F38D2A543574D2B5E323D30DDD4AA7E3AC4F711E75A7
2E6BCAC6D0C3F65699A3A0ECE146A454CBBC83B4A661E0286CCBCFA13870C630
8312D3225D491E9D6C5438FBF5426BEE3595F05A61F03C1EEFCBD43EF17674B0
8E19A3450BB50DB2394CD53240C0C2A70F3A12D175A0D6948EF30F39ACF9486B
B87B9E4B1B733BAD448034> |-
/Z <1C60D8A8C9B7D8BE6A707DD4F45CF39FF006206B6F97EE5A325B87206BC9
0692F83D60FF3240A1B6D1A396B49DF396346014ED46740073EBD7E38664575B
A2738D42C5C6FFA493F6B585AF0A1B5B2DFCB77E8E6FE2FEB183379EA46B7B7B> |-
/dieresis <1C60D8A8C9B81F2C352CF58690566F81A5FBD13F49BAE01A59BCF
DE39A63EA53DF35ADDB65AA774F79661D4E95E9156E52843CE70909B0C8FAB36
E07A952769D0FAA4D123F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEB+Times-Roman /WGJAAA+Times-Roman findfont ct_VMDictPut
/TIADEB+Times-Roman*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one 7{/.notdef}rp 
/nine 7{/.notdef}rp /A /B /.notdef /D /E /.notdef 
/G /.notdef /I /.notdef /K /L /M /N 
/O 2{/.notdef}rp /R /S 3{/.notdef}rp /W 2{/.notdef}rp /Z 
109{/.notdef}rp /dieresis 55{/.notdef}rp]
TIADEB+Times-Roman nf
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
80.4672 -20.3184 mo
(190)
[5.13383 5.13383 0 ]xsh
TIADEB+Times-Roman*1 [8.4683 0 0 -8.4683 0 0 ]msf
166.593 -20.3184 mo
(I.)
[2.82242 0 ]xsh
176.45 -22.2839 mo
(\310)sh
174.809 -20.3184 mo
(OZDEMIR,W.A.M.BREKELMANSANDM.G.D.GEERS)
[6.11412 5.17406 6.11412 5.17406 7.52838 2.81989 5.64842 5.37822 7.20737 5.39261 6.11412 5.39261 
7.5284 5.38583 5.64841 5.64844 5.17404 6.11411 5.17407 5.17407 7.52838 6.11414 6.11411 7.978 
6.11411 6.11411 9.38879 7.52838 5.39264 6.11411 5.38583 6.11414 5.39261 6.11411 5.17407 5.17407 
5.64841 0 ]xsh
.25 lw
0 lc
0 lj
2.613 ml
[] 0 dsh
true sadj
250.839 79.3761 mo
263.74 79.3761 li
263.74 72.9421 li
258.572 66.5092 li
250.839 66.5092 li
250.839 79.3761 li
cp
258.577 66.5291 mo
261.165 56.8121 li
259.212 47.1441 li
250.862 47.1441 li
250.862 66.5291 li
259.2 47.1251 mo
262.466 35.5681 li
261.159 27.8301 li
250.859 27.8301 li
250.859 47.1751 li
261.154 27.8311 mo
263.741 20.0981 li
263.741 14.9541 li
250.864 14.9541 li
250.864 27.8311 li
263.76 79.3571 mo
283.07 79.3972 li
283.07 68.4191 li
274.699 67.1541 li
263.76 72.9601 li
274.71 67.1461 mo
271.465 53.5881 li
261.151 56.8331 li
271.47 53.6011 mo
275.338 37.5161 li
262.447 35.5541 li
275.332 37.4962 mo
274.665 25.2731 li
263.73 20.1161 li
274.677 25.2701 mo
283.081 22.6771 li
283.081 14.9431 li
263.723 14.9431 li
283.007 79.3911 mo
302.353 79.3911 li
302.353 72.9312 li
283.042 68.4111 li
287.556 53.5881 li
285.007 43.2751 li
275.347 37.5261 li
285.008 43.2592 mo
290.159 35.5811 li
290.817 25.2781 li
283.089 22.7021 li
290.803 25.2861 mo
302.379 23.3242 li
302.379 14.9401 li
283.072 14.9401 li
304.968 47.1901 mo
297.878 36.8821 li
290.183 35.5761 li
297.865 36.8842 mo
307.547 27.8361 li
302.371 23.3301 li
315.27 47.1851 mo
315.27 27.8401 li
307.569 27.8401 li
302.371 14.9411 mo
315.27 14.9411 li
315.27 27.8401 li
280.791 48.4321 mo
280.791 6.31714 li
302.373 79.3792 mo
315.27 79.3792 li
315.27 66.4832 li
306.271 66.4832 li
302.373 72.9321 li
306.271 66.4832 mo
298.378 56.8101 li
304.971 47.1851 li
315.27 47.1851 li
315.27 66.4832 li
298.372 56.8181 mo
287.585 53.6181 li
.699947 .676783 .637873 .738277 cmyk
@
241.31 30.9611 mo
241.36 32.2741 li
241.21 32.2741 li
241.177 31.9251 241.086 31.6761 240.92 31.5261 cv
240.753 31.3851 240.471 31.3101 240.072 31.3101 cv
238.302 31.3101 li
238.302 35.6721 li
238.302 35.9041 238.352 36.0701 238.452 36.1621 cv
238.551 36.2621 238.717 36.3121 238.942 36.3121 cv
239.166 36.3121 li
239.166 36.4611 li
236.707 36.4611 li
236.707 36.3121 li
236.848 36.3121 li
237.089 36.3121 237.256 36.2621 237.363 36.1621 cv
237.463 36.0701 237.513 35.9041 237.513 35.6801 cv
237.513 31.7421 li
237.513 31.5181 237.463 31.3521 237.363 31.2521 cv
237.264 31.1611 237.089 31.1111 236.848 31.1111 cv
236.707 31.1111 li
236.707 30.9611 li
241.31 30.9611 li
f
263.178 4.63812 mo
263.228 5.95013 li
263.078 5.95013 li
263.045 5.60211 262.953 5.35211 262.787 5.20313 cv
262.621 5.06213 262.339 4.98615 261.94 4.98615 cv
260.17 4.98615 li
260.17 9.34912 li
260.17 9.58112 260.22 9.74713 260.32 9.83813 cv
260.42 9.93915 260.586 9.9881 260.81 9.9881 cv
261.034 9.9881 li
261.034 10.1381 li
258.575 10.1381 li
258.575 9.9881 li
258.716 9.9881 li
258.957 9.9881 259.123 9.93915 259.231 9.83813 cv
259.331 9.74713 259.381 9.58112 259.381 9.35712 cv
259.381 5.41913 li
259.381 5.19415 259.331 5.02814 259.231 4.9281 cv
259.132 4.83716 258.957 4.78711 258.716 4.78711 cv
258.575 4.78711 li
258.575 4.63812 li
263.178 4.63812 li
f
242.692 32.2731 mo
244.511 32.2731 li
244.511 32.7031 li
242.206 32.7031 li
242.206 29.1131 li
242.692 29.1131 li
242.692 32.2731 li
f
262.77 3.14514 mo
265.685 3.14514 li
265.685 3.57416 li
264.47 3.57416 li
264.47 6.73413 li
263.985 6.73413 li
263.985 3.57416 li
262.77 3.57416 li
262.77 3.14514 li
f
262.01 85.9631 mo
262.06 87.2751 li
261.911 87.2751 li
261.878 86.9261 261.786 86.6771 261.62 86.5281 cv
261.454 86.3861 261.171 86.3121 260.773 86.3121 cv
259.003 86.3121 li
259.003 90.6732 li
259.003 90.9061 259.052 91.0721 259.152 91.1641 cv
259.252 91.2631 259.418 91.3131 259.643 91.3131 cv
259.867 91.3131 li
259.867 91.4631 li
257.407 91.4631 li
257.407 91.3131 li
257.549 91.3131 li
257.79 91.3131 257.956 91.2631 258.064 91.1641 cv
258.164 91.0721 258.214 90.9061 258.214 90.6821 cv
258.214 86.7441 li
258.214 86.5201 258.164 86.3531 258.064 86.2531 cv
257.964 86.1621 257.79 86.1121 257.549 86.1121 cv
257.407 86.1121 li
257.407 85.9631 li
262.01 85.9631 li
f
262.578 84.1611 mo
264.158 84.1611 li
264.828 84.1611 265.173 84.5761 265.173 85.0661 cv
265.173 85.3011 265.088 85.6311 264.693 85.8161 cv
264.928 85.9111 265.342 86.0761 265.342 86.6911 cv
265.342 87.2661 264.918 87.7511 264.123 87.7511 cv
262.578 87.7511 li
262.578 84.1611 li
cp
263.063 85.6812 mo
263.938 85.6812 li
264.402 85.6812 264.688 85.5411 264.688 85.1011 cv
264.688 84.7661 264.483 84.5761 263.943 84.5761 cv
263.063 84.5761 li
263.063 85.6812 li
cp
263.063 87.3361 mo
264.098 87.3361 li
264.603 87.3361 264.858 87.0811 264.858 86.6812 cv
264.858 86.1761 264.413 86.0761 264.018 86.0761 cv
263.063 86.0761 li
263.063 87.3361 li
f
250.87 82.3421 mo
315.198 82.3421 li
246.007 53.5941 mo
246.007 79.5302 li
246.007 14.9591 mo
246.007 45.7291 li
246.007 14.9591 mo
244.501 14.9591 li
247.507 14.9591 mo
246.001 14.9591 li
246.007 14.9591 mo
247.184 14.2951 li
244.83 15.6231 mo
246.007 14.9591 li
@
244.265 50.3531 mo
244.969 50.3531 li
244.969 44.6089 li
244.265 44.6089 li
cp
f
278.996 85.1191 mo
286.367 85.1191 li
286.367 80.3032 li
278.996 80.3032 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
278.996 85.1191 mo
286.367 85.1191 li
286.367 80.3032 li
278.996 80.3032 li
cp
@
280.986 86.8351 mo
281.69 86.8351 li
281.69 81.0908 li
280.986 81.0908 li
cp
.699947 .676783 .637873 .738277 cmyk
f
283.885 88.4622 mo
283.414 88.4622 li
283.414 85.9671 li
282.595 85.9671 li
282.595 85.6171 li
283.164 85.5771 283.4 85.5222 283.539 84.9471 cv
283.885 84.9471 li
283.885 88.4622 li
f
275.392 82.3401 mo
279.53 82.3401 li
@
245.757 50.0872 mo
245.757 48.9421 246.592 48.8271 246.972 48.8271 cv
247.582 48.8271 248.072 49.2221 248.072 49.8771 cv
248.072 50.5071 247.657 50.7722 247.132 51.0521 cv
246.767 51.2521 li
246.287 51.5172 246.182 51.7921 246.162 51.9271 cv
248.072 51.9271 li
248.072 52.3421 li
245.667 52.3421 li
245.692 51.6121 246.022 51.2221 246.492 50.9471 cv
246.957 50.6771 li
247.332 50.4622 247.602 50.3171 247.602 49.8571 cv
247.602 49.5771 247.422 49.2221 246.907 49.2221 cv
246.242 49.2221 246.212 49.8421 246.197 50.0872 cv
245.757 50.0872 li
f
322.391 31.2361 mo
322.441 32.5491 li
322.291 32.5491 li
322.258 32.2001 322.166 31.9511 322 31.8011 cv
321.834 31.6602 321.552 31.5861 321.152 31.5861 cv
319.383 31.5861 li
319.383 35.9471 li
319.383 36.1801 319.433 36.3461 319.532 36.4381 cv
319.632 36.5371 319.799 36.5872 320.023 36.5872 cv
320.247 36.5872 li
320.247 36.7361 li
317.788 36.7361 li
317.788 36.5872 li
317.929 36.5872 li
318.17 36.5872 318.336 36.5371 318.444 36.4381 cv
318.544 36.3461 318.594 36.1801 318.594 35.9561 cv
318.594 32.0181 li
318.594 31.7932 318.544 31.6271 318.444 31.5271 cv
318.345 31.4362 318.17 31.3861 317.929 31.3861 cv
317.788 31.3861 li
317.788 31.2361 li
322.391 31.2361 li
f
323.67 32.5551 mo
323.186 32.5551 li
323.186 28.9651 li
324.845 28.9651 li
325.436 28.9651 326.026 29.1701 326.026 29.9301 cv
326.026 30.4601 325.755 30.6552 325.526 30.7901 cv
325.731 30.8751 325.936 30.9651 325.955 31.4651 cv
325.986 32.1151 li
325.99 32.3151 326.015 32.3901 326.165 32.4751 cv
326.165 32.5551 li
325.57 32.5551 li
325.5 32.3351 325.486 31.7901 325.486 31.6552 cv
325.486 31.3601 325.425 31.0151 324.845 31.0151 cv
323.67 31.0151 li
323.67 32.5551 li
cp
323.67 30.6001 mo
324.795 30.6001 li
325.151 30.6001 325.526 30.5101 325.526 29.9801 cv
325.526 29.4251 325.12 29.3801 324.88 29.3801 cv
323.67 29.3801 li
323.67 30.6001 li
f
246.007 79.5302 mo
244.501 79.5302 li
247.507 79.5302 mo
246.001 79.5302 li
246.007 79.5302 mo
247.184 78.8661 li
244.83 80.1942 mo
246.007 79.5302 li
250.87 82.3421 mo
250.87 80.8361 li
250.87 83.8421 mo
250.87 82.3361 li
250.87 82.3421 mo
250.206 83.5191 li
251.534 81.1651 mo
250.87 82.3421 li
315.198 82.3421 mo
315.198 80.8361 li
315.198 83.8421 mo
315.198 82.3361 li
315.198 82.3421 mo
314.534 83.5191 li
315.862 81.1651 mo
315.198 82.3421 li
280.791 48.4321 mo
322.906 48.4321 li
250.862 64.6641 mo
241.894 64.6641 li
244.252 63.7691 li
241.894 64.6641 mo
244.252 65.5591 li
238.971 61.1552 mo
239.379 61.0151 239.802 60.8571 240.218 60.7251 cv
238.955 60.2941 li
240.229 60.7281 mo
237.302 60.7281 li
@
237.208 65.1191 mo
237.208 61.5251 li
237.755 61.5251 li
237.755 62.0381 li
238.018 61.6431 238.399 61.4492 238.898 61.4492 cv
239.112 61.4492 239.313 61.4832 239.493 61.5601 cv
239.68 61.6431 239.812 61.7401 239.902 61.8712 cv
239.991 61.9962 240.054 62.1481 240.095 62.3211 cv
240.116 62.4321 240.123 62.6261 240.123 62.9102 cv
240.123 65.1191 li
239.514 65.1191 li
239.514 62.9312 li
239.514 62.6891 239.493 62.5021 239.445 62.3771 cv
239.396 62.2521 239.313 62.1552 239.195 62.0861 cv
239.07 62.0101 238.932 61.9751 238.773 61.9751 cv
238.51 61.9751 238.288 62.0581 238.101 62.2181 cv
237.907 62.3842 237.818 62.6951 237.818 63.1591 cv
237.818 65.1191 li
237.208 65.1191 li
f
241.79 62.6111 mo
243.611 62.6111 li
243.611 63.0411 li
241.305 63.0411 li
241.305 59.4511 li
241.79 59.4511 li
241.79 62.6111 li
f
298.297 29.3591 mo
307.259 24.1591 316.422 19.5131 325.628 14.7571 cv
@
329.773 11.2811 mo
330.318 11.2811 li
329.007 14.8712 li
328.492 14.8712 li
327.182 11.2811 li
327.722 11.2811 li
328.747 14.3411 li
328.757 14.3411 li
329.773 11.2811 li
f
262.218 95.8101 mo
262.262 96.9611 li
262.13 96.9611 li
262.101 96.6552 262.021 96.4371 261.875 96.3062 cv
261.73 96.1821 261.482 96.1161 261.132 96.1161 cv
259.58 96.1161 li
259.58 99.9421 li
259.58 100.147 259.623 100.292 259.711 100.372 cv
259.798 100.46 259.944 100.503 260.141 100.503 cv
260.338 100.503 li
260.338 100.635 li
258.18 100.635 li
258.18 100.503 li
258.304 100.503 li
258.515 100.503 258.661 100.46 258.756 100.372 cv
258.843 100.292 258.887 100.147 258.887 99.9492 cv
258.887 96.4951 li
258.887 96.2982 258.843 96.1521 258.756 96.0651 cv
258.669 95.9851 258.515 95.9411 258.304 95.9411 cv
258.18 95.9411 li
258.18 95.8101 li
262.218 95.8101 li
f
264.405 98.2802 mo
268.144 98.2802 li
268.144 97.9306 li
264.405 97.9306 li
cp
f
264.405 99.6141 mo
268.144 99.6141 li
268.144 99.2566 li
264.405 99.2566 li
cp
f
275.609 95.8601 mo
275.654 97.0121 li
275.522 97.0121 li
275.493 96.7061 275.413 96.4871 275.267 96.3561 cv
275.121 96.2321 274.874 96.1661 274.524 96.1661 cv
272.971 96.1661 li
272.971 99.9931 li
272.971 100.197 273.015 100.342 273.102 100.422 cv
273.19 100.51 273.336 100.554 273.532 100.554 cv
273.729 100.554 li
273.729 100.685 li
271.572 100.685 li
271.572 100.554 li
271.696 100.554 li
271.907 100.554 272.053 100.51 272.148 100.422 cv
272.235 100.342 272.279 100.197 272.279 100 cv
272.279 96.5451 li
272.279 96.3491 272.235 96.2031 272.148 96.1151 cv
272.06 96.0352 271.907 95.9911 271.696 95.9911 cv
271.572 95.9911 li
271.572 95.8601 li
275.609 95.8601 li
f
276.568 96.7361 mo
278.388 96.7361 li
278.388 97.1671 li
276.083 97.1671 li
276.083 93.5771 li
276.568 93.5771 li
276.568 96.7361 li
f
279.767 96.9461 mo
280.116 96.9461 li
280.116 98.6511 li
281.808 98.6511 li
281.808 98.9941 li
280.116 98.9941 li
280.116 100.685 li
279.767 100.685 li
279.767 98.9941 li
278.069 98.9941 li
278.069 98.6511 li
279.767 98.6511 li
279.767 96.9461 li
f
286.101 95.8601 mo
286.145 97.0121 li
286.013 97.0121 li
285.984 96.7061 285.904 96.4871 285.758 96.3561 cv
285.612 96.2321 285.364 96.1661 285.015 96.1661 cv
283.462 96.1661 li
283.462 99.9931 li
283.462 100.197 283.506 100.342 283.593 100.422 cv
283.681 100.51 283.826 100.554 284.024 100.554 cv
284.22 100.554 li
284.22 100.685 li
282.063 100.685 li
282.063 100.554 li
282.187 100.554 li
282.398 100.554 282.544 100.51 282.639 100.422 cv
282.726 100.342 282.77 100.197 282.77 100 cv
282.77 96.5451 li
282.77 96.3491 282.726 96.2031 282.639 96.1151 cv
282.551 96.0352 282.398 95.9911 282.187 95.9911 cv
282.063 95.9911 li
282.063 95.8601 li
286.101 95.8601 li
f
287.411 97.2321 mo
286.927 97.2321 li
286.927 93.6422 li
288.586 93.6422 li
289.177 93.6422 289.767 93.8471 289.767 94.6071 cv
289.767 95.1371 289.496 95.3322 289.267 95.4671 cv
289.472 95.5521 289.677 95.6422 289.697 96.1422 cv
289.727 96.7921 li
289.732 96.9921 289.756 97.0671 289.906 97.1521 cv
289.906 97.2321 li
289.312 97.2321 li
289.241 97.0121 289.227 96.4671 289.227 96.3322 cv
289.227 96.0371 289.166 95.6921 288.586 95.6921 cv
287.411 95.6921 li
287.411 97.2321 li
cp
287.411 95.2771 mo
288.536 95.2771 li
288.892 95.2771 289.267 95.1871 289.267 94.6571 cv
289.267 94.1021 288.862 94.0571 288.621 94.0571 cv
287.411 94.0571 li
287.411 95.2771 li
f
291.004 96.9461 mo
291.354 96.9461 li
291.354 98.6511 li
293.044 98.6511 li
293.044 98.9941 li
291.354 98.9941 li
291.354 100.685 li
291.004 100.685 li
291.004 98.9941 li
289.306 98.9941 li
289.306 98.6511 li
291.004 98.6511 li
291.004 96.9461 li
f
297.337 95.8601 mo
297.381 97.0121 li
297.25 97.0121 li
297.221 96.7061 297.141 96.4871 296.994 96.3561 cv
296.849 96.2321 296.601 96.1661 296.251 96.1661 cv
294.698 96.1661 li
294.698 99.9931 li
294.698 100.197 294.742 100.342 294.83 100.422 cv
294.917 100.51 295.064 100.554 295.26 100.554 cv
295.457 100.554 li
295.457 100.685 li
293.299 100.685 li
293.299 100.554 li
293.423 100.554 li
293.635 100.554 293.78 100.51 293.875 100.422 cv
293.963 100.342 294.006 100.197 294.006 100 cv
294.006 96.5451 li
294.006 96.3491 293.963 96.2031 293.875 96.1151 cv
293.788 96.0352 293.635 95.9911 293.423 95.9911 cv
293.299 95.9911 li
293.299 95.8601 li
297.337 95.8601 li
f
296.949 93.5531 mo
299.864 93.5531 li
299.864 93.9821 li
298.649 93.9821 li
298.649 97.1431 li
298.164 97.1431 li
298.164 93.9821 li
296.949 93.9821 li
296.949 93.5531 li
f
302.24 96.9461 mo
302.59 96.9461 li
302.59 98.6511 li
304.281 98.6511 li
304.281 98.9941 li
302.59 98.9941 li
302.59 100.685 li
302.24 100.685 li
302.24 98.9941 li
300.542 98.9941 li
300.542 98.6511 li
302.24 98.6511 li
302.24 96.9461 li
f
308.574 95.8601 mo
308.617 97.0121 li
308.487 97.0121 li
308.457 96.7061 308.377 96.4871 308.232 96.3561 cv
308.086 96.2321 307.838 96.1661 307.488 96.1661 cv
305.936 96.1661 li
305.936 99.9931 li
305.936 100.197 305.98 100.342 306.067 100.422 cv
306.155 100.51 306.3 100.554 306.497 100.554 cv
306.693 100.554 li
306.693 100.685 li
304.536 100.685 li
304.536 100.554 li
304.66 100.554 li
304.871 100.554 305.018 100.51 305.112 100.422 cv
305.199 100.342 305.243 100.197 305.243 100 cv
305.243 96.5451 li
305.243 96.3491 305.199 96.2031 305.112 96.1151 cv
305.025 96.0352 304.871 95.9911 304.66 95.9911 cv
304.536 95.9911 li
304.536 95.8601 li
308.574 95.8601 li
f
309.457 93.5181 mo
311.037 93.5181 li
311.707 93.5181 312.052 93.9331 312.052 94.4221 cv
312.052 94.6571 311.967 94.9871 311.572 95.1721 cv
311.807 95.2681 312.222 95.4331 312.222 96.0471 cv
312.222 96.6231 311.797 97.1071 311.002 97.1071 cv
309.457 97.1071 li
309.457 93.5181 li
cp
309.943 95.0381 mo
310.818 95.0381 li
311.282 95.0381 311.568 94.8981 311.568 94.4581 cv
311.568 94.1231 311.362 93.9331 310.822 93.9331 cv
309.943 93.9331 li
309.943 95.0381 li
cp
309.943 96.6921 mo
310.977 96.6921 li
311.482 96.6921 311.737 96.4381 311.737 96.0381 cv
311.737 95.5321 311.292 95.4331 310.897 95.4331 cv
309.943 95.4331 li
309.943 96.6921 li
f
280.791 6.31714 mo
281.687 8.67511 li
280.791 6.31714 mo
279.897 8.67511 li
322.906 48.4321 mo
320.549 49.3261 li
322.906 48.4321 mo
320.549 47.5371 li
@
253.431 77.7581 mo
252.961 77.7581 li
252.961 75.2631 li
252.141 75.2631 li
252.141 74.9131 li
252.711 74.8731 252.946 74.8181 253.086 74.2431 cv
253.431 74.2431 li
253.431 77.7581 li
f
311.95 75.3621 mo
311.95 74.2171 312.785 74.1021 313.165 74.1021 cv
313.776 74.1021 314.266 74.4971 314.266 75.1521 cv
314.266 75.7821 313.851 76.0471 313.325 76.3271 cv
312.961 76.5271 li
312.481 76.7921 312.375 77.0671 312.356 77.2021 cv
314.266 77.2021 li
314.266 77.6171 li
311.861 77.6171 li
311.886 76.8871 312.216 76.4971 312.686 76.2221 cv
313.151 75.9521 li
313.526 75.7371 313.796 75.5921 313.796 75.1321 cv
313.796 74.8521 313.615 74.4971 313.101 74.4971 cv
312.436 74.4971 312.405 75.1171 312.391 75.3621 cv
311.95 75.3621 li
f
312.88 17.6251 mo
312.955 17.6301 313.035 17.6351 313.109 17.6351 cv
313.45 17.6351 313.78 17.5001 313.78 17.0601 cv
313.78 16.8501 313.655 16.5051 313.13 16.5051 cv
312.505 16.5051 312.465 17.0151 312.444 17.2601 cv
312.015 17.2601 li
312.015 16.7451 312.225 16.1101 313.15 16.1101 cv
313.83 16.1101 314.234 16.5001 314.234 17.0352 cv
314.234 17.4851 313.975 17.7001 313.785 17.7601 cv
313.785 17.7701 li
314.125 17.8801 314.37 18.1201 314.37 18.5901 cv
314.37 19.1651 314 19.7202 313.105 19.7202 cv
312.845 19.7202 312.625 19.6552 312.455 19.5651 cv
312.065 19.3601 311.96 18.9551 311.93 18.5501 cv
312.385 18.5501 li
312.4 18.8801 312.48 19.3251 313.135 19.3251 cv
313.585 19.3251 313.9 19.0501 313.9 18.6451 cv
313.9 18.0551 313.38 18.0001 313.08 18.0001 cv
313.015 18.0001 312.944 18.0051 312.88 18.0051 cv
312.88 17.6251 li
f
253.995 18.7751 mo
253.995 19.6301 li
253.555 19.6301 li
253.555 18.7751 li
252.02 18.7751 li
252.02 18.3452 li
253.63 16.1151 li
253.995 16.1151 li
253.995 18.3951 li
254.51 18.3951 li
254.51 18.7751 li
253.995 18.7751 li
cp
252.424 18.3951 mo
253.555 18.3951 li
253.555 16.8001 li
253.545 16.8001 li
252.424 18.3951 li
f
280.934 5.39813 mo
281.818 4.1051 li
280.973 2.8761 li
281.337 2.8761 li
281.997 3.8811 li
282.649 2.8761 li
283.003 2.8761 li
282.178 4.1001 li
283.096 5.39813 li
282.727 5.39813 li
282.002 4.32813 li
281.283 5.39813 li
280.934 5.39813 li
f
283.395 6.57312 mo
283.395 6.41113 li
283.602 6.21014 li
284.1 5.73615 284.328 5.48413 284.328 5.19012 cv
284.328 4.99213 284.234 4.80914 283.944 4.80914 cv
283.767 4.80914 283.62 4.89911 283.53 4.97412 cv
283.445 4.78815 li
283.578 4.67712 283.773 4.59015 283.998 4.59015 cv
284.415 4.59015 284.592 4.87811 284.592 5.1571 cv
284.592 5.51715 284.331 5.80811 283.92 6.2041 cv
283.767 6.34814 li
283.767 6.35413 li
284.64 6.35413 li
284.64 6.57312 li
283.395 6.57312 li
f
323.437 52.2592 mo
324.322 50.9671 li
323.476 49.7381 li
323.84 49.7381 li
324.501 50.7441 li
325.151 49.7381 li
325.507 49.7381 li
324.681 50.9622 li
325.599 52.2592 li
325.23 52.2592 li
324.506 51.1901 li
323.786 52.2592 li
323.437 52.2592 li
f
326.522 52.1021 mo
326.516 52.1021 li
326.177 52.2852 li
326.125 52.0841 li
326.552 51.8561 li
326.776 51.8561 li
326.776 53.8062 li
326.522 53.8062 li
326.522 52.1021 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
systemdict begin
TIADEB+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B81F2C356003C341CB3C0AFF26DCB10BE968C3373
5D0490DE9E1D2B63BDD94BF09326D808452018663EC0E0B5D9FA2C959557C08E
FE6E5F9DB5EDED2B1F838F0C755F534D38D268454E2E1B0A7EDD4BDE83737E75
7BBD3> |-
/parenleft <1C60D8A8C9B81F2C34DD536D135E3DC2036C5621FB149257DEF7
EF01B8EBEF529D91C968CCD864C3A7EA8CAE49A43204BC8C0E6B56729366A405
F48F07FB2F5BF728CB01600095C2246F678FB211050F8E3C34188A3912D4C079
8927090608A2DF7BB6ED5E69C236> |-
/parenright <1C60D8A8C9B81F2C34DD536D5F97D45D30861498AA1E31AB40D
4FAD4083A94A5920E5D72F2604B6BCA8B616958F4F26E967414295E5A532CCBD
AE16BE8F738AAC3B6F687DB94D3BDC1AD53F1B849A1526CBCC1F158C1D24DCC5
2349611F002211FC801C3042AF737> |-
/hyphen <1C60D8A8C9B81F2C3AED6A0ACBB713F07E156D095AB689E8AAD3AC4
621> |-
/two <1C60D8A8C9B7A73DC51CBB42D4425D7E1075A5A6036ADB835C8C5DEBF7
2CE9A7F3ECE784D8AD18F4C667920DDEE6610136C8B284FCB3911C010A448DBF
FD5DDBE98502753ED8C823DE019126E774C97F16AF2E7AC8B7ACE23743C4A56E
B7E83F771AAE4A072DC8A0E45E33C6792407CF2AD78E00BC8824E0133C> |-
/colon <1C60D8A8C9B854D083E206F04B4C3DD1885E23BE71D9873E6D58C612
BBB2C683E30FF936A8B88A313668F44DA225700BB984DC48298CBFBEFE950BFA
7627BBF7B4F682A710229CA5> |-
/F <1C60D8A8C9B7EF32570F0641406C9831D091B4FA149E181A9E247426F56F
E1B6D290C6D649BB1271FB0485B936DE1B56D4579EB1667E9B44163E694A844E
1D4E9EC67FDE3FEBDB0B44E702008830791FEFCB149FD30D032CF9929A3967E8
24F1025BD992DC650C082EA7E80CDBE2856A5E930ED19BCC13A31188DD5CD7F0
BD409AD4D300B9398E235A40C466> |-
/P <1C60D8A8C9B7EF32570F06412EEF5E3B0A6170F1D32354186FE38FEF02BB
817C5E602CB4E8D89F413771835F5B0BE3B665A9EC8F1262D15E2D6CC0FE00F2
77780F8E12FB91F06660F7EF7C77ECCABD1FC7C6DDEF54D045C20E15EF906127
FDA688470A91C644F34FA8BC7CF9A173D25F4FC916FED1B2529DB1D901714B7E
0DBF3F6BFF25359B1B57AFC31042B42445AC64CAE8DB> |-
/T <1C60D8A8C9B7D8BE6A40C97BA2F78A78C29C5AD71CF94FC913901C3BE398
1DCEBE9524A47757E082D568F1F6EBB90C5ABAB7BFE0D43445D64D960628C5FC
A0D4309BCB29AE4A0EC18D3380DB4802F35ACDB9035BACC5EF690FD50F5AD2FC
EA2710B078ECBCCF> |-
/V <1C60D8A8C9B6079F150BE669DD2F0D9328FB44641372A5E4CF5B38DEDCE6
10CCD9CE82DA726FA6DC581D2BE62AAAF66E7CCF30E78D6217F490A694CBD563
7C5D0F56106B104D1570467E2F3C7A7242C3FE33A6756771D0898107E4EFE005
01D5F4CB907D14B777882371203C8103EECDC3B5C543666A9D7C4262DE21AFD2
5AF5FDF0C57F4FF34DA9E60D6D159F> |-
/a <1C60D8A8C9B77FE2B8A30515908AAB9E18921C81D96B29ED830263562F91
1A7FFD2BB9A84A8FBF54F994C4A1CAA44D0C641DB08E6F3F7D3B9838795E9C4B
601928A250F28763D9031439324A665A2418BECB1AE237585C26FD275D6FFB8B
68286D7506799C7259F720A7F98628F76B103AD7BFBB69E24B465E26B0C2ED50
340C580D6570A38B4DB67D67BC8A1786AF2D8E962F1EB912CC75319705460BAF
C4793F0AF3F1D8CBEAE588776763D4ED372FA89AF63B161EC800657B56873F76> |-
/b <1C60D8A8C9B7A73DCF4C7692746DD4DAA0BF04ED750C600A83AC181C6A29
D5BC05619570908EAE7394F5AA4277CA6F294B8AD999BDAB1498AF3D0A6562BA
F06226FA749F273651FD0E7A72357926D39BA28C78B9C8354CE2149337D97AFD
A4BB27F04BE40ECA2F819FD6E014DA7BAEB1FB5647FAD3B65157AB798C7675C4
6FF76C32C3EDDB0737297FCAA9> |-
/c <1C60D8A8C9B77FE2B8AFB3806302FD4A93785E4D1F83F304F6E4FB9989AE
19B37E25F6273D7653D254FE9DEA6604828F2D9CFBE48F71FF76A8202FC20997
DAC792476800CB7D9B0EFF36C6594C3177314FCF54312BD40C98443575976F24
3EBC42D035C38167C2181F7C8A0557> |-
/d <1C60D8A8C9B7A73DCF20FD43C75634CB27F44BA2F0F681BDED3A1D5ED32A
E7D0134A4768EC7A39068766CCF3C499D787064332D8DF9554BA7A9D88E4E620
D774048A1F1FA98A7767E6732DCA7CBF5DC24825836E2580C4A669E97E4173E3
2BCAEB4E415C4299DC3749E044FADFF7FE795E231956042CF128C225F87E67CF
756B70413BA69A1648285EA6EC37C2E64C26634ECFCBD5485837ADBE2301FA8B
9F834783FFA5DEDB438BA695D4D4D1> |-
/e <1C60D8A8C9B77FE2B8AFB38FB97524D01B38989F8934F78DA1B31A973B6B
FAFBDEDCA249B58DBCE575B61E11AE42334251D6AFE195223EC0C59DF71C9D1F
404CECECBBA4C076C04D11EEEDEFD848A623B793926CAB00BE2461AB84336563
29328A0536744EB730C4C4F3BC1BCFC90EEF11F19D9442D8B28479BF5E> |-
/f <1C60D8A8C9B81F2C46F7F637BA9422EA77BC58F571498B8F501A94AD9ECB
D2116FDF3F65F3E8740C08F241DE436ED9FAF0FDFB1D5CEB51D2393B429CAE23
23F89DE670C1AD834FDBC090C9D68F1D15AF7B34DB65BAE4F60B0A7679A10693
AE8868B95AD5B1804027795B2B124817157578E257E316B16C715F78FA8B97> |-
/g <1C60D8A8C9B7A73DB58290C80097BE8A02FBF3B042DD222AC3182C050087
B5AE90C89F21EA9B44C8D8A60225EB264D56AC5E92D7655BCF8B42CE29FBC0A1
5435BED5BD965702ED92ED056AA6D8B9B7078C3006969E799C8E387600FF2DC8
49C9B1188B51B54C79059175E5FF5610747CBB24165735CB40B09E756D353465
483C31461F9221619682D1822589AA45B5BBECABE6EC147227758F87E1024B62
573BDD0EB5D960915D4A1C207284B406E3558D650C6F7BFBECE256871BF76B94
A9E37797C708EB7BB0359D405DEC4C508DD3D3A00DEFF8A286CD836B3165B983
CCD975352E32CBF7ACF469072ACBB96058D07E73D05CEF24B094325AF245F1AA
E9A54D9FB4AA109DC8> |-
/h <1C60D8A8C9B7A73DC54C6E6F71ADEDA8048E7AE41D7F325C51F2D4A8FF5A
AE1542FEB8F528D30464296A0C15BDE90E65A83DAC8C3F9FEA9BE0FC2DA3E6E5
218D460E089091140B4FD84696F917DFFD165F9DA09D19B552A0A60ACAF03940
A6A89DB5C7C3391D482B8263B520A94E4776A26181BEB97677FE959915EC9C5B
AA6704CB25E83831FF30BFD9060D2EB2178CCFF1AB8A469F356603D5179E1DC7
D763E4> |-
/i <1C60D8A8C9B854D08882A1CD62C077E936084FE79D55EBF5C06C48905067
94C10D34E0039F9A569893F1FCAC7E6818B601D2BD75B2A16F5B80130A31B713
AEDF49AF601B091F28928DD364C7DD0F3EC81EB913B4A7C92748D6045D7FA244
0BEB50B75C775BF3FE7B5D7CB8EB1868A5D704400B9DF620D77EFF11> |-
/k <1C60D8A8C9B7A73DC54C6E6F0F1F4ECE9813E868D8BD6D13C080D9993077
8ADD70BEDA0B0738BD7956CCD2A6E84E27ABFD0AEA39ECACB60AB011E6525072
94841F2F2C1A936A6498C9DA78B9559EE7DECBA508FA46DE4CDA8E5A3BD0F9A0
2CC9945991B78DA3FEBCA8DBB75A2C936D10A9444D56082C0E0B6D22A19152E7
5EB783E2B3288CCD19ACF198AADAF73EB3C41E84F5B95C554149A19B14406293
35DF430E9E339B01E847B9D65CA81EB9CF5F83832F65AA6FDED6A7691B2C2D83
43E90A84B31D1F0E3D75E2447F0404F1EACCDEEBFB9C75795BDAACFAA1DD960D
E2E888> |-
/l <1C60D8A8C9B854D08882A1CCD6683DC145FB231B93BF9B444D422E32576E
D29D0A2E80DB6E6CC29D866EFE85C51FF233A260DA4F821A0B1BB1CEBC3E7F9C
8634DEF9D4607ECEAE9CF6A18C121B7B0101539524D777BFF2D80B0FDC> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE2B1BF44C3FEED015A68B6
B486818E9636653A4F82B5CB24FB05B79E18924B440E365BA8BB65ADCCE005A5
9BBADE15B668EA3C7E36C6AE25060B93B28FB497610C59AFD75A177533800B3F
ADF59D17289639B4687FD00444ABC840E176C7968E8A77809C0AF682CFAFA25C
7FA974B5DB1CDFC1797034215CB0CB94191BA55B0B5BF367583A4F3F7F8DA522
DB7533BF872FB70819E5067154DC643393063C8EFDA0A0A4DF48F675222FA643
19F417111A8E34126D0D628B1A670033D8BE> |-
/n <1C60D8A8C9B7A73DC54C6E6F393129E8B57B644D1C76842E15AE2670D2C5
75D4D5C83902B640985DB2D9B0CF9758F9904FA0A3019780EDE44E773FFD53FC
AAB2A2D0B523CA536F2260BF4E6733EA47754C14744ABEC124313BF8535E9E53
B1475F9887AA83AE1614D435EF05202108F7BFF6E3E6FFB99BAECD1FE2946FCA
B534C1628966418C912553A07BD0E0271A66DF34B920C682303480> |-
/o <1C60D8A8C9B7A73DCF7C2AED2861B640B6974FA2B01BB322CEE17646DE0E
4E1A88626512F94A94F1C5C284D6A513D48CA8FEF4F11550EDAA67F122C27D62
E5AAB08D0D2586922B4CA0D08DB4C52D1EF92FE69BD8EE48F9FA85625029D3> |-
/p <1C60D8A8C9B7A73DB5811A09913A90C620434F142E337AE532A9A6C42887
C3782DA76EC8646B2AC721BC3B7BBC256C9EE563F658530755207F8798C002D5
C562CA50B4CE763877F24242B141FE8E5658D2720C7164AAB6DE96BAC0A1AFF9
963C0D31547D3149F45C89D337D6F9352E66118C3A1578257AAA04B69AF38E77
8EA5FDD2B24CAE6CB4F7DEDF4D178F484E44B370DDCECA1A499E3C33E16C1EA5
9B49DD843C6E0858FC5002A4E4DD0F6252F8> |-
/q <1C60D8A8C9B7A73DB5811A09915624F4FF2E14C3C0A833A3BAB9A79F570B
18B781F9F46DAFD5CD2E2448306319DCD145E5A87A68D95B97AC4D43289572A8
834454A8E18EE4372E3AF273D0C4DED1EF672C1F3407057EDC4A5453AF1AABF2
6FAF4D240D6A89D6CD4B86113285E87001C75749D1409EE7C9A10A4A0C63D0D5
A485EAE5D084BB8156D70CD73B4E59EBE3A81D6CEB75642E8DD1> |-
/r <1C60D8A8C9B81F2C46F7F637A087F8777C6F8F902F635ED3F83DE1A3E56B
C35F74A2736640AEA1531189158FACA7E5A0B28EFD28C7CEBC96084DA7EFDDB6
0180A10F5D7AD4229C0355612A85EF994949D05DF0A381F5B400F3DD0A2CAD6A
D95DA139475552B691D4AF9D3B66AA6F0BD92C2DD2667E50B40F110FA0CC3EE4
018BCEFDD74E76A7409B4CA57663A7DEE94A456BE853> |-
/s <1C60D8A8C9B7361F7401E78854BF377CDD5F0B6FE990FBDE01B0E4005076
7181C7B44723C394DCF0BFEECB3BF9CAABA30345EBF3DF89D630375165D6C576
5CB5B026544853F86386E4E6A7BE914EE6EC82DA3E8AF2EDA7B4624FDD87C4BD
9471D6BF39B76AEB2EA6A7EE4130465834442CF9E2EA29EDAB01B8116B017550
37E21BA333F355D159E4F17142636358C0FDBD1CA8E165DDC5836DDC9E3EB1E2
98FD12122651CCDF5297500703FFFD35C5212F0990CD> |-
/t <1C60D8A8C9B854D082849E6AA1721B285A4D2364C0360AB1A8B0E081CE35
130601E7A1D05607962E0008B26D795D347CFEAA6EF07D819FCDCCDFB94B107A
2B923723468799E79B2B9819A3A51EC0B808FDD9C41652DB9092D2F92C74DC89> |-
/u <1C60D8A8C9B7A73DCF20FD43F188DAF8E91D7BE7F994303C1FC228A9594B
9989EAB6930807FC468080DA91F58C5A1F838EC07DB0C23FFE971768F38079FE
CAB72E380DADA02D51EBD6DFA458B39CBCD81653492A3561CED02EFD73775D3F
CB995BF84C8A07A599265E8639DA9DAFC79BC1DC1BC627E0CB188F218CC91C1E
B446109B5CAA> |-
/v <1C60D8A8C9B7A73D3387F335058ACA7DA485C920AE9FB2B61FD39447A538
9749CE336EE4F37EDB9D50219D999030EE19AF5E6B7DE778381F5D82DE15D10C
278D0BA7022998F7623616B07B37B840E969FFA7B870106D45830A3DABDD5670
D70A69176732F4C4C9C76B293A> |-
/w <1C60D8A8C9B6079FE827C15FA3C17720BD860EE746F0B0C6566C7D05A8C6
7B7F2173BEA71CC20185F2A74D6E899A4B670D5414C158CFF0C01225BE68BC74
4543360B763317DF45F45E7E8D9F2B666D500AEEF7A3044065CB81AA3EE05260
188DF6AEF2975BEB017D0E54EE73413E31B110E662FAF91B7C1CFC69A78CE5E9
C41EBDBCEEDC4614636CDCE7A7E0BE75EA3FE611D9070BFA6F8C87574EA34921
68A8D601E51B471C6B53DB3F7074C5E8514E0D7261810559> |-
/x <1C60D8A8C9B7A73DC54C6E6F0F1F4E941599321B3F156B6C8A3DDE9F9A77
DF2CF01A592436745020E81E111087F8990AC4738010E857C255C7771ED6730F
8BF9370645F6D6B3E7424B2ED0668D469BCA45CECAAABD5CF1DB14CCE3170F64
75FAD82668E57E1AB6CD9A4759711F28909B841378961D6B837CFE623037AAF9
5242499DC449028E9DBE5146B8F83B5427A03CAA6833D8F927CAF5498CDFB9B2
075B7FBF1BC0FBFFF7E938F384C726275A400D48D88CD496A44D8B11903F50EE
01902F508FB2C09493A7> |-
/y <1C60D8A8C9B7A73DB582A31A5C40377963C07E270AEC17D592A8086D3076
C158CFEF515737F50D59D0BED5494C06AEBF31D56C66797A0C78D1F5AF15BDB7
CC276EB8259437AA6C12D43FCF85A7BB535DE8D196FD27D86F2F2B297F8E98F8
1804F656377299DB3671387FD9DCAD72033FBD6EE9181CC29BE74FF85B3F9A29
C4D13F5F071512A1DEDC07E76638A3BA7967321E246D4CCB5D58078831AC89E4
23792051CF0DF14F> |-
/z <1C60D8A8C9B77FE2B225CD3FA7A0E54E56E06E08C73A8B32742124011E7E
0660A236572AD0168673134941D2A755FBCB564F0AE75EB13709CB623EEEDA3B
51997C5DE68F9D701163682DE08C4A119C092E8F8B4C058162E413E70C695FD2
25> |-
/fi <1C60D8A8C9B7EF32570F064E24A82D783305E1F27E49E7C1F1B93A06526
F1D9BE98EC12A8426CDCB0F58C8A1826DACF80DB4F26F3A179A51D57CEC6ED54
B264C34DB3A57E9E71EE7AE4D67B0AE1774093220793C5E6147434144E11BD04
D0990CB26A426E6674ED4F7C5014D48306A344CA24FDB7E61A33445767320F29
5AFB2FB0D8A47FA9602BFFE6262DE9430AF02F6E07F328FC6FF88AA04837B1DA
94ABCECF54CE6CBB3D3C35EDECBF91F2CB88A169C332509D2C6EC25800C977D9
3305BA9A70B10463607B72330E9C7DB5840BDE961B4232F58C53DBA> |-
/fl <1C60D8A8C9B7EF32570F064E24A82D783305E1ED461D55C9B1F484CC299
213280C6276B5D95FBEDE6DB0C401E20F8B9FB94B200C42B7CA9CA57CE9B6DBF
11C9062DB7852779A0689BF2BA3B5F3ECA7D173A441CCF69906AADD2E2353534
360BF01EDF9D11B3CB198956BEB8CDF95CA71DAD9EBB6304F90684F023DEBD4D
C718FE2F34D534FAB57B3B3DC5B12452D5E95ABB74AD58CEBCBA92E76096845E
A0DE553EAD59083B1DFE0551DDE6DC3360E3F6A2030A4764B9971E14EC7E4967
7F857> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIADEB+Times-Roman /Encoding get
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 50 /two put
dup 58 /colon put
dup 70 /F put
dup 80 /P put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 174 /fi put
dup 175 /fl put
pop
%ADOEndSubsetFont
/TIADEB+Times-Roman*1 
[39{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 
/.notdef /zero /one /two 6{/.notdef}rp /nine /colon 6{/.notdef}rp 
/A /B /.notdef /D /E /F /G /.notdef 
/I /.notdef /K /L /M /N /O /P 
/.notdef /R /S /T /.notdef /V /W 2{/.notdef}rp 
/Z 6{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /q /r /s /t /u /v 
/w /x /y /z 51{/.notdef}rp /fi /fl 24{/.notdef}rp 
/dieresis 55{/.notdef}rp]
TIADEB+Times-Roman nf
TIADEB+Times-Roman*1 [9.4645 0 0 -9.4645 0 0 ]msf
236.009 119.527 mo
(Figure2.Micro-domain.)
[5.26225 2.63113 4.73225 4.73225 3.15161 7.48074 4.73035 5.638 8.41687 2.63113 4.20221 3.15161 
4.73227 3.15161 4.73224 4.73227 7.36334 4.20227 2.6311 4.73227 0 ]xsh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
80.4672 155.016 mo
(theunitoutwardnormalvectorsalongtheboundaries,e.g.)
[2.85372 5.13177 8.16508 5.13178 5.13177 2.85371 6.45141 5.13178 5.13177 2.85373 7.32979 4.55713 
3.41805 8.72638 5.13177 5.13177 3.41803 7.98447 4.55713 6.45142 4.96759 4.55714 4.55714 2.85371 
5.13179 3.41803 7.58844 4.55716 2.8537 5.13177 5.13181 8.73355 2.85373 5.13174 8.1579 5.13177 
5.13177 5.13177 5.13174 5.13177 4.55713 3.41803 2.8537 4.55713 3.99283 6.15585 4.55713 2.56641 
5.13177 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Times-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Times-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright Linotype-Hell AG, and or its subsidiaries.  Palatino is a Trademark of Linotype-Hell AG.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Times-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
dup 113 /q put
def
/FontBBox {-168 -218 1000 930} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 461 473 676 691 694 695] def
/BlueScale 0.0454545 def
/StdHW [28] def
/StdVW [139] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/n <1C60D8A8C9B7EF3257374925CEC8571F75D3ECDF8D3F0666592125EF1383
1A928B7BAA78FBD252CE0477C92A9366DAAEF74008494D8FBBDCE58B1AA43015
D934BBEA9D042581F7918196FB4191E5B1655A841B4DFCE4894DD78D00E86A25
47CDAC4EB6A9FF7C72CAFD2A41F937C7C5630BA83B95272872CCADBB4F1870A1
F5B18CFDE4F85E56BCB8F2452349> |-
/q <1C60D8A8C9B7EF32A18400054584B522AD6F84C87922FD6862B9DD3EB561
C8E25EAB2F944970CA8F4426E31E5136974EF526200C4B0647528573A7969A1D
301FDB56A8E8A07BDEA5FF56D4096027ED3C24926DB1BC0A82141C827A2BED35
790841FB855DFBE1242600A82B7F8ECB2BA304325D866DCAF7A6A1B7C669FC75
F2BCE719DFD8E4928CC5AE6D06B3C4281E4E343F04> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEC+Times-Bold /HIBBAA+Times-Bold findfont ct_VMDictPut
/TIADEC+Times-Bold*1 
[110{/.notdef}rp /n 2{/.notdef}rp /q 142{/.notdef}rp]
TIADEC+Times-Bold nf
TIADEC+Times-Bold*1 [10.2615 0 0 -10.2615 0 0 ]msf
331.265 155.016 mo
(n)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
336.974 151.294 mo
(L)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
342.245 155.016 mo
(.Fourcornerpointsarenumbered)
[6.17023 5.55865 5.13281 5.13281 7.01981 4.55817 5.13278 3.41907 5.13281 4.55814 7.01263 5.13281 
5.13278 2.85477 5.13278 2.85477 7.59564 4.55713 3.41907 8.15787 5.13281 5.13281 7.9855 5.13281 
4.55814 3.41907 4.55817 0 ]xsh
80.4678 166.975 mo
(incounter-clockwisedirectionstartingfromthelowerleftcornerasshowninFigure2.Forthe)
[2.85372 8.89877 4.55714 5.13177 5.13177 5.13177 2.85373 4.55713 3.19638 3.41803 4.55714 2.85371 
5.13177 4.55714 5.13177 7.40982 2.85373 3.99283 8.30154 5.13179 2.85371 3.41803 4.55714 4.55714 
2.85371 2.85373 5.13177 8.89159 3.98872 2.85371 4.55714 3.41803 2.85373 2.85371 5.13177 8.8916 
3.41801 3.41801 5.13177 11.7433 2.8537 5.13177 8.32312 2.85065 4.89575 7.40881 4.55713 7.17786 
2.8537 4.55713 3.41803 6.61661 4.55713 5.13174 3.41803 5.13177 4.55713 7.17065 4.55713 7.7619 
3.98871 5.13177 4.89575 7.40985 8.8916 2.8537 8.89874 5.70642 2.8537 5.13177 5.13177 3.41803 
8.32312 5.13177 6.32825 5.55865 5.13385 7.185 2.85065 5.13177 0 ]xsh
80.4678 178.926 mo
(solutionofEquation\(1\)in)
[3.99283 5.13177 2.85372 5.13178 2.85371 2.85373 5.13177 7.57401 5.13383 5.86026 6.27074 5.13177 
5.13177 4.55713 2.85373 2.85373 5.13177 7.56683 3.41803 5.13177 5.85309 2.85373 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+Times-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Times-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright Linotype-Hell AG, and or its subsidiaries.  Palatino is a Trademark of Linotype-Hell AG.) def
/Weight (Medium) def
/ItalicAngle -12 def
/BaseFontName (Times-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
def
/FontBBox {-169 -217 1010 883} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 -0 441 446 653 666 683 688] def
/BlueScale 0.0454545 def
/StdHW [33] def
/StdVW [80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/period <1C60D8A8C9B8707CABA78EB7338F15839B869347C2F1B92527EF5BF
5F7E2497B12FC199309D619A413> |-
/two <1C60D8A8C9B7A73DC50027783253CDE21CC39696FAC9372D161E1A4E2E
536F4693D48026CB5CB65DD68E28EA01621788554F72528AD734BD330C9C045C
667A771BA85E0444F2FEF8A9F77094C79BD5F19E6B0EB4243DB8CCE0B2040B86
1AE4167C3453ECCB7F6C1F9069A167CCDC830EEB29384FA973DAFBB3100664A4
3ED174027AC426> |-
/three <1C60D8A8C9B7A73DCA771ECD852611CFAE776DE0F1D67D0EF953F401
5B78F1AD0E3FD4F0010BA383CF8DF8B53A6D6CE7709694753D06BC7E34708DC4
2FE86154FE1F27F7C940F2753CEA5C81CE43B8A9C44AC04B122237B8E2A5367D
AA0DC53258CEB0F4FA49E116F8F615C66589D76ACA98EE283EF3323F89DA299A
E04FDE2DEF39A4F5FD8CAF> |-
/T <1C60D8A8C9B7EF32570D6B0B813CDD9D33E6BA55CDBB0DD5FCE84E47A7FE
25FEDFFD57FE6B47EE23A38F3015DA0D1A506EA04206834BF3F7BA685AA32453
7D7BEE2D98B2DF791242B61C4F92DE78701703F687A883EDC15A9851766FB2F0
D9A69A0BF4F19A08FA10809BF9D5A8AEFC7CE6744C2EF689D4DA55140D0FFDB4
1BAC7EB5175E0FC08EF3326BDFEC> |-
/V <1C60D8A8C9B7D8BE986A65E4C73DCFF0E4C6CE171BADB393B4FDA002C2D1
06A0C2A879BFC35C795A50294D0BF67C03E1B9F5EDF9F2A33236B96000B989EE
6E06FCF77FB61AAE585EBE7B57B133C6A524B4525968B2098E7B44734D6017EC
D563081A3ACD9F4A88A0480817C271> |-
/a <1C60D8A8C9B7A73DCEA80DF8A2DA29AE83861BB3D5D28C81778AABBB76C8
5B2F0A466530E418352BF9280D0324B893F740FD47EB0135F2F073FA4D9641CE
2F2995815BA1C2CE88FCAEF033832CDF7068C384F5E3E32461673CBDC87A1EE0
F13F722966908957127C0036FCE3DBC3BB9CC04145373792B519B4741BB59560
22C76D7E2F1D841F3137BDAE790EE20C9ED159C85C6583B797A154A1C400625C
5A35885F463C894619255C036F4A064F0253B38E09E5D6C0A6AA09ECC7296C9A
EB11> |-
/b <1C60D8A8C9B7A73DCE890DB5245D3B7E762BA041852AAF1B435F2509A5E8
B31974FE7F77181E6D0D5E54FE267759A0C44B80B44F3BA813F220A3AA852748
64A0CF34F0C9A97C959FDE97B7BFF9F782C10237B04E66690C44894347485807
C24B4B840C51A3D2F8C8D05301A344DD4441C37C12301DB25BD2AF83D5E1DD4E
51195607A1FDE72928FC8EF205EBAF8226609ED21BF30CF7CBC994EF3B58FE71
94F468AFF0414137E16F2794A7052955AE> |-
/c <1C60D8A8C9B77FE2B983D07588E7AA7D25CEA9C851EDC8964FCD45D99065
060DADD12189D87F6BB6C1353CE647C853436066A325F4C9A545CD95B38167E0
D336C72F2670127571DDD2655D02DF7601E42C1B0C65EA30F1A901F4394FE49E
EAAA8EB78B9E3ECB3D1EAB> |-
/e <1C60D8A8C9B77FE2B993B950F2827CB31739658329DEB2933AD4322B8F57
77EBE2B8E5B7A16FFBE6AF8CB08CE60923196B66E825DD52F5AA755CE6C84623
2DF609E3EEF47CFF78048CBB6A16C4DE8265459CA14711883E8902E095DCDF42
AA061E831EC92B42F333D08B18ECB879B3078771D0F9089824A0D9C1AD651FFE
91ADF04B624CA9B87D8E88876117D02C414FF0> |-
/h <1C60D8A8C9B7A73DCCE506557506F61A827BB524FED13373564F9D75C649
F980CAE54CDEBB76D0EE1E8EEBABB7BDCAB6B05FF62C47BAD52E60A51F38ACAB
FD88E18D7EDFDED940EE0F36747303578EA8F5130C3BBFD6891FC1CA603D22B9
79B7D0186204B27ABCCC60C0854A2CAE302EFADA8E0AF70A09F3A626056AF224
3C762860B6EE12E3F05CBF3B319F5DD2820E107DAD6DD1DA3DA110AA24EF2C05
5E6DB6098C1E244D286CE209E7C9FC933FCB9AEF3500EBFB1F43FFFFFD9B8B46
82D162D32721636734C9A41D52F08F314392F6CE5054EDB370A22475C2C0BDD2
BA5DC8956AFEED8EC4> |-
/i <1C60D8A8C9B854D083A90EFB296205BC5209507B87D7D1D9BB0AEC7AB6CC
9C4F07C268F9156D4C7D30A7295D50FFD74DC19B60C1D5936222340BC064BB02
C084F8A134E58D6EFB6A1A87FFFABC9BA9628776FEA359112E6A914695609CE2
2CD091E71EB488B1C02F1D5C0159B445D3420785F810CE39C57C65EE718BF302
4D1EF1E24E9FD57030567B1194142223AD0F5F519FC21A41520ACFD50642F344
33C801A979AC703971F3FA> |-
/l <1C60D8A8C9B854D083B9F772EB1097B392CC845FC0A2841C8C0F3D38229D
F7DE1A7E84E5C99F6D310883A6688F2FC8DB0CD0749E91A6A722B4B1F3655B6E
DAC4943246A8092E23A658010C0522D0B16E619526C0FAF1955F8C79EDF58ED8
529742CB0966E9140CEF68F65BFFC9E126B80F141CE3CFAA1418B581E2A45483
0FF5> |-
/m <1C60D8A8C9B6079F178DEE1E3F0DE27BBA437A8B94A56EC086E674B928AF
798CD0002884405EE536222D0D6C9F9BB0BC15FF8DFC66E7AD644B914E788F58
EC04A8C35E6A54622697C4639D3B3EACFFC5F02794EC9A2CE240418CFA212D34
772D7DDBAD667378B8059B0F6E9598B7AA6527D5738FD14652F728B414EB6353
CB1239BA3667404A1E4AD99E2150AF8F43137EB91038FFEDBF0CF7FABAA9C42B
7B6990E9CB7F6DA0D56AF1EEABAC1D56AB0A6967FF6D103143BCCB750F0C3036
EC81E4D7FB2B3C0C9E3852AA6719172672D65E21DE4EB2059BB572A0654ABFFA
0EA4B621EC53E670DEF47C58351AE87C04B609C7CBC17607AB89CAAD6B2FE4D3
C1F2307F013FA07D85DB8E3C50145EFADB3014BA854599649864F4D37AC7A549
E18EB29EB5C3FB831562B324> |-
/o <1C60D8A8C9B7A73DCE890DB503D880211D77B3CA661BACAEDBB30390BCB9
798E697446D80D841E785A8E8814A860E3526697571A80BD83E17BD9929C857A
06B6DFC8ED9CD923919239A02D9AF27161F9050A218980F6804D0529B4B222FC
0A10A14A1C76F973DEB8DDAACFEB0973> |-
/p <1C60D8A8C9B7A73DB58DAF6B4DBA5882EAC8929C592A7E2D3BA9870DB0D1
6EB5F9A044B62CBABC36D92794EBD309869923E5CA0575A35C0744CD1225051E
59FA35CE579343A60CF9FD4797492851F4FBB20198BE8C0319C58D731E42C8E4
FFC66886AE63CA31BD11F65CB7D1B609B6B9CB8BF63A5891839B28C378F848F7
18FCFEA9378D18797C687FEA15DDCCBF10C4EF60B4984BD8703D13A53EBBD60C
2864F33BC58D897634CAC18E26910DE5D154B49F539C46C6BF31FA334CFD9DC3
141FA738373CAF> |-
/r <1C60D8A8C9B7361F7E02BD7333159E7B778A0D8C873DFD5EEA008A1C30F2
2E2078E5067BAAD18071E73CA5B1A714FD00EA51D454DFF85DF11E6A6AD8CDB5
A7817318E070FA6856B69A90C5728C700C7A5D947EAE884DC84F98399F76EFEA
33045CA58E948F8D02449507F44312A6A4E07DE441E1E5559E247BDEF537D06D
F5365FF26B399A7A> |-
/s <1C60D8A8C9B7361F75F1072823BABE9BA125BDCC7EEDA177588C0DC00C06
004A18E8A99A36D14E72DACECFBCF02442D67D94920867432C02670447EB7848
0A08960C3CC5CA96339C9D2F2714D6E61BA31303E00EB85BD7BF5CEA3795CAF9
A53D47DD51A26CD4819673803D9D8E02079331B2C49785561B74944E069E064B
88A72ABA3DA102185CC3F2EA2523A3448BDD0565DEEC7BB728689208CBC985D2
100DF2DD71978F75F6> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADED+Times-Italic /QJJAAA+Times-Italic findfont ct_VMDictPut
/TIADED+Times-Italic*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three 32{/.notdef}rp /T /.notdef 
/V 10{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp 
/h /i 2{/.notdef}rp /l /m /.notdef /o /p 
/.notdef /r /s 140{/.notdef}rp]
TIADED+Times-Italic nf
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
191.604 178.926 mo
(V)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
199.43 178.926 mo
(,theBVPneedstobecomplementedwithproperboundaryconditions)
[5.0107 2.85063 5.13281 6.99834 6.84656 7.41086 8.15071 5.13382 4.55817 4.55814 5.13281 6.42276 
2.85065 7.58121 5.13382 6.99832 4.55716 5.13278 7.98553 5.13278 2.85477 4.55817 7.98547 4.55817 
5.13281 2.85474 4.55817 7.55966 7.40881 2.85477 2.85474 7.57401 5.13281 3.41904 5.13281 5.13281 
4.55817 5.85309 5.13281 5.13281 5.13278 5.13281 5.13278 4.55817 3.41907 7.55249 4.55817 5.13278 
5.13281 5.13281 2.85474 2.85477 2.85474 5.13281 5.13281 0 ]xsh
80.4678 190.878 mo
(whichcanbeformulatedintermsofaprescribedtemperatureoraprescribednormalheat\257ux)
[7.40983 5.13177 2.85373 4.55713 9.05064 4.55714 4.55714 9.05064 5.13177 8.47395 3.41803 5.13177 
3.41803 7.98447 5.13177 2.85373 4.55713 2.85373 4.55713 9.04347 2.85371 9.05066 2.85371 4.55714 
3.41803 7.98447 7.91272 5.13382 7.32974 8.48111 5.13177 3.41803 4.55713 3.9928 4.55713 3.41803 
2.8537 5.13177 4.55713 9.04346 2.85065 4.55713 7.98447 5.13177 4.5571 3.41803 4.55713 2.85373 
5.13177 3.418 8.45959 5.13177 7.33688 8.47394 5.13177 3.41803 4.55713 3.9928 4.55713 3.41803 
2.85373 5.13174 4.55713 9.04346 5.13177 5.13177 3.41803 7.98444 4.55713 6.76028 5.13174 4.55713 
4.55713 6.76746 5.70642 5.13177 0 ]xsh
80.4678 202.837 mo
(ontheboundary)
[5.1328 8.06348 2.85475 5.1328 7.495 5.1328 5.1328 5.1328 5.1328 5.1328 4.55817 3.41905 
0 ]xsh
%ADOBeginSubsetFont: GFNBAA+MathPackThirteen Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+MathPackThirteen def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1990 Adobe Systems Incorporated. All rights reservedMonotype Times Math is a trademark of Monotype Typography Limited) def
/Weight (regular) def
/ItalicAngle 0 def
/BaseFontName (MathPackThirteen) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /afii9796 put
def
/FontBBox {23 -305 964 811} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0 650 650 400 400] def
/OtherBlues [-200 -200] def
/StdHW [32] def
/StdVW [82] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/afii9796 <1C60D8A8C9B64EDF8E0B4F356E62294164FBA71834ED162282FA6
EF825BE8C717CD2F4820A89B5C03233603CFEE70758A407D04CBD47FE1C2A9B6
A0EB1E5239743EADD220DE40C9143A5B2A572B36B92E15E447E3330C581FF2F5
4A3312E8EE659919B65> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEE+MathPackThirteen /GFNBAA+MathPackThirteen findfont ct_VMDictPut
/TIADEE+MathPackThirteen*1 
[67{/.notdef}rp /afii9796 188{/.notdef}rp]
TIADEE+MathPackThirteen nf
TIADEE+MathPackThirteen*1 [10.2615 0 0 -10.2615 0 0 ]msf
150.839 202.837 mo
(C)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
157.679 202.837 mo
(.AsmentionedinSection2,thethermalcharacterizationofthemicrostructural)
[5.50838 7.4088 6.92659 7.98448 4.55713 5.13177 2.85371 2.85373 5.13177 5.13177 4.55714 8.0563 
2.85063 8.07068 5.7023 4.55714 4.55714 2.85371 2.85373 5.13179 8.06348 5.13382 5.50119 2.85065 
5.13177 7.495 2.85376 5.13177 4.55713 3.41803 7.98447 4.55713 5.77414 4.55713 5.13177 4.55713 
3.41803 4.55713 4.55713 2.8537 4.55713 3.41803 2.8537 4.55713 4.55713 2.8537 2.8537 5.13177 
8.0563 5.13382 6.34973 2.85065 5.13177 7.48779 7.9845 2.8537 4.55713 3.41803 5.13177 3.9928 
2.8537 3.41803 5.13177 4.55713 2.8537 5.13177 3.41803 4.55713 0 ]xsh
80.4688 214.788 mo
(componentsisdescribedbyFourier'slawofheatconduction,throughwhichthemicroscopicheat)
[4.55714 5.13177 7.98447 5.13177 5.13177 5.13178 4.55713 5.13177 2.85373 6.9194 2.85065 6.94095 
5.13383 4.55714 3.99283 4.55713 3.41803 2.85373 5.13177 4.55713 8.06349 5.13177 8.07785 5.55864 
5.13177 5.13181 3.41803 2.8537 4.55716 3.41803 2.84338 6.92657 2.85373 4.39194 10.3539 5.13382 
6.36411 5.13382 4.55713 4.55713 5.78851 4.55713 5.13174 5.13177 5.13177 5.13177 4.55713 2.8537 
2.85373 5.13174 5.13177 5.49402 2.8537 5.13177 3.41803 5.13174 5.13177 5.13177 8.06351 7.40982 
5.13174 2.85373 4.55713 8.07785 2.85065 5.13177 7.49503 7.98447 2.8537 4.55713 3.41803 5.13174 
3.99283 4.55713 5.13177 5.13177 2.8537 7.495 5.13385 4.55713 4.55713 0 ]xsh
80.4688 226.747 mo
(\257ux)
[5.70539 5.13075 0 ]xsh
TIADEC+Times-Bold*1 [10.2615 0 0 -10.2615 0 0 ]msf
100.362 226.747 mo
(q)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
106.063 228.291 mo
(m)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
116.561 226.75 mo
(canbedetermined.Itisimportanttonotethatthereareno)
[4.55816 4.55817 9.05783 5.1328 8.48112 5.13281 4.55815 2.85475 4.55817 3.41904 7.9855 2.85475 
5.1328 4.55817 5.13278 6.48015 3.42009 6.78183 2.85063 7.91991 2.85065 7.9855 5.1328 5.1328 
3.41907 2.85474 4.55817 5.13281 6.77466 2.85062 9.05783 5.13281 5.13278 2.85477 8.48114 2.85062 
5.13281 4.55817 6.77466 2.85062 5.13281 4.55817 3.41907 8.48111 4.55817 3.41907 8.48114 5.13382 
0 ]xsh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
373.739 226.75 mo
(apriori)
[9.05783 5.13382 3.98874 2.85165 5.13382 3.98874 0 ]xsh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
410.674 226.75 mo
(restrictionsonthe)
[3.41803 4.55713 3.99283 2.85373 3.41803 2.85373 4.55713 2.85373 2.8537 5.13177 5.13177 7.91992 
5.13177 9.05783 2.85373 5.13177 0 ]xsh
80.467 238.701 mo
(speci\256cationoftheconstitutivelawsandmaterialparameters\(e.g.constant,temperature-dependent)
[3.99283 5.13177 4.55714 4.55714 2.85371 5.70642 4.55714 4.55714 2.85371 2.85372 5.13178 7.55965 
5.13382 5.85309 2.85065 5.13177 6.98398 4.55713 5.13179 5.13177 3.99283 2.85371 2.85373 2.85373 
5.13177 2.85373 2.60641 4.96759 6.98398 2.85373 4.39192 7.40984 6.42993 4.55714 5.13177 7.55965 
7.98447 4.55713 2.8537 4.55713 3.41803 2.8537 4.55713 5.27747 5.13385 4.55713 3.41803 4.55713 
7.98444 4.55713 2.8537 4.55713 3.41803 6.40839 3.4201 4.55713 2.56635 5.13177 4.99634 4.55713 
5.13177 5.13177 3.9928 2.8537 4.55713 5.13177 2.85376 4.98914 2.85065 4.55713 7.98444 5.13177 
4.55713 3.41803 4.55713 2.8537 5.13177 3.41803 4.55713 3.41803 5.13177 4.55713 5.13177 4.55713 
5.13171 5.13177 4.55713 5.13177 0 ]xsh
80.467 250.66 mo
(and)
[4.55816 5.1328 0 ]xsh
%ADOBeginSubsetFont: OOLBAA+RMTMI Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OOLBAA+RMTMI def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation. Hinting (c) 1992, 1993 Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle -14.036 def
/BaseFontName (RMTMI) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 118 /v put
def
/FontBBox {0 -213 987 680} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 -0 653 672 428 441] def
/OtherBlues [268 271 -211 -192] def
/BlueScale 0.04796 def
/StdHW [34] def
/StdVW [73] def
/StemSnapH [20 34] def
/StemSnapV [55 73] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/parenleft <1C60D8A8C9B7262608B0369F2547D4122F05453AC249C0ECD29A
70A5D9E26E58BB37273881AE0562A275C2AC7FCDAE55E123F861E0CF13A2EE0B
3635C8145DB854CED07A> |-
/parenright <1C60D8A8C9B7262608B0369F2547D4123BC8206D92DECFC06BF
4E77CEBF128E9BDF9598F0CB9A9461C1B52CE9005130EB02B69F3C9B72981257
EC379BF98CCAF427C624A> |-
/slash <1C60D8A8C9B745265DB920B47933B671A6716EFB8EB6DAEE719CDC46
2CFE1483DCAB3C27> |-
/v <1C60D8A8C9B7544E8CC06D3843EFAD09343AA8759E916B7FBDA0B1F2770D
7DE0E33BEF44C0114830D9D3CC7C2BF8ADC65BA4DA36F5898F98E4AB739107A2
279B6B61A563C36EB4D83280F87E7753581077CB9E122C2FE2BCCB604C6013AE
4F87116354FFB4F5CF4F88E5B529DA2E91693C1D2AD8370FBE3056973F61B8C7
E9FCA239E80D6672BE53886C09F5F61BE25505295AA18E40F4BBD4DC30B6A2DB
283C041C74D6518969A2F29C4C2CEB06BFE2881D5DEB1BE7646A8D9AC7F044F3
122168E2174A213CAE> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEF+RMTMI /OOLBAA+RMTMI findfont ct_VMDictPut
/TIADEF+RMTMI*1 
[40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash 70{/.notdef}rp /v 137{/.notdef}rp]
TIADEF+RMTMI nf
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
95.2918 250.66 mo
(/)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
100.116 250.66 mo
(oranisotropic\)otherthanthebasicthermodynamicallimitations.)
[5.13177 6.68119 4.55713 5.13177 2.85373 3.99283 5.13177 2.85371 3.41803 5.13177 5.13179 2.85371 
4.55714 6.674 5.13177 2.85373 5.13177 4.55714 6.68835 2.85065 5.13177 4.55713 8.39494 2.85063 
5.13177 7.83365 5.13177 4.55713 3.99283 2.85373 7.82645 2.85065 5.13177 4.55713 3.41803 7.98447 
5.13177 5.13174 5.13177 5.13177 4.55713 7.98447 2.8537 4.55713 4.55713 6.09842 2.8537 2.85373 
7.98444 2.85373 2.8537 4.55713 2.85373 2.8537 5.13177 5.13177 3.99283 0 ]xsh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
80.467 277.761 mo
(3.2.Themacroscaleproblem)
[5.13177 2.56641 5.13177 7.69715 5.70641 5.13178 7.82645 7.40881 5.13177 4.55714 3.50642 8.40211 
3.99283 4.55714 5.13177 2.85371 7.82645 5.13385 3.50642 5.13177 5.13179 2.85371 4.55714 0 
]xsh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
80.467 295.696 mo
(Atthemacrolevel,theheatbalanceequationtakesthegeneraltime-dependentformaccordingto)
[7.40983 5.9763 2.85373 5.13177 7.66739 7.98447 4.55714 4.55714 3.41804 8.24408 2.85065 4.31291 
4.96759 4.55714 2.85371 5.68077 2.85063 5.13179 7.67456 5.13177 4.55714 4.55714 5.96193 5.13177 
4.55714 2.85371 4.55714 5.13177 4.55713 7.6674 4.55713 5.13177 5.13177 4.55713 2.85371 2.85373 
5.13174 8.24411 2.85062 4.55713 5.03226 4.55713 7.09897 2.85373 5.13174 7.67459 5.13379 4.55713 
5.13177 4.55713 3.41803 4.55713 5.96191 2.8537 2.85376 7.98444 4.55713 3.41803 5.13177 4.55713 
5.13177 4.55713 5.13177 5.13171 4.55713 5.13177 5.94757 3.41803 5.13177 3.41803 11.0947 4.55713 
4.55713 4.55713 5.13171 3.41803 5.13177 2.8537 5.13177 8.22974 2.8537 0 ]xsh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
222.343 317.397 mo
(\()sh
%ADOBeginSubsetFont: UGXAAA+MathPackTen Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+MathPackTen def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1990 Adobe Systems Incorporated. All rights reservedMonotype Times Math is a trademark of Monotype Typography Limited) def
/Weight (regular) def
/ItalicAngle -12 def
/BaseFontName (MathPackTen) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 104 /afii9835 put
dup 113 /afii9845 put
def
/FontBBox {23 -307 996 808} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0 650 650 400 400] def
/OtherBlues [-200 -200] def
/StdHW [23] def
/StdVW [72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/afii9835 <1C60D8A8C9B7A73DCCD88AB1D78AAF09FF4339CE4E5B3DCD67B48
9F893075249505BFB316AC52E0CC48B64737DD9960F9036905C6356955ADB3D1
FA1CF54CBD44930B4BEC5BC78BA9C7B89C566C4DFC46A1AB08BA24CA8D59C428
6610FFE82E87219CAC53A107793738E4706AFA0841B33ACDEDF031041D028C84
25A8A385E6B45A91160DEEC97E1035040> |-
/afii9845 <1C60D8A8C9B7931D0E9566B8B3C7713741970C84658F8E131C9FD
89AA5703FDD134810BEAB06E4512FD515831D97167F64843147CA262DABC3349
4C6410EE5E0CDCB7BC099EAE498C7767D6FBBFCCAFDF7583B448E7C9DAED2C1C
6E4926BFBCA92DDC04F0A2BAFBA7E1B25EC8C1C6A5B50C568C489F57EC1B17B4
F1D> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEG+MathPackTen /UGXAAA+MathPackTen findfont ct_VMDictPut
/TIADEG+MathPackTen*1 
[104{/.notdef}rp /afii9835 8{/.notdef}rp /afii9845 142{/.notdef}rp]
TIADEG+MathPackTen nf
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
226.173 317.397 mo
(q)sh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
231.832 317.397 mo
(c)sh
TIADEF+RMTMI*1 [7.7987 0 0 -7.7987 0 0 ]msf
236.39 318.938 mo
(v)sh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
240.998 317.398 mo
(\))sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
244.829 318.938 mo
(M)sh
%ADOBeginSubsetFont: MZQAAA+MTSYN Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+MTSYN def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1992-1996 Michael Spivak.  Hinting Copyright (c) 1992-1996 Y&Y, Inc.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (MTSYN) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /periodcentered put
dup 67 /plus put
dup 68 /equal put
dup 80 /dotaccent put
def
/FontBBox {0 -954 1043 900} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 465 484 501 506 657 676] def
/OtherBlues [-209 -186] def
/BlueScale 0.04796 def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [20 50] def
/StemSnapV [30 50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/periodcentered <1C60D8A8C9B854D0F479741B85BD59B15BC1882EA9068C5
7165AC6F355FC3AF53BBA5C5EC9131B7C7C1F36> |-
/plus <1C60D8A8C9B6C180FE7E255088499B6A505EB6DB68D164499DB9EA750
FB0D3A3E3A0CD84145FF9C6BFBD788867A42A3EE76DE914F1C24FCA43C0A3> |-
/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A
5FA4521910F4A25ADF4E42AFDF85360EA65D> |-
/dotaccent <1C60D8A8C9B81F2C35626789A1AA173D52BA0E0DBF962FA3FDBB
164FD95F58BAA783729624AB33A8BAB3E8> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEH+MTSYN /MZQAAA+MTSYN findfont ct_VMDictPut
/TIADEH+MTSYN*1 
[/.notdef /periodcentered 65{/.notdef}rp /plus /equal 11{/.notdef}rp /dotaccent 175{/.notdef}rp]
TIADEH+MTSYN nf
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
253.116 314.777 mo
(P)sh
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
252.259 317.398 mo
(h)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
257.386 318.938 mo
(M)sh
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
267.098 317.398 mo
(C)sh
%ADOBeginSubsetFont: ELRBAA+MTSYB Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+MTSYB def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1996 Michael Spivak.  Hinting Copyright (c) 1996 Y&Y, Inc.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (MTSYB) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 114 /nabla put
def
/FontBBox {-16 -935 1043 896} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 465 484 501 506 657 676] def
/BlueScale 0.045 def
/StdHW [50] def
/StdVW [50] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/nabla <1C60D8A8C9B6F64743E462D62C40A2CAFBB86E14AD001F3DB6028E72
08B8BC6B5F693DC675D4B00291381242147F64E6AB2C> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEI+MTSYB /ELRBAA+MTSYB findfont ct_VMDictPut
/TIADEI+MTSYB*1 
[114{/.notdef}rp /nabla 141{/.notdef}rp]
TIADEI+MTSYB nf
TIADEI+MTSYB*1 [10.2615 0 0 -10.2615 0 0 ]msf
277.387 317.398 mo
(r)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
285.293 318.938 mo
(M)sh
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
295.006 317.398 mo
(\001)sh
TIADEC+Times-Bold*1 [10.2615 0 0 -10.2615 0 0 ]msf
300.139 317.398 mo
(q)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
305.842 318.938 mo
(M)sh
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
314.986 317.398 mo
(D)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
324.698 317.398 mo
(0\(2\))
[150.278 3.42007 5.13385 0 ]xsh
80.4672 339.099 mo
(where)
[7.41086 5.1328 4.55817 3.41905 0 ]xsh
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
107.502 339.099 mo
(h)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
112.637 340.639 mo
(M)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
120.067 339.099 mo
(,)sh
TIADEC+Times-Bold*1 [10.2615 0 0 -10.2615 0 0 ]msf
124.596 339.099 mo
(q)sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
130.298 340.639 mo
(M)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
139.702 339.099 mo
(and)
[4.55817 5.1328 0 ]xsh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
156.484 339.099 mo
(\()sh
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
160.315 339.099 mo
(q)sh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
165.981 339.099 mo
(c)sh
TIADEF+RMTMI*1 [7.7987 0 0 -7.7987 0 0 ]msf
170.539 340.639 mo
(v)sh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
175.14 339.099 mo
(\))sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
178.97 340.639 mo
(M)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
188.366 339.099 mo
(representthetemperature,theheat\257uxandtheheatcapacity,respectively.)
[3.41803 4.55713 5.13177 3.41803 4.55714 3.99283 4.55713 5.13177 4.80956 2.85373 5.13177 6.52324 
2.85065 4.55714 7.98447 5.13177 4.55716 3.418 4.55716 2.8537 5.13177 3.41803 4.55716 4.51404 
2.85062 5.13177 6.52325 5.13177 4.55713 4.55713 4.80957 5.70642 5.13177 7.09894 4.55713 5.13177 
7.09167 2.85373 5.13177 6.52322 5.13385 4.55713 4.55713 4.81671 4.55713 4.55713 5.13177 4.55713 
4.55713 2.8537 2.85373 4.45657 4.52121 3.42007 4.55713 3.9928 5.13177 4.55713 4.55713 2.85373 
2.60641 4.96759 4.55713 2.8537 4.4494 0 ]xsh
80.4677 351.05 mo
(Thisbalanceequationistobecomplementedbymacroscopicboundaryconditionsandadditionally)
[6.27072 5.13178 2.85372 6.41557 5.13177 4.55714 2.85371 4.55714 5.13177 4.55713 6.97679 4.55714 
5.13177 5.13179 4.55713 2.85373 2.85371 5.13177 7.55247 2.85063 6.41557 2.85065 7.55963 5.13385 
6.98398 4.55713 5.13177 7.98448 5.13177 2.85371 4.55714 7.98447 4.55713 5.13177 2.85371 4.55713 
7.54526 5.13385 7.55246 7.98447 4.55713 4.55713 3.41803 5.13174 3.99283 4.55713 5.13177 5.13177 
2.8537 6.9696 5.13177 5.13177 5.13177 5.13174 5.13177 4.55713 3.41803 7.53809 4.55713 5.13177 
5.13177 5.13177 2.8537 2.8537 2.85373 5.13177 5.13177 6.40839 4.5571 5.13177 7.55966 4.55713 
5.13177 5.13177 2.8537 2.85373 2.8537 5.13177 5.13177 4.55713 2.8537 2.85373 0 ]xsh
80.4677 363.009 mo
(byinitialconditions.Withinageneralsetting,numericalapproximationtechniques\(i.e.the\256nite)
[5.13177 8.44522 2.85371 5.13178 2.85372 2.85371 2.85373 4.55713 6.16306 4.55714 5.13177 5.13177 
5.13177 2.85373 2.85371 2.85373 5.13177 5.13177 3.99283 5.87471 9.29488 2.85371 2.85373 5.13177 
2.85371 8.44522 7.86955 5.13383 4.55713 5.13177 4.55714 3.41803 4.55713 6.1487 3.99281 4.55713 
2.85371 2.85373 2.8537 5.13177 5.13177 5.8819 5.13177 5.13174 7.98447 4.55713 3.41803 2.8537 
4.55713 4.55713 6.14868 4.55713 5.13177 5.13177 3.418 5.13177 5.13177 2.8537 7.98447 4.55713 
2.85373 2.8537 5.13177 8.43085 2.85065 4.55713 4.5571 5.13177 5.13177 2.8537 5.13181 5.13177 
4.55713 7.29395 3.4201 2.8537 2.56641 4.55713 5.87466 2.85068 5.13177 7.86954 5.70639 5.13177 
2.8537 2.85373 0 ]xsh
80.4677 374.96 mo
(elementmethod\)havetobeusedtosolvethemacroscopicheat\257owproblem.)
[4.55714 2.85372 4.55713 7.98447 4.55714 5.13177 6.11996 7.98447 4.55714 2.85371 5.13177 5.13179 
5.13177 6.68118 5.13177 4.36319 4.96759 7.81927 2.85373 8.4021 5.13177 7.82645 5.13179 3.99283 
4.55713 8.40211 2.85373 8.4093 3.99283 5.13177 2.85373 4.96759 7.82648 2.85062 5.13177 7.82645 
7.98447 4.55713 4.55713 3.418 5.13177 3.99283 4.55713 5.13177 5.13174 2.85373 7.81927 5.13382 
4.55713 4.55713 6.11276 5.70642 4.89575 10.6843 5.13177 3.418 5.13177 5.13177 2.8537 4.55713 
7.98447 0 ]xsh
91.3757 386.912 mo
(Withintheproposedcomputationalhomogenizationproceduretheheat\257uxisobtainedfromthe)
[9.29487 2.85372 2.85372 5.13178 2.85371 7.73307 2.85372 5.13177 7.14919 5.13177 3.41803 5.13179 
5.13177 5.13177 3.99283 4.55713 7.71152 4.55714 5.13177 7.98448 5.13177 5.13177 2.85373 4.55713 
2.85373 2.85373 5.13176 5.13179 4.55713 5.43552 5.13179 5.13177 7.98445 5.13177 5.13177 4.55713 
5.13177 2.8537 4.55713 4.55713 2.8537 2.85373 5.13174 7.70435 5.13177 3.41803 5.13174 4.55713 
4.55713 5.13177 5.13174 3.41803 7.13483 2.8537 5.13177 7.14923 5.13379 4.55713 4.55713 5.44269 
5.70642 5.13177 7.72589 2.85065 6.58795 5.13177 5.13177 2.8537 4.55713 2.8537 5.13177 4.55713 
7.71869 3.41803 3.41803 5.13177 10.5765 2.8537 5.13177 0 ]xsh
80.4677 398.871 mo
(solutionofthemicro-scalethermalproblem,whichisde\256nedontheunderlyingmicrostructure.)
[3.99283 5.13177 2.85372 5.13178 2.85371 2.85373 5.13177 8.84131 5.13382 7.12038 2.85065 5.13177 
8.26566 7.98447 2.85373 4.55713 3.41803 5.13177 3.41803 3.99283 4.55714 4.55713 2.85373 8.25845 
2.85063 5.13179 4.55713 3.41803 7.98448 4.55713 6.55197 5.13177 3.41803 5.13179 5.13176 2.85371 
4.55714 7.98444 6.26361 7.40985 5.13177 2.8537 4.55713 8.84131 2.85065 7.70441 5.13382 4.5571 
5.70642 5.13177 4.55713 8.83414 5.13382 8.83414 2.85065 5.13177 8.26563 5.13177 5.13177 5.13174 
4.55713 3.41803 2.8537 5.13177 2.85373 5.13174 8.82693 7.98447 2.85373 4.55713 3.418 5.13177 
3.99283 2.8537 3.41803 5.13177 4.55713 2.8537 5.13177 3.41803 4.55713 0 ]xsh
80.4677 410.822 mo
(Inadditiontothemacroscopicheat\257ux,thediscretizedweakformofthemacroscopicgoverning)
[3.41803 8.23691 4.55713 5.13178 5.13177 2.85372 2.85372 2.85372 5.13177 8.22972 2.85065 8.23691 
2.85065 5.13177 7.65303 7.98448 4.55713 4.55713 3.41803 5.13179 3.99283 4.55714 5.13177 5.13177 
2.85373 7.65302 5.13383 4.55713 4.55714 5.94756 5.70642 5.13177 5.13177 5.6664 2.85371 5.13176 
7.66022 5.13382 2.85373 3.9928 4.55713 3.41803 4.55713 2.8537 2.85373 4.55713 4.55713 8.22971 
7.40985 4.55713 4.55713 8.23688 3.41803 5.13177 3.418 11.0804 5.13177 6.51596 2.85373 5.13174 
7.66022 7.98447 4.55713 4.55713 3.41803 5.13174 3.99283 4.55713 5.13177 5.13177 2.8537 7.64587 
5.13382 4.96042 4.96759 4.55713 3.418 5.13177 2.85373 5.13174 0 ]xsh
80.4677 422.781 mo
(equationrequiresthehomogenizedconductivityforthesolutionoftheresultingsystemofequations.)
[4.55714 5.13177 5.13177 4.55714 2.85372 2.85372 5.13177 7.09891 3.42008 4.55714 5.13177 5.13177 
2.85373 3.41803 4.55714 5.94763 2.85065 5.13177 6.53043 5.13177 5.13177 7.98448 5.13179 5.13177 
4.55713 5.13177 2.85373 4.55713 4.55714 7.08453 4.55714 5.13177 5.13177 5.13177 5.13177 4.55713 
2.8537 2.60645 5.13177 2.8537 2.8537 7.09174 3.41803 5.13177 5.38513 2.8537 5.13177 6.53043 
3.98874 5.13177 2.8537 5.13177 2.8537 2.8537 5.13177 7.10608 5.13385 5.38513 2.85065 5.13177 
6.53043 3.418 4.55713 3.99283 5.13177 2.8537 2.85373 2.8537 5.13177 7.09891 3.98871 5.13181 
3.9928 2.85373 4.55713 9.96494 5.13385 5.38513 4.55713 5.13177 5.13177 4.55713 2.8537 2.85373 
5.13174 5.13177 3.99283 0 ]xsh
80.4677 434.733 mo
(Theevaluationofthemacroscopicheat\257uxandtheextractionofthemacroscopicconductivity)
[6.27072 5.13178 8.40211 4.31291 4.87421 4.55713 2.85373 5.13177 4.55714 2.85372 2.85373 5.13177 
8.96342 5.13382 7.26508 2.85065 5.13177 8.4021 7.98448 4.55714 4.55713 3.41803 5.13177 3.99283 
4.55714 5.13177 5.13177 2.85373 8.38774 5.13383 4.55714 4.55713 6.68845 5.70639 5.13177 8.97778 
4.55713 5.13177 8.97064 2.8537 5.13177 8.4021 4.41345 5.13177 2.85373 3.418 4.55713 4.55713 
2.85373 2.8537 5.13177 8.97061 5.13382 7.2579 2.85062 5.13177 8.40213 7.98447 4.55713 4.5571 
3.41803 5.13177 3.99283 4.55713 5.13174 5.13177 2.85373 8.38776 4.55713 5.13177 5.13174 5.13177 
5.13177 4.55713 2.8537 2.60645 5.13177 2.8537 2.85373 0 ]xsh
80.4677 446.691 mo
(areelaboratedinthefollowingsections.)
[4.55714 3.41803 7.82645 4.55714 2.85372 4.55713 5.13178 5.13177 3.41803 4.55714 2.85372 4.55714 
8.38774 2.85065 8.4093 2.85065 5.13177 7.82645 3.41803 5.13179 2.85371 2.85371 4.89578 7.40982 
2.85373 5.13177 8.39493 3.99283 4.55714 4.55713 2.85373 2.85371 5.13179 5.13177 3.99281 0 
]xsh
91.3757 458.643 mo
(ForthedeterminationofthemacroscopicheatstoragetobesubstitutedinEquation\(2\),the)
[5.55865 5.13383 7.55957 2.85065 5.13177 8.69765 5.13177 4.55713 2.85373 4.55713 3.41803 7.98448 
2.85373 5.13177 4.55713 2.85373 2.85373 5.13176 9.25896 5.13382 7.55957 2.85065 5.13177 8.69766 
7.98447 4.55713 4.55714 3.41803 5.13177 3.99283 4.55714 5.13174 5.13177 2.85373 8.68329 5.13382 
4.55713 4.55713 6.98395 3.99286 2.8537 5.13177 3.418 4.55713 5.13177 8.69766 2.8537 9.27332 
5.13177 8.69049 3.9928 5.13177 5.13177 3.9928 2.8537 2.85376 2.8537 5.13177 2.8537 4.55713 
9.27332 2.85065 9.27332 6.27075 5.13177 5.13171 4.55713 2.85376 2.8537 5.13177 9.26611 3.41803 
5.13177 3.41803 6.70276 2.85376 5.13171 0 ]xsh
80.4677 470.602 mo
(followingvolumeaveragingisproposed:)
[3.41803 5.13177 2.85372 2.85372 4.89577 7.40983 2.85372 5.13177 8.40211 4.91731 5.13382 2.85373 
5.13177 7.98447 7.81927 4.36319 4.96759 4.55714 3.41803 4.55714 5.13177 2.85371 5.13179 8.38774 
2.85063 7.26523 5.13177 3.41803 5.13179 5.13177 5.13177 3.99283 4.55713 5.13179 0 ]xsh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
221.264 497.753 mo
(\()sh
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
225.094 497.753 mo
(q)sh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
230.754 497.753 mo
(c)sh
TIADEF+RMTMI*1 [7.7987 0 0 -7.7987 0 0 ]msf
235.31 499.298 mo
(v)sh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
239.918 497.758 mo
(\))sh
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
243.749 499.298 mo
(M)sh
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
252.886 497.758 mo
(D)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
265.291 490.565 mo
(1)sh
263.801 495.425 mo
271.923 495.425 li
271.923 494.95 li
263.801 494.95 li
cp
f
%ADOBeginSubsetFont: QJJAAA+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
systemdict begin
TIADED+Times-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7D8BE6A73E65051E542B429D78D577801192B643256BA7947
70C156F51E7C56CC5415A1BDC5C1A9FA82BF5931916D37113E42F38EF13EDC15
14A01C560DBA5638C8E7B4A9C4D4D35C4963D982FD28C637420F41AA440A94D9
EF12B38C87897B5AC7D78486E9706C6D11DFB91B618274057AB4D05DF2D66060
35C8B3F17B5627ADD079558B95D9C3E7F354373EDC36CE8D518CA3F27D0D0B89
570B46BB84FADAEFBD645BB6CDA07A34B1BEB18B504E124052BC55AF47AEB7CD
2102A1C170E62D5530519A9C6A9877B433D649FC69E10AE76F7AE26EBCE50A9F
CB513CA7077C50E0CCEF1829DF9537B4> |-
/I <1C60D8A8C9B81F2C46F55B674ABD86307E459A4BD29AE2034FCA1F40A20D
D17D8A5C9793C7EAEF04C9C029B6BE1093EBEC9309F1B18ACE7ACCC57B309754
025882DAAECE60BCE858D3122ECAF4E48E39DAA7268385FEA96B057D079D24FA
1FFDA786DB171B8B4C2152E431325BF49C> |-
/J <1C60D8A8C9B77FE24031B6961F98D734D19D3E1174B0D1AD74D40948EEB4
9AC005EA559DF8E8E3382F2C5514DF74F261B63E391B7858A9188AB5C1688063
815CAAA1925D498E140B2A141A493AF5044F73A3E39F597F54006BD718A418B3
6014F142ACA5F6F1F6B57E9BAA498E884F505B8B62EE4E61C0759BF6A5BC08> |-
/M <1C60D8A8C9B6B41CC783D416F61059E3D559D35A260121EAB0ADCCE3A697
1FEFEA46A3D8736FECD39C20F7B668053B9BA707608B6CA802AA6A9396CE384F
414BFF584C23FEDAA24645D0BF8364F4256160D1A74A28A8321751AD29B872D2
EE02A9682CB9D04BA6A7F86D65353256FB32E479FBAEA5ECB92983B4AB44BB39
9529B15D45C5625C684EED74D1E015B469F4ED9BA49C26B9CD21E39157C9B15C
6F05D442AFC1D4D6695D665C910A926BC642CF905551FA81BBBFE1217808> |-
/N <1C60D8A8C9B64EDF88223AA8A1E7E03211E3C5C073D423EE978F8DD5F307
16A1660DA454B881C2EEB1CEE98029D49D1931C20F1A7CB9D20BFF24BA0852B1
8620C21A373131D39550ED4E43D68825AE0B6B616EBFBDE72396BCD326C2B937
965999E83320408C03A162DAE10500B9163B3FCE952C36FE141C465D2DD171E9
ED406E3A5B247B3BD5B261C124B4A845EF8E411242C4F61D4D99904A> |-
/g <1C60D8A8C9B7A73DB58E9D80E9F8DE9ADE0BC0E1948BD5C2B851A1A04931
ABBBDC29981173405C59961867DC274EF161FBFE5610368C76A8A7B947D45638
84CC050684C1F85C77115A0CAB1AC1F9F9AAD389D180BA17E067D80BF3D621DE
6BF76C6F2E7E481E142F29516A9E19FA0EC3D0C2C6082CF6AE9C357D4F7A22D9
51BFAE77C4254D8C21E4EA7F55B7E1D52B46CD0AFA90CDF6DAF4A87C21176E6A
C620423AD32281BF1CFA649FBC3C5BB4EB8A149C29EECA2C911CE036260226AB
3E29838254CE105796F2204B16BF45A4CE5E83903D3C850083D28CC063C09772
65991120079B302AE463EAEC9308A8F83C736AC39ACFD1CCA6BF3E4007760C2C
3F1F7E92696D9A25AC7E61> |-
/n <1C60D8A8C9B7A73DCCC46A90663237F25DC1DEF2803E2517BDFFEBE32E49
0B5925907C54D0EEEDDA986A011AB6F9AB5463A7ED297EA31508FE2B9C0D05E8
29072A4F6302DDC14E64DEAD8CBF4A5BA1DDAFDF708B014BEF9CF889AE8A97AD
C3A22EAD22E45A20DE41F94103561B63D1DD0A0AE9169EA3CC283FD9A3D8CB18
7F93F68E305E433B57D67CACC6CDBE0A534F1751824AF3B1C87D2976BD87BA5E
8972F318216B96C159FE5FBF4962B1B5DC79F13726FC9C69582B9D020765948A
693A4945D598828E5080A676A51C52895E9BA78B2D1E6E04C1> |-
/t <1C60D8A8C9B854D083A90EFBF670F56270DF3DECC5D78D540E48D0903C83
B81E82EAD92BB807EB452F4A3465C6121F9B502A2B3ED64C9D8D0AE2B2BE3835
BD8601273AFDF1098CFD296F18265A19D28BA0307CDD19EC6EA347AB233BD4E2
0CD2569B1D288EC311B5A029A1645BC0E215EFB68AF3D6B000CDF87F> |-
/u <1C60D8A8C9B7A73DCEA80DF8B535931210C82AABF5B8F71524C63CCE81F6
D2F348CD631C0BDB7C3B533CDDF9990F095AD2382394DDB0C5FF75EDBCF3314E
A521757B7606B40554A1058FABDD23A0E3E496A80DDB4767FB397BFC88513D99
6261B084886CBF82A2BAC100367FDFF799A3453989FDA7858187851AE375819B
DD22E6B7719B6E49396B6DE0C071459BD8A6E275957615979DA3104AB1702EBA
A251460C46F580B2CF9C5666AEB7CA36EB592BF70D87F1DD272449141721004B
A3B0D2680B3715EAD194D1F417> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIADED+Times-Italic /Encoding get
dup 69 /E put
dup 73 /I put
dup 74 /J put
dup 77 /M put
dup 78 /N put
dup 103 /g put
dup 110 /n put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/TIADED+Times-Italic*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three 17{/.notdef}rp /E 3{/.notdef}rp 
/I /J 2{/.notdef}rp /M /N 5{/.notdef}rp /T /.notdef 
/V 10{/.notdef}rp /a /b /c /.notdef /e /.notdef 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
TIADED+Times-Italic nf
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
264.089 505.044 mo
(V)sh
%ADOBeginSubsetFont: AXNBAA+MTEX Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /AXNBAA+MTEX def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation. Hinting (c) 1992, 1993 Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (MTEX) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /integraldisplay put
def
/FontBBox {-23 -2958 1456 766} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 758 768] def
/OtherBlues [-605 -595] def
/BlueScale 0.04796 def
/StdHW [67] def
/StdVW [67] def
/StemSnapH [42 67] def
/StemSnapV [67 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/integraldisplay <1C60D8A8C9B78B91D905BB93AD4A372BE89BA9DA2FD6BC
960F2EA1185508D309CC69409E8ABF27444ED92CE751862D2CBED06F8AFB3005
4D9AE7E2B8D16FA3B964DD1260F3E79C29A73E781667150E7DF383B4355D7BFD
8A39B919A017018220E288872CA2ECF3DDFB9B6CD18F0EC051F6363CCD3E9494
229E0FE5DA88477D14A0C5082AA60EB7B2F3FAFC4AEB7C393C66AE72E56004CB
F2542EFBA2F063A621DF158C8F809A784F79D105C5D756805EEABAC8DAC8CBC6
3EB6AC> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEJ+MTEX /AXNBAA+MTEX findfont ct_VMDictPut
/TIADEJ+MTEX*1 
[90{/.notdef}rp /integraldisplay 165{/.notdef}rp]
TIADEJ+MTEX nf
TIADEJ+MTEX*1 [10.2615 0 0 -10.2615 0 0 ]msf
274.817 483.789 mo
(Z)sh
TIADED+Times-Italic*1 [7.7987 0 0 -7.7987 0 0 ]msf
280.454 506.981 mo
(V)sh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
286.906 497.758 mo
(\()sh
TIADEG+MathPackTen*1 [10.2615 0 0 -10.2615 0 0 ]msf
290.736 497.758 mo
(q)sh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
296.395 497.758 mo
(c)sh
TIADEF+RMTMI*1 [7.7987 0 0 -7.7987 0 0 ]msf
300.953 499.298 mo
(v)sh
TIADEF+RMTMI*1 [10.2615 0 0 -10.2615 0 0 ]msf
305.561 497.758 mo
(\))sh
%ADOBeginSubsetFont: WGJAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
systemdict begin
TIADEB+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ampersand <1C60D8A8C9B6FF867C9EBA46E5EA733FC0112613A11203DFD241
8D37168C2FC63430EBDDEB6E97B4A23CA3C7B264F12ED867BEE8E3430141D78C
9AC5BB5B5CFA9E342B33B6FC57B5A50423E1A3884CBEAFA06C8AE87718B226CA
E178795DEE6191FAA9E99B72BFAA89E6178F0E234DCC0C50BC84580BE2D14547
BA2A9E575BC5CD705871C550DF35F33632DE43D0455992203DDAEE8124F9701C
5E347ABA314F2A2A323A406ECFE9D71F2F3D17D76C6B35CB5CDECA8B4A9AB365
38DF57B8F380430409816CDB84E7212BDF8E07AA1CFCB27F53DF539FC81C4D0F
9748CEAC2FA8F7868D72F2E548A47C1047961C270C0F6E82F7107274619F5019
A0CAF031E7F8BD554396954E9E7475A730A00A96E25A5A1CF6E48FA70C3338E8
3D66592ADD34698611EBC462B7> |-
/slash <1C60D8A8C9B854D07E927EBDB178F65FFD8DB701C952B39F171599CF
0C85B0> |-
/three <1C60D8A8C9B7A73D33B7A78126FE15DF29F9E11CD551C2696CB6B783
0F98E9EFA1A604D25540646764D8351BDA6B7FAD7B8D2E46371C19F5E5E31C9F
9400DDD18E851C39872E2FD39F8018E52087431032DAC67464BB63879391F033
A9E5130E692A1B6D68A4AEB033CDA2632F99395B6B3867A8D0EF4FF0A03C6687
74FF561F5DED2EE3E6135CBEFC63F975C29E5A72C58CB3AE5439D4D54FB4EB59
1B7E> |-
/four <1C60D8A8C9B7A73DC54C6E607A67585AA1236AF60B4B35EF47CEF5129
4BE71F3BA9D30DAE61AF927D0FB4196D444AE0185964C209EE55272CBD14757F
60B971080FD7A4C1E24D167> |-
/five <1C60D8A8C9B7A73D33B7A7808F907B8CF817AA39457C28EED09F83536
4CDF76C839FE29D14AEA6DA2AE868662D661BAB4AE9B7CD38B55690EB395F0E1
8AF71965CEA5C1CB6D9ADD0E6B99C801B130E06B3CE4E71D2835367F2F8F13BE
758724E52F7FF6B0A7D11DBAE2778E6785350119E7684543BA51AEF0FAE09C69
54FD5E9F58E7359AE22B1EDA683504BC1C67B8067C3703DE03D80462629E9BB9
FC1638B512CDD016A> |-
/six <1C60D8A8C9B7A73D3387F335429713B01D693890B12344636CDE1F60FE
CBF1CB4F3640F67470E35563CB16A34DB7F7F37CEEC8DCCB1165242EC1B949AB
BF4B5201B7CEEF3E3CA53BBED47CAE4D348E627ABD071C64FEF927CFA6AD0EED
39875B9071F1D6864748A7CA1E1D0B4FEDAAEEF6B117B8EE88E68819836B0EB7
E459010D4A62E6029F4A75C008BF98E8A9AD658D38A2B2D08E45ED6B2C61> |-
/seven <1C60D8A8C9B7A73DCDD9F59C9ED29C009B24D973ADBD780971EC7C4D
86BB71C9B9A1DF14D2EE828CB8AB043422D388C3ADDEBA4875ED76614F56CDCA
86A1FF9639AF16BE> |-
/eight <1C60D8A8C9B7A73D3387F334BDB7D28650F0DE50C965981EE9B2030D
4EFFFE5FBB31F4BE839C7E03AFC6C46BB845C72D4CEBA5CD68B011052B3E1BDA
3C16C1B2E585BD50C43CC100B0A2F06BC88F4BEEF1CDEF8AA2E7DFA90DBF62BF
D0506935F53E3265CE858537F75D210B73D3E2C04753D9C35A1B3CF1CDA81310
B1C8F34D488DF586F6700B8FE2C786AC3B9C5BE9ED9A59C1A1230C0484FBBDAB
63ACD15448DCA8150B468EF0DA5E71277A74F413BAF74F33D08A4D262814A8> |-
/semicolon <1C60D8A8C9B854D08670E9181F67567937CB82BBE53FE502DF9A
C456E61E22CAAD6388A9C0DFE877347BF4A78C744CF3282F9BF4B214F0596B24
41DAB25C52124D9079BDB6694FD3F75A35129B52CE470DF063BC17A7F260FF38
8B3525E6A3CBCF93135C79C2CD42170C1A0BE35C239FD7E69BC3F14DA18534A9> |-
/C <1C60D8A8C9B64EDF7E00C809794E312CE515471D7F574E7EE79B59CBD6DA
85418E2EF0A2760C4BEC07D6CE4F27EB23E0B6B66B1E8B88BF7E2CE1D01E7174
92C8DDD82A18D3B0564DA8E501C4A97A3241DBB84D486A81F2E10F479803228B
5884A719AA6276E2712AE12F45A49BA8325895A70DECE258CCCC35AFC908FA91
28F75E9E57C1B12DC60B91A2B22720> |-
/J <1C60D8A8C9B7361F8811DC0F93E4492D3CAA27CAEDB41AA0DE13FC7AA8F8
4A7FFADAEF3A85703DFDF3049A27577016A5F3432B765353DE4031A9DD7C96DE
A18E22E29768689205820AB362BD351850BB99F04A5385ED0A8D857281> |-
/endash <1C60D8A8C9B7A73DB9786F165DDE0947BE09D7392F2C94EC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIADEB+Times-Roman /Encoding get
dup 38 /ampersand put
dup 47 /slash put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 59 /semicolon put
dup 67 /C put
dup 74 /J put
dup 177 /endash put
pop
%ADOEndSubsetFont
/TIADEB+Times-Roman*1 
[38{/.notdef}rp /ampersand /quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /slash /zero /one /two /three /four /five 
/six /seven /eight /nine /colon /semicolon 5{/.notdef}rp /A 
/B /C /D /E /F /G /.notdef /I 
/J /K /L /M /N /O /P /.notdef 
/R /S /T /.notdef /V /W 2{/.notdef}rp /Z 
6{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 51{/.notdef}rp /fi /fl /.notdef /endash 
22{/.notdef}rp /dieresis 55{/.notdef}rp]
TIADEB+Times-Roman nf
TIADEB+Times-Roman*1 [7.7987 0 0 -7.7987 0 0 ]msf
309.391 499.298 mo
(m)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
317.664 497.758 mo
(d)sh
TIADED+Times-Italic*1 [10.2615 0 0 -10.2615 0 0 ]msf
323.085 497.758 mo
(V)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
474.976 497.758 mo
(\(3\))
[3.42007 5.13385 0 ]xsh
80.4674 524.837 mo
(whichcanbealsoobtainedbytheasymptotichomogenizationmethodasdonein)
[7.40983 5.13177 2.85373 4.55713 7.54529 4.55713 4.55714 7.54528 5.13177 6.96962 4.55713 2.85373 
3.99283 7.55246 5.13177 5.13177 2.85373 4.55713 2.85373 5.13177 4.55714 7.5381 5.13382 7.54529 
2.85065 5.13177 6.9696 4.55716 3.99283 5.13177 7.98447 5.13177 2.8537 5.13177 2.8537 2.85373 
6.9696 5.13177 5.13177 7.98447 5.13177 5.13174 4.55713 5.13177 2.85373 4.55713 4.5571 2.85373 
2.8537 5.13177 7.52374 7.98447 4.5571 2.85373 5.13177 5.13177 7.54526 4.55713 6.40121 5.13177 
5.13174 5.13177 6.96964 2.8537 0 ]xsh
%ADOBeginSubsetFont: MZQAAA+MTSYN AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
systemdict begin
TIADEH+MTSYN dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleft <1C60D8A8C9B81F2C36B2094B9ED0E07AA432BA5CE2E14AF649
DC5BA3330C7DB95F387BF1EBC0E7FC5B84B7C1364C4FA41B288C19A4> |-
/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE2459225F309B9
1BA08184F355A139BA63E605C3800DE6A2C5A43D308D1B137E909B514D7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIADEH+MTSYN /Encoding get
dup 84 /bracketleft put
dup 85 /bracketright put
pop
%ADOEndSubsetFont
/TIADEH+MTSYN*1 
[/.notdef /periodcentered 65{/.notdef}rp /plus /equal 11{/.notdef}rp /dotaccent 3{/.notdef}rp 
/bracketleft /bracketright 170{/.notdef}rp]
TIADEH+MTSYN nf
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
413.985 524.837 mo
(T)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
417.405 524.837 mo
(6)sh
TIADEH+MTSYN*1 [10.2615 0 0 -10.2615 0 0 ]msf
422.539 524.837 mo
(U)sh
TIADEB+Times-Roman*1 [10.2615 0 0 -10.2615 0 0 ]msf
425.959 524.837 mo
(.Thisequation)
[4.97476 6.27075 5.13177 2.8537 6.40839 4.55716 5.13177 5.13177 4.55713 2.85373 2.85373 5.13177 
0 ]xsh
80.4684 536.795 mo
(re\257ectsthattheheatcapacityisconsistentlypreserveduponscalebridging.Inacomputational)
[3.41803 4.55714 5.70641 4.55714 4.55714 2.85372 7.97737 2.85064 5.13177 4.55714 6.83313 2.85065 
5.13177 8.54579 5.13177 4.55713 4.55713 6.83313 4.55714 4.55714 5.13177 4.55713 4.55713 2.85373 
2.85373 9.10809 2.85373 7.98456 4.55713 5.13177 5.13177 3.99283 2.85373 3.99283 2.8537 4.55713 
5.13177 2.85373 2.8537 9.1153 5.13177 3.418 4.55713 3.99283 4.55713 3.41803 4.96759 4.55713 
9.10809 5.13177 5.13177 5.13177 9.10809 3.99283 4.55713 4.55713 2.8537 8.54681 5.13177 3.41803 
2.8537 5.13177 5.13177 2.8537 5.13177 5.13177 6.5376 3.41803 9.11533 8.53857 4.55713 5.13177 
7.98447 5.13177 5.13177 2.8537 4.55713 2.85373 2.8537 5.13177 5.13177 4.5571 0 ]xsh
80.4684 548.747 mo
(context,inadditiontothemacroscopicheat\257uxandtheconductivity,alsothemacroscopic)
[4.55714 5.13177 5.13177 2.85372 4.41348 5.13383 2.85372 7.59557 2.85371 10.1804 4.55714 5.13177 
5.13177 2.85371 2.85373 2.85373 5.13177 10.1661 2.85065 10.1732 2.85063 5.13177 9.59041 7.98447 
4.55713 4.55713 3.41803 5.13181 3.99283 4.55713 5.13177 5.13177 2.8537 9.58322 5.13382 4.55713 
4.55713 7.89108 5.70642 5.13177 10.1732 4.55713 5.13174 10.1661 2.8537 5.13177 9.5976 4.55713 
5.13177 5.13177 5.13177 5.13174 4.55713 2.85373 2.60641 5.13177 2.8537 2.85373 4.45654 7.58838 
4.55713 2.85373 3.9928 10.1733 2.85068 5.13174 9.59756 7.98447 4.55713 4.55713 3.41803 5.13177 
3.9928 4.55713 5.13177 5.13177 2.8537 0 ]xsh
TIADEB+Times-Roman*1 [8.4683 0 0 -8.4683 0 0 ]msf
80.4672 572.537 mo
(Copyright)
[5.64842 4.23415 4.14015 4.23415 2.81988 2.35419 4.23415 4.23415 0 ]xsh
%ADOBeginSubsetFont: YEKBAA+Universal-NewswithCommPi Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /YEKBAA+Universal-NewswithCommPi def
/FontInfo 8 dict dup begin
/Notice ( The digitally encoded machine readable software for producing the Typefaces licensed to you is copyrighted (c) 1988 Adobe Systems. All rights reserved. This software is the property of Adobe Systems Incorporated and its licensors, and may not be reproduced, used, displayed, modified, disclosed, or transferred without the express written approval of Adobe. The digitally encoded machine readable outline data for producing the Typefaces provided as part of your laser printer is copyrighted  (c) 1981 Linotype All Rights Reserved. This data is the property of  Linotype and may not be reproduced, used, displayed, modified,  disclosed or transferred without the express written approval of  Linotype. ) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Universal-NewswithCommPi) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-7 -227 989 764} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0 757 757] def
/OtherBlues [-227 -227] def
/StdHW [54] def
/StdVW [54] def
/StemSnapH [24 30 37 44 48 54 88] def
/StemSnapV [30 37 44 48 54 65] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B6B41C3377E21490194EA9811FFEA3CE3BB30FD37ED7
5A06A466B3F812CCA183CA35671C710A002CB180B4B1744C7E513EB200DD13DC
3B9D4F4524A931F6B7008F6267CF4F9E93F04E3E3A0F7C36DBA585A853741452
0C6E89E103B9D7256D683D8235924DCFD3D762B4230B3950CBDDEB31A8E899B0
A203E5A19D823EC98487F96C8132CEFCA124638367A9E4A5685AEC0647B358A4
0D85D9909C8DEFD7C2ECD526547AFDCCD1C9414D17FE7D5F923C3BAD979F2D0B
181AD8> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TIADEK+Universal-NewswithCommPi /YEKBAA+Universal-NewswithCommPi findfont ct_VMDictPut
/TIADEK+Universal-NewswithCommPi*1 
[256{/.notdef}rp]
TIADEK+Universal-NewswithCommPi nf
TIADEK+Universal-NewswithCommPi*1 [8.4683 0 0 -8.4683 0 0 ]msf
117.995 572.537 mo
( )sh
TIADEB+Times-Roman*1 [8.4683 0 0 -8.4683 0 0 ]msf
128.318 572.537 mo
(2007JohnWiley&Sons,Ltd.)
[4.23415 4.23415 4.23416 7.50969 3.29424 4.23415 4.23415 7.50969 7.66805 2.35419 2.35419 3.62189 
7.50969 9.86388 4.70923 4.23415 4.23415 3.29424 5.38585 5.17661 2.35419 4.23415 0 ]xsh
TIADED+Times-Italic*1 [8.4683 0 0 -8.4683 0 0 ]msf
324.235 572.537 mo
(Int.J.Numer.Meth.Engng)
[2.81989 4.23413 2.35419 5.39264 3.55667 5.38583 5.64844 4.23413 6.11414 3.75992 2.33984 5.39264 
7.05402 3.75992 2.35419 4.23416 5.39261 5.17407 4.23413 4.23416 4.23413 0 ]xsh
TIADEB+Times-Roman*1 [8.4683 0 0 -8.4683 0 0 ]msf
423.642 572.537 mo
(2008;)
[4.23416 4.23413 4.23416 4.23413 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.
systemdict begin
TIADEC+Times-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D33A01A1F584E1AF94CFDC41A55CDC2C71D2E0D70
4D7BB7C37A1B4D51BF13A6B5F268E1976802F83522311A110ACE75AAAA411E00
36F1B153FFDFD139C3890DD25CCF942E4E265DE270D016EB9FA536E9410DB13F
1572A1A89FBA517CBEEFB3ED67BDB4B3CF14A092C32E354FF37A57D9A0021633
270165DAFFA5258C22D283F11164A6645EDD> |-
/seven <1C60D8A8C9B7A73DC574B14687D8BA24EB65B1B7EA2400DBFD690782
F69D721C1248E41D8E9FFA5C30DDA793444F9FBCF5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIADEC+Times-Bold /Encoding get
dup 51 /three put
dup 55 /seven put
pop
%ADOEndSubsetFont
/TIADEC+Times-Bold*1 
[51{/.notdef}rp /three 3{/.notdef}rp /seven 54{/.notdef}rp /n 2{/.notdef}rp /q 
142{/.notdef}rp]
TIADEC+Times-Bold nf
TIADEC+Times-Bold*1 [8.4683 0 0 -8.4683 0 0 ]msf
446.207 572.537 mo
(73)
[4.23416 0 ]xsh
TIADEB+Times-Roman*1 [8.4683 0 0 -8.4683 0 0 ]msf
454.675 572.537 mo
(:185\261204)
[2.35419 4.23416 4.23413 4.23416 4.23416 4.23413 4.23416 0 ]xsh
420.531 582.495 mo
(DOI:10.1002/nme)
[6.11411 6.11414 2.81985 5.63058 4.23416 4.23413 2.11707 4.23416 4.23416 4.23413 4.23416 2.35419 
4.23416 6.58832 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/TIADEI+MTSYB*1 uf
/TIADEI+MTSYB uf
/ELRBAA+MTSYB uf
/TIADEE+MathPackThirteen*1 uf
/TIADEE+MathPackThirteen uf
/GFNBAA+MathPackThirteen uf
/TIADEB+Times-Roman*1 uf
/TIADEB+Times-Roman uf
/WGJAAA+Times-Roman uf
/TIADEC+Times-Bold*1 uf
/TIADEC+Times-Bold uf
/HIBBAA+Times-Bold uf
/TIADEG+MathPackTen*1 uf
/TIADEG+MathPackTen uf
/UGXAAA+MathPackTen uf
/TIADEF+RMTMI*1 uf
/TIADEF+RMTMI uf
/OOLBAA+RMTMI uf
/TIADEJ+MTEX*1 uf
/TIADEJ+MTEX uf
/AXNBAA+MTEX uf
/TIADEK+Universal-NewswithCommPi*1 uf
/TIADEK+Universal-NewswithCommPi uf
/YEKBAA+Universal-NewswithCommPi uf
/TIADED+Times-Italic*1 uf
/TIADED+Times-Italic uf
/QJJAAA+Times-Italic uf
/TIADEH+MTSYN*1 uf
/TIADEH+MTSYN uf
/MZQAAA+MTSYN uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
